{
  "openapi": "3.0.1",
  "info": {
    "title": "GROWI REST API v3",
    "version": "7.2.6-RC.0"
  },
  "servers": [
    {
      "url": "https://demo.growi.org/_api/v3"
    }
  ],
  "security": [
    {
      "bearer": [],
      "accessTokenInQuery": []
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "scheme": "bearer",
        "description": "Access token generated by each GROWI users"
      },
      "accessTokenInQuery": {
        "type": "apiKey",
        "name": "access_token",
        "in": "query",
        "description": "Access token generated by each GROWI users"
      },
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "connect.sid"
      },
      "transferHeaderAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-growi-transfer-key"
      }
    },
    "schemas": {
      "SyncStatus": {
        "type": "object",
        "properties": {
          "isExecutingSync": {
            "type": "boolean"
          },
          "totalCount": {
            "type": "number"
          },
          "count": {
            "type": "number"
          }
        }
      },
      "ActivityResponse": {
        "type": "object",
        "properties": {
          "serializedPaginationResult": {
            "type": "object",
            "properties": {
              "docs": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "67e33da5d97e8d3b53e99f95"
                    },
                    "id": {
                      "type": "string",
                      "example": "67e33da5d97e8d3b53e99f95"
                    },
                    "ip": {
                      "type": "string",
                      "example": "::ffff:172.18.0.1"
                    },
                    "endpoint": {
                      "type": "string",
                      "example": "/_api/pages.remove"
                    },
                    "targetModel": {
                      "type": "string",
                      "example": "Page"
                    },
                    "target": {
                      "type": "string",
                      "example": "675547e97f208f8050a361d4"
                    },
                    "action": {
                      "type": "string",
                      "example": "PAGE_DELETE_COMPLETELY"
                    },
                    "snapshot": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "type": "string",
                          "example": "growi"
                        },
                        "_id": {
                          "type": "string",
                          "example": "67e33da5d97e8d3b53e99f96"
                        }
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-03-25T23:35:01.584Z"
                    },
                    "__v": {
                      "type": "integer",
                      "example": 0
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "669a5aa48d45e62b521d00e4"
                        },
                        "isGravatarEnabled": {
                          "type": "boolean",
                          "example": false
                        },
                        "isEmailPublished": {
                          "type": "boolean",
                          "example": true
                        },
                        "lang": {
                          "type": "string",
                          "example": "ja_JP"
                        },
                        "status": {
                          "type": "integer",
                          "example": 2
                        },
                        "admin": {
                          "type": "boolean",
                          "example": true
                        },
                        "readOnly": {
                          "type": "boolean",
                          "example": false
                        },
                        "isInvitationEmailSended": {
                          "type": "boolean",
                          "example": false
                        },
                        "isQuestionnaireEnabled": {
                          "type": "boolean",
                          "example": true
                        },
                        "name": {
                          "type": "string",
                          "example": "Taro"
                        },
                        "username": {
                          "type": "string",
                          "example": "grow"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-07-19T12:23:00.806Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2025-03-25T23:34:04.362Z"
                        },
                        "__v": {
                          "type": "integer",
                          "example": 0
                        },
                        "imageUrlCached": {
                          "type": "string",
                          "example": "/images/icons/user.svg"
                        },
                        "lastLoginAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2025-03-25T23:34:04.355Z"
                        },
                        "email": {
                          "type": "string",
                          "example": "test@example.com"
                        }
                      }
                    }
                  }
                }
              },
              "totalDocs": {
                "type": "integer",
                "example": 3
              },
              "offset": {
                "type": "integer",
                "example": 0
              },
              "limit": {
                "type": "integer",
                "example": 10
              },
              "totalPages": {
                "type": "integer",
                "example": 1
              },
              "page": {
                "type": "integer",
                "example": 1
              },
              "pagingCounter": {
                "type": "integer",
                "example": 1
              },
              "hasPrevPage": {
                "type": "boolean",
                "example": false
              },
              "hasNextPage": {
                "type": "boolean",
                "example": false
              },
              "prevPage": {
                "type": "integer",
                "nullable": true,
                "example": null
              },
              "nextPage": {
                "type": "integer",
                "nullable": true,
                "example": null
              }
            }
          }
        }
      },
      "SystemInformationParams": {
        "type": "object",
        "properties": {
          "growiVersion": {
            "type": "string",
            "description": "GROWI version or '-'",
            "example": "7.1.0-RC.0"
          },
          "nodeVersion": {
            "type": "string",
            "description": "node version or '-'",
            "example": "20.2.0"
          },
          "npmVersion": {
            "type": "string",
            "description": "npm version or '-'",
            "example": "9.6.6"
          },
          "pnpmVersion": {
            "type": "string",
            "description": "pnpm version or '-'",
            "example": "9.12.3"
          },
          "envVars": {
            "type": "object",
            "description": "environment variables",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "FILE_UPLOAD": "mongodb",
              "APP_SITE_URL": "http://localhost:3000",
              "ELASTICSEARCH_URI": "http://elasticsearch:9200/growi",
              "ELASTICSEARCH_REQUEST_TIMEOUT": 15000,
              "ELASTICSEARCH_REJECT_UNAUTHORIZED": true,
              "OGP_URI": "http://ogp:8088",
              "QUESTIONNAIRE_SERVER_ORIGIN": "http://host.docker.internal:3003"
            }
          },
          "isV5Compatible": {
            "type": "boolean",
            "description": "This value is true if this GROWI is compatible v5.",
            "example": true
          },
          "isMaintenanceMode": {
            "type": "boolean",
            "description": "This value is true if this site is maintenance mode.",
            "example": false
          }
        }
      },
      "InstalledPluginsParams": {
        "type": "object",
        "properties": {
          "installedPlugins": {
            "type": "object",
            "description": "installed plugins"
          }
        }
      },
      "AppSettingParams": {
        "description": "AppSettingParams",
        "type": "object",
        "properties": {
          "azureReferenceFileWithRelayMode": {
            "type": "boolean",
            "example": false
          },
          "azureUseOnlyEnvVars": {
            "type": "boolean",
            "example": false
          },
          "confidential": {
            "type": "string",
            "description": "confidential show on page header",
            "example": "GROWI"
          },
          "envAzureClientId": {
            "type": "string",
            "example": "AZURE_CLIENT_ID"
          },
          "envAzureClientSecret": {
            "type": "string",
            "example": "AZURE_CLIENT_SECRET"
          },
          "envAzureStorageAccountName": {
            "type": "string",
            "example": "AZURE_STORAGE_ACCOUNT_NAME"
          },
          "envAzureStorageContainerName": {
            "type": "string",
            "example": "AZURE_STORAGE_CONTAINER_NAME"
          },
          "envFileUploadType": {
            "type": "string",
            "example": "mongodb"
          },
          "envGcsApiKeyJsonPath": {
            "type": "string",
            "example": "GCS_API_KEY_JSON_PATH"
          },
          "envGcsBucket": {
            "type": "string",
            "example": "GCS_BUCKET"
          },
          "envGcsUploadNamespace": {
            "type": "string",
            "example": "GCS_UPLOAD_NAMESPACE"
          },
          "envSiteUrl": {
            "type": "string",
            "example": "http://localhost:3000"
          },
          "fileUpload": {
            "type": "boolean",
            "example": true
          },
          "fileUploadType": {
            "type": "string",
            "example": "local"
          },
          "fromAddress": {
            "type": "string",
            "example": "info@growi.org"
          },
          "gcsApiKeyJsonPath": {
            "type": "string",
            "example": "GCS_API_KEY_JSON_PATH"
          },
          "gcsBucket": {
            "type": "string",
            "example": "GCS_BUCKET"
          },
          "gcsReferenceFileWithRelayMode": {
            "type": "boolean",
            "example": false
          },
          "gcsUploadNamespace": {
            "type": "string",
            "example": "GCS_UPLOAD_NAMESPACE"
          },
          "gcsUseOnlyEnvVars": {
            "type": "boolean",
            "example": false
          },
          "globalLang": {
            "type": "string",
            "example": "ja_JP"
          },
          "isAppSiteUrlHashed": {
            "type": "boolean",
            "example": false
          },
          "isEmailPublishedForNewUser": {
            "type": "boolean",
            "example": true
          },
          "isMaintenanceMode": {
            "type": "boolean",
            "example": false
          },
          "isQuestionnaireEnabled": {
            "type": "boolean",
            "example": true
          },
          "isV5Compatible": {
            "type": "boolean",
            "example": true
          },
          "s3AccessKeyId": {
            "type": "string"
          },
          "s3Bucket": {
            "type": "string"
          },
          "s3CustomEndpoint": {
            "type": "string"
          },
          "s3ReferenceFileWithRelayMode": {
            "type": "boolean"
          },
          "s3Region": {
            "type": "string"
          },
          "siteUrl": {
            "type": "string"
          },
          "siteUrlUseOnlyEnvVars": {
            "type": "boolean"
          },
          "smtpHost": {
            "type": "string"
          },
          "smtpPassword": {
            "type": "string"
          },
          "smtpPort": {
            "type": "string"
          },
          "smtpUser": {
            "type": "string"
          },
          "useOnlyEnvVarForFileUploadType": {
            "type": "boolean"
          }
        }
      },
      "AppSettingPutParams": {
        "description": "AppSettingPutParams",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "title of the site",
            "example": "GROWI"
          },
          "confidential": {
            "type": "string",
            "description": "confidential show on page header",
            "example": "GROWI"
          },
          "globalLang": {
            "type": "string",
            "description": "global language",
            "example": "ja_JP"
          },
          "isEmailPublishedForNewUser": {
            "type": "boolean",
            "description": "is email published for new user, or not",
            "example": true
          },
          "fileUpload": {
            "type": "boolean",
            "description": "is file upload enabled, or not",
            "example": true
          }
        }
      },
      "SiteUrlSettingParams": {
        "description": "SiteUrlSettingParams",
        "type": "object",
        "properties": {
          "siteUrl": {
            "type": "string",
            "description": "Site URL. e.g. https://example.com, https://example.com:8080"
          },
          "envSiteUrl": {
            "type": "string",
            "description": "environment variable 'APP_SITE_URL'"
          }
        }
      },
      "SmtpSettingParams": {
        "description": "SmtpSettingParams",
        "type": "object",
        "properties": {
          "smtpHost": {
            "type": "string",
            "description": "host name of client's smtp server",
            "example": "smtp.example.com"
          },
          "smtpPort": {
            "type": "string",
            "description": "port of client's smtp server",
            "example": "587"
          },
          "smtpUser": {
            "type": "string",
            "description": "user name of client's smtp server",
            "example": "USER"
          },
          "smtpPassword": {
            "type": "string",
            "description": "password of client's smtp server",
            "example": "PASSWORD"
          },
          "fromAddress": {
            "type": "string",
            "description": "e-mail address",
            "example": "info@example.com"
          }
        }
      },
      "SmtpSettingResponseParams": {
        "description": "SmtpSettingResponseParams",
        "type": "object",
        "properties": {
          "isMailerSetup": {
            "type": "boolean",
            "description": "is mailer setup, or not",
            "example": true
          },
          "smtpHost": {
            "type": "string",
            "description": "host name of client's smtp server",
            "example": "smtp.example.com"
          },
          "smtpPort": {
            "type": "string",
            "description": "port of client's smtp server",
            "example": "587"
          },
          "smtpUser": {
            "type": "string",
            "description": "user name of client's smtp server",
            "example": "USER"
          },
          "smtpPassword": {
            "type": "string",
            "description": "password of client's smtp server",
            "example": "PASSWORD"
          },
          "fromAddress": {
            "type": "string",
            "description": "e-mail address",
            "example": "info@example.com"
          }
        }
      },
      "SesSettingParams": {
        "description": "SesSettingParams",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "e-mail address used as from address of mail which sent from GROWI app",
            "example": "info@growi.org"
          },
          "transmissionMethod": {
            "type": "string",
            "description": "transmission method",
            "example": "ses"
          },
          "sesAccessKeyId": {
            "type": "string",
            "description": "accesskey id for authentification of AWS"
          },
          "sesSecretAccessKey": {
            "type": "string",
            "description": "secret key for authentification of AWS"
          }
        }
      },
      "SesSettingResponseParams": {
        "description": "SesSettingParams",
        "type": "object",
        "properties": {
          "isMailerSetup": {
            "type": "boolean",
            "description": "is mailer setup, or not",
            "example": true
          },
          "from": {
            "type": "string",
            "description": "e-mail address used as from address of mail which sent from GROWI app",
            "example": "info@growi.org"
          },
          "transmissionMethod": {
            "type": "string",
            "description": "transmission method",
            "example": "ses"
          },
          "sesAccessKeyId": {
            "type": "string",
            "description": "accesskey id for authentification of AWS"
          },
          "sesSecretAccessKey": {
            "type": "string",
            "description": "secret key for authentification of AWS"
          }
        }
      },
      "FileUploadSettingParams": {
        "description": "FileUploadTypeParams",
        "type": "object",
        "properties": {
          "fileUploadType": {
            "type": "string",
            "description": "fileUploadType"
          },
          "s3Region": {
            "type": "string",
            "description": "region of AWS S3"
          },
          "s3CustomEndpoint": {
            "type": "string",
            "description": "custom endpoint of AWS S3"
          },
          "s3Bucket": {
            "type": "string",
            "description": "AWS S3 bucket name"
          },
          "s3AccessKeyId": {
            "type": "string",
            "description": "accesskey id for authentification of AWS"
          },
          "s3SecretAccessKey": {
            "type": "string",
            "description": "secret key for authentification of AWS"
          },
          "s3ReferenceFileWithRelayMode": {
            "type": "boolean",
            "description": "is enable internal stream system for s3 file request"
          },
          "gcsApiKeyJsonPath": {
            "type": "string",
            "description": "apiKeyJsonPath of gcp"
          },
          "gcsBucket": {
            "type": "string",
            "description": "bucket name of gcs"
          },
          "gcsUploadNamespace": {
            "type": "string",
            "description": "name space of gcs"
          },
          "gcsReferenceFileWithRelayMode": {
            "type": "boolean",
            "description": "is enable internal stream system for gcs file request"
          },
          "azureTenantId": {
            "type": "string",
            "description": "tenant id of azure"
          },
          "azureClientId": {
            "type": "string",
            "description": "client id of azure"
          },
          "azureClientSecret": {
            "type": "string",
            "description": "client secret of azure"
          },
          "azureStorageAccountName": {
            "type": "string",
            "description": "storage account name of azure"
          },
          "azureStorageContainerName": {
            "type": "string",
            "description": "storage container name of azure"
          },
          "azureReferenceFileWithRelayMode": {
            "type": "boolean",
            "description": "is enable internal stream system for azure file request"
          }
        }
      },
      "QuestionnaireSettingParams": {
        "description": "QuestionnaireSettingParams",
        "type": "object",
        "properties": {
          "isQuestionnaireEnabled": {
            "type": "boolean",
            "description": "is questionnaire enabled, or not",
            "example": true
          },
          "isAppSiteUrlHashed": {
            "type": "boolean",
            "description": "is app site url hashed, or not"
          }
        }
      },
      "AttachmentPaginateResult": {
        "description": "AttachmentPaginateResult",
        "type": "object",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "totalDocs": {
            "type": "number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "example": 20
          },
          "totalPages": {
            "type": "number",
            "example": 1
          },
          "page": {
            "type": "number",
            "example": 1
          },
          "offset": {
            "type": "number",
            "example": 0
          },
          "prevPage": {
            "type": "number",
            "example": null
          },
          "nextPage": {
            "type": "number",
            "example": null
          },
          "hasNextPage": {
            "type": "boolean",
            "example": false
          },
          "hasPrevPage": {
            "type": "boolean",
            "example": false
          },
          "pagingCounter": {
            "type": "number",
            "example": 1
          }
        }
      },
      "Attachment": {
        "description": "Attachment",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "attachment ID",
            "example": "5e0734e072560e001761fa67"
          },
          "_id": {
            "type": "string",
            "description": "attachment ID",
            "example": "5e0734e072560e001761fa67"
          },
          "__v": {
            "type": "number",
            "description": "attachment version",
            "example": 0
          },
          "attachmentType": {
            "type": "string",
            "description": "attachment type",
            "example": "WIKI_PAGE"
          },
          "fileFormat": {
            "type": "string",
            "description": "file format in MIME",
            "example": "text/plain"
          },
          "fileName": {
            "type": "string",
            "description": "file name",
            "example": "601b7c59d43a042c0117e08dd37aad0aimage.txt"
          },
          "originalName": {
            "type": "string",
            "description": "original file name",
            "example": "file.txt"
          },
          "creator": {
            "type": "object",
            "$ref": "#/components/schemas/User"
          },
          "page": {
            "type": "string",
            "description": "page ID attached at",
            "example": "5e07345972560e001761fa63"
          },
          "createdAt": {
            "type": "string",
            "description": "date created at",
            "example": "2010-01-01T00:00:00.000Z"
          },
          "temporaryUrlExpiredAt": {
            "type": "string",
            "description": "temporary URL expired at",
            "example": "2024-11-27T00:59:59.962Z"
          },
          "fileSize": {
            "type": "number",
            "description": "file size",
            "example": 3494332
          },
          "filePathProxied": {
            "type": "string",
            "description": "file path proxied",
            "example": "/attachment/5e0734e072560e001761fa67"
          },
          "downloadPathProxied": {
            "type": "string",
            "description": "download path proxied",
            "example": "/download/5e0734e072560e001761fa67"
          },
          "temporaryUrlCached": {
            "type": "string",
            "description": "temporary URL cached",
            "example": "https://example.com/attachment/5e0734e072560e001761fa67"
          }
        }
      },
      "BookmarkFolder": {
        "description": "Bookmark Folder",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Bookmark Folder ID"
          },
          "__v": {
            "type": "number",
            "description": "Version of the bookmark folder"
          },
          "name": {
            "type": "string",
            "description": "Name of the bookmark folder"
          },
          "owner": {
            "type": "string",
            "description": "Owner user ID of the bookmark folder"
          },
          "bookmarks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Bookmark ID"
                },
                "user": {
                  "type": "string",
                  "description": "User ID of the bookmarker"
                },
                "createdAt": {
                  "type": "string",
                  "description": "Date and time when the bookmark was created"
                },
                "__v": {
                  "type": "number",
                  "description": "Version of the bookmark"
                },
                "page": {
                  "description": "Pages that are bookmarked in the folder",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Page"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Page ID",
                          "example": "671b5cd38d45e62b52217ff8"
                        },
                        "parent": {
                          "type": "string",
                          "description": "Parent page ID",
                          "example": "669a5aa48d45e62b521d00da"
                        },
                        "descendantCount": {
                          "type": "number",
                          "description": "Number of descendants",
                          "example": 0
                        },
                        "isEmpty": {
                          "type": "boolean",
                          "description": "Whether the page is empty",
                          "example": false
                        },
                        "grantedGroups": {
                          "type": "array",
                          "description": "List of granted groups",
                          "items": {
                            "type": "string"
                          }
                        },
                        "creator": {
                          "type": "string",
                          "description": "Creator user ID",
                          "example": "669a5aa48d45e62b521d00e4"
                        },
                        "latestRevisionBodyLength": {
                          "type": "number",
                          "description": "Length of the latest revision body",
                          "example": 241
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "childFolder": {
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/BookmarkFolder"
            }
          }
        }
      },
      "Bookmark": {
        "description": "Bookmark",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "page ID",
            "example": "5e07345972560e001761fa63"
          },
          "__v": {
            "type": "number",
            "description": "DB record version",
            "example": 0
          },
          "createdAt": {
            "type": "string",
            "description": "date created at",
            "example": "2010-01-01T00:00:00.000Z"
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          },
          "user": {
            "$ref": "#/components/schemas/User/properties/_id"
          }
        }
      },
      "Bookmarks": {
        "description": "User Root Bookmarks",
        "type": "object",
        "properties": {
          "userRootBookmarks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Bookmark"
            }
          }
        }
      },
      "BookmarkParams": {
        "description": "BookmarkParams",
        "type": "object",
        "properties": {
          "pageId": {
            "type": "string",
            "description": "page ID",
            "example": "5e07345972560e001761fa63"
          },
          "bool": {
            "type": "boolean",
            "description": "boolean for bookmark status"
          }
        }
      },
      "BookmarkInfo": {
        "description": "BookmarkInfo",
        "type": "object",
        "properties": {
          "sumOfBookmarks": {
            "type": "number",
            "description": "how many people bookmarked the page"
          },
          "isBookmarked": {
            "type": "boolean",
            "description": "Whether the request user bookmarked (will be returned if the user is included in the request)"
          },
          "pageId": {
            "type": "string",
            "description": "page ID",
            "example": "5e07345972560e001761fa63"
          },
          "bookmarkedUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "CustomizeLayout": {
        "description": "CustomizeLayout",
        "type": "object",
        "properties": {
          "isContainerFluid": {
            "type": "boolean"
          }
        }
      },
      "CustomizeTheme": {
        "description": "CustomizeTheme",
        "type": "object",
        "properties": {
          "theme": {
            "type": "string"
          }
        }
      },
      "CustomizeFunction": {
        "description": "CustomizeFunction",
        "type": "object",
        "properties": {
          "isEnabledTimeline": {
            "type": "boolean"
          },
          "isEnabledAttachTitleHeader": {
            "type": "boolean"
          },
          "pageLimitationS": {
            "type": "number"
          },
          "pageLimitationM": {
            "type": "number"
          },
          "isEnabledStaleNotification": {
            "type": "boolean"
          },
          "isAllReplyShown": {
            "type": "boolean"
          },
          "isSearchScopeChildrenAsDefault": {
            "type": "boolean"
          }
        }
      },
      "CustomizeHighlight": {
        "description": "CustomizeHighlight",
        "type": "object",
        "properties": {
          "highlightJsStyle": {
            "type": "string"
          },
          "highlightJsStyleBorder": {
            "type": "boolean"
          }
        }
      },
      "CustomizeHighlightResponse": {
        "description": "CustomizeHighlight Response",
        "type": "object",
        "properties": {
          "styleName": {
            "type": "string"
          },
          "styleBorder": {
            "type": "boolean"
          }
        }
      },
      "CustomizeTitle": {
        "description": "CustomizeTitle",
        "type": "object",
        "properties": {
          "customizeTitle": {
            "type": "string"
          }
        }
      },
      "CustomizeNoscript": {
        "description": "CustomizeNoscript",
        "type": "object",
        "properties": {
          "customizeNoscript": {
            "type": "string"
          }
        }
      },
      "CustomizeCss": {
        "description": "CustomizeCss",
        "type": "object",
        "properties": {
          "customizeCss": {
            "type": "string"
          }
        }
      },
      "CustomizeScript": {
        "description": "CustomizeScript",
        "type": "object",
        "properties": {
          "customizeScript": {
            "type": "string"
          }
        }
      },
      "CustomizeSetting": {
        "description": "Customize Setting",
        "type": "object",
        "properties": {
          "isEnabledTimeline": {
            "type": "boolean"
          },
          "isEnabledAttachTitleHeader": {
            "type": "boolean"
          },
          "pageLimitationS": {
            "type": "number"
          },
          "pageLimitationM": {
            "type": "number"
          },
          "pageLimitationL": {
            "type": "number"
          },
          "pageLimitationXL": {
            "type": "number"
          },
          "isEnabledStaleNotification": {
            "type": "boolean"
          },
          "isAllReplyShown": {
            "type": "boolean"
          },
          "isSearchScopeChildrenAsDefault": {
            "type": "boolean"
          },
          "isEnabledMarp": {
            "type": "boolean"
          },
          "styleName": {
            "type": "string"
          },
          "styleBorder": {
            "type": "string"
          },
          "customizeTitle": {
            "type": "string"
          },
          "customizeScript": {
            "type": "string"
          },
          "customizeCss": {
            "type": "string"
          },
          "customizeNoscript": {
            "type": "string"
          }
        }
      },
      "ThemesMetadata": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the plugin theme."
          },
          "manifestKey": {
            "type": "string",
            "description": "Path to the theme manifest file."
          },
          "schemeType": {
            "type": "string",
            "description": "The color scheme type (e.g., light or dark)."
          },
          "lightBg": {
            "type": "string",
            "description": "Light mode background color (hex)."
          },
          "darkBg": {
            "type": "string",
            "description": "Dark mode background color (hex)."
          },
          "lightSidebar": {
            "type": "string",
            "description": "Light mode sidebar color (hex)."
          },
          "darkSidebar": {
            "type": "string",
            "description": "Dark mode sidebar color (hex)."
          },
          "lightIcon": {
            "type": "string",
            "description": "Light mode icon color (hex)."
          },
          "darkIcon": {
            "type": "string",
            "description": "Dark mode icon color (hex)."
          },
          "createBtn": {
            "type": "string",
            "description": "Color of the create button (hex)."
          }
        }
      },
      "CustomizeSidebar": {
        "description": "Customize Sidebar",
        "type": "object",
        "properties": {
          "isSidebarCollapsedMode": {
            "type": "boolean",
            "description": "The flag whether sidebar is collapsed mode or not."
          },
          "isSidebarClosedAtDockMode": {
            "type": "boolean",
            "description": "The flag whether sidebar is closed at dock mode or not."
          }
        }
      },
      "CustomizePresentation": {
        "description": "Customize Presentation",
        "type": "object",
        "properties": {
          "isEnabledMarp": {
            "type": "boolean",
            "description": "The flag whether Marp is enabled or not."
          }
        }
      },
      "CustomizeLogo": {
        "description": "Customize Logo",
        "type": "object",
        "properties": {
          "isDefaultLogo": {
            "type": "boolean",
            "description": "The flag whether the logo is default or not."
          }
        }
      },
      "ExportStatus": {
        "type": "object",
        "properties": {
          "zipFileStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportZipFileStat"
            }
          },
          "isExporting": {
            "type": "boolean"
          },
          "progressList": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ExportZipFileStat": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ExportMeta"
          },
          "fileName": {
            "type": "string"
          },
          "zipFilePath": {
            "type": "string"
          },
          "fileStat": {
            "$ref": "#/components/schemas/ExportFileStat"
          },
          "innerFileStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportInnerFileStat"
            }
          }
        }
      },
      "ExportMeta": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "passwordSeed": {
            "type": "string"
          },
          "exportedAt": {
            "type": "string",
            "format": "date-time"
          },
          "envVars": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ExportFileStat": {
        "type": "object",
        "properties": {
          "dev": {
            "type": "integer"
          },
          "mode": {
            "type": "integer"
          },
          "nlink": {
            "type": "integer"
          },
          "uid": {
            "type": "integer"
          },
          "gid": {
            "type": "integer"
          },
          "rdev": {
            "type": "integer"
          },
          "blksize": {
            "type": "integer"
          },
          "ino": {
            "type": "integer"
          },
          "size": {
            "type": "integer"
          },
          "blocks": {
            "type": "integer"
          },
          "atime": {
            "type": "string",
            "format": "date-time"
          },
          "mtime": {
            "type": "string",
            "format": "date-time"
          },
          "ctime": {
            "type": "string",
            "format": "date-time"
          },
          "birthtime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ExportInnerFileStat": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string"
          },
          "collectionName": {
            "type": "string"
          },
          "meta": {
            "type": "object",
            "properties": {
              "progressList": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "progress data for each exporting collections"
                }
              },
              "isExporting": {
                "type": "boolean",
                "description": "whether the current exporting job exists or not"
              }
            }
          }
        }
      },
      "PasswordResetRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          }
        }
      },
      "PasswordResetResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "GrowiInfo": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version of the GROWI"
          },
          "userUpperLimit": {
            "type": "number",
            "description": "The upper limit of the number of users"
          },
          "fileUploadDisabled": {
            "type": "boolean"
          },
          "fileUploadTotalLimit": {
            "type": "number",
            "description": "The total limit of the file upload size"
          },
          "attachmentInfo": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "writable": {
                "type": "boolean"
              },
              "bucket": {
                "type": "string"
              },
              "customEndpoint": {
                "type": "string"
              },
              "uploadNamespace": {
                "type": "string"
              },
              "accountName": {
                "type": "string"
              },
              "containerName": {
                "type": "string"
              }
            }
          }
        }
      },
      "HealthcheckInfo": {
        "description": "Information of middlewares",
        "type": "object",
        "properties": {
          "mongo": {
            "type": "string",
            "description": "OK",
            "example": "OK"
          },
          "searchInfo": {
            "type": "object",
            "properties": {
              "cluster_name": {
                "type": "string",
                "example": "elasticsearch"
              },
              "status": {
                "type": "string",
                "enum": [
                  "green",
                  "yellow",
                  "red"
                ],
                "example": "yellow"
              },
              "timed_out": {
                "type": "boolean",
                "example": false
              },
              "number_of_nodes": {
                "type": "integer",
                "example": 1
              },
              "number_of_data_nodes": {
                "type": "integer",
                "example": 1
              },
              "active_primary_shards": {
                "type": "integer",
                "example": 2
              },
              "active_shards": {
                "type": "integer",
                "example": 2
              },
              "relocating_shards": {
                "type": "integer",
                "example": 0
              },
              "initializing_shards": {
                "type": "integer",
                "example": 0
              },
              "unassigned_shards": {
                "type": "integer",
                "example": 1
              },
              "delayed_unassigned_shards": {
                "type": "integer",
                "example": 0
              },
              "number_of_pending_tasks": {
                "type": "integer",
                "example": 0
              },
              "number_of_in_flight_fetch": {
                "type": "integer",
                "example": 0
              },
              "task_max_waiting_in_queue_millis": {
                "type": "integer",
                "example": 0
              },
              "active_shards_percent_as_number": {
                "type": "number",
                "format": "float",
                "example": 66.66666666666666
              }
            }
          }
        }
      },
      "GrowiArchiveImportOption": {
        "description": "GrowiArchiveImportOption",
        "type": "object",
        "properties": {
          "mode": {
            "description": "Import mode",
            "type": "string",
            "enum": [
              "insert",
              "upsert",
              "flushAndInsert"
            ]
          }
        }
      },
      "ImportStatus": {
        "description": "ImportStatus",
        "type": "object",
        "properties": {
          "isTheSameVersion": {
            "type": "boolean",
            "description": "whether the version of the uploaded data is the same as the current GROWI version"
          },
          "zipFileStat": {
            "type": "object",
            "description": "the property object"
          },
          "progressList": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "progress data for each exporting collections"
            }
          },
          "isImporting": {
            "type": "boolean",
            "description": "whether the current importing job exists or not"
          }
        }
      },
      "FileImportResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "passwordSeed": {
                "type": "string"
              },
              "exportedAt": {
                "type": "string",
                "format": "date-time"
              },
              "envVars": {
                "type": "object",
                "properties": {
                  "ELASTICSEARCH_URI": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "fileName": {
            "type": "string"
          },
          "zipFilePath": {
            "type": "string"
          },
          "fileStat": {
            "type": "object",
            "properties": {
              "dev": {
                "type": "integer"
              },
              "mode": {
                "type": "integer"
              },
              "nlink": {
                "type": "integer"
              },
              "uid": {
                "type": "integer"
              },
              "gid": {
                "type": "integer"
              },
              "rdev": {
                "type": "integer"
              },
              "blksize": {
                "type": "integer"
              },
              "ino": {
                "type": "integer"
              },
              "size": {
                "type": "integer"
              },
              "blocks": {
                "type": "integer"
              },
              "atime": {
                "type": "string",
                "format": "date-time"
              },
              "mtime": {
                "type": "string",
                "format": "date-time"
              },
              "ctime": {
                "type": "string",
                "format": "date-time"
              },
              "birthtime": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "innerFileStats": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "fileName": {
                  "type": "string"
                },
                "collectionName": {
                  "type": "string"
                },
                "size": {
                  "type": "integer",
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "InAppNotificationListResponse": {
        "type": "object",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InAppNotificationDocument"
            }
          },
          "totalDocs": {
            "type": "integer",
            "description": "Total number of in app notification documents"
          },
          "offset": {
            "type": "integer",
            "description": "Offset value"
          },
          "limit": {
            "type": "integer",
            "description": "Limit per page"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total pages available"
          },
          "page": {
            "type": "integer",
            "description": "Current page number"
          },
          "hasPrevPage": {
            "type": "boolean",
            "description": "Indicator for previous page"
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicator for next page"
          },
          "prevPage": {
            "type": "string",
            "description": "Previous page number or null"
          },
          "nextPage": {
            "type": "string",
            "description": "Next page number or null"
          }
        }
      },
      "InAppNotificationDocument": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "In app notification document ID"
          },
          "action": {
            "type": "string",
            "description": "Action performed on the in app notification document"
          },
          "snapshot": {
            "type": "string",
            "description": "Snapshot details in JSON format"
          },
          "target": {
            "$ref": "#/components/schemas/Page"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "status": {
            "type": "string",
            "description": "Status of the in app notification document"
          },
          "targetModel": {
            "type": "string",
            "description": "Model of the target"
          },
          "id": {
            "type": "string",
            "description": "In app notification document ID"
          },
          "actionUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "MarkdownParams": {
        "description": "MarkdownParams",
        "type": "object",
        "properties": {
          "isEnabledLinebreaks": {
            "type": "boolean",
            "description": "enable lineBreak"
          },
          "isEnabledLinebreaksInComments": {
            "type": "boolean",
            "description": "enable lineBreak in comment"
          },
          "adminPreferredIndentSize": {
            "type": "number",
            "description": "preferred indent size"
          },
          "isIndentSizeForced": {
            "type": "boolean",
            "description": "force indent size"
          },
          "isEnabledXss": {
            "type": "boolean",
            "description": "enable xss"
          },
          "xssOption": {
            "type": "number",
            "description": "number of xss option"
          },
          "tagWhitelist": {
            "type": "array",
            "description": "array of tag whitelist",
            "items": {
              "type": "string",
              "description": "tag whitelist"
            }
          },
          "attrWhitelist": {
            "type": "string",
            "description": "attr whitelist"
          }
        }
      },
      "LineBreakParams": {
        "description": "LineBreakParams",
        "type": "object",
        "properties": {
          "isEnabledLinebreaks": {
            "type": "boolean",
            "description": "enable lineBreak"
          },
          "isEnabledLinebreaksInComments": {
            "type": "boolean",
            "description": "enable lineBreak in comment"
          }
        }
      },
      "PresentationParams": {
        "description": "PresentationParams",
        "type": "object",
        "properties": {
          "pageBreakSeparator": {
            "type": "number",
            "description": "number of pageBreakSeparator"
          },
          "pageBreakCustomSeparator": {
            "type": "string",
            "description": "string of pageBreakCustomSeparator"
          }
        }
      },
      "XssParams": {
        "description": "XssParams",
        "type": "object",
        "properties": {
          "isEnabledXss": {
            "type": "boolean",
            "description": "enable xss"
          },
          "xssOption": {
            "type": "number",
            "description": "number of xss option"
          },
          "tagWhitelist": {
            "type": "array",
            "description": "array of tag whitelist",
            "items": {
              "type": "string",
              "description": "tag whitelist"
            }
          },
          "attrWhitelist": {
            "type": "string",
            "description": "attr whitelist"
          }
        }
      },
      "IndentParams": {
        "description": "IndentParams",
        "type": "object",
        "properties": {
          "adminPreferredIndentSize": {
            "type": "number",
            "description": "preferred indent size"
          },
          "isIndentSizeForced": {
            "type": "boolean",
            "description": "force indent size"
          }
        }
      },
      "NotificationParams": {
        "type": "object",
        "properties": {
          "isSlackbotConfigured": {
            "type": "boolean",
            "description": "status of slack integration"
          },
          "isSlackLegacyConfigured": {
            "type": "boolean",
            "description": "status of slack legacy integration"
          },
          "currentBotType": {
            "type": "string",
            "description": "current bot type"
          },
          "userNotifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNotification"
            }
          },
          "isNotificationForOwnerPageEnabled": {
            "type": "boolean",
            "description": "Whether to notify on owner page"
          },
          "isNotificationForGroupPageEnabled": {
            "type": "boolean",
            "description": "Whether to notify on group page"
          },
          "globalNotifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GlobalNotificationParams"
            },
            "description": "global notifications"
          }
        }
      },
      "UserNotification": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "string",
            "description": "slack channel name without '#'"
          },
          "pathPattern": {
            "type": "string",
            "description": "path name of wiki"
          },
          "createdAt": {
            "type": "string",
            "description": "created date"
          },
          "creator": {
            "$ref": "#/components/schemas/User",
            "description": "user who set notification"
          },
          "patternPrefix": {
            "type": "string",
            "description": "path pattern prefix"
          },
          "patternPrefix2": {
            "type": "string",
            "description": "path pattern prefix2"
          },
          "provider": {
            "type": "string",
            "description": "provider"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated date"
          },
          "__v": {
            "type": "number",
            "description": "version"
          },
          "_id": {
            "type": "string",
            "description": "id"
          }
        }
      },
      "UserNotificationParams": {
        "type": "object",
        "properties": {
          "pathPattern": {
            "type": "string",
            "description": "path name of wiki"
          },
          "channel": {
            "type": "string",
            "description": "slack channel name without '#'"
          }
        }
      },
      "NotifyForPageGrant": {
        "type": "object",
        "properties": {
          "isNotificationForOwnerPageEnabled": {
            "type": "boolean",
            "description": "Whether to notify on owner page"
          },
          "isNotificationForGroupPageEnabled": {
            "type": "boolean",
            "description": "Whether to notify on group page"
          }
        }
      },
      "GlobalNotification": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "id"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "is notification enabled"
          },
          "triggerEvents": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "trigger events for notify"
          },
          "__t": {
            "type": "string",
            "description": "type of notification"
          },
          "slackChannels": {
            "type": "string",
            "description": "channels for notify"
          },
          "triggerPath": {
            "type": "string",
            "description": "trigger path for notify"
          },
          "__v": {
            "type": "number",
            "description": "version"
          }
        }
      },
      "GlobalNotificationParams": {
        "type": "object",
        "properties": {
          "notifyType": {
            "type": "string",
            "description": "What is type for notify"
          },
          "toEmail": {
            "type": "string",
            "description": "email for notify"
          },
          "slackChannels": {
            "type": "string",
            "description": "channels for notify"
          },
          "triggerPath": {
            "type": "string",
            "description": "trigger path for notify"
          },
          "triggerEvents": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "trigger events for notify"
          }
        }
      },
      "LikeParams": {
        "description": "LikeParams",
        "type": "object",
        "properties": {
          "pageId": {
            "type": "string",
            "description": "page ID",
            "example": "5e07345972560e001761fa63"
          },
          "bool": {
            "type": "boolean",
            "description": "boolean for like status"
          }
        }
      },
      "PageInfo": {
        "description": "PageInfo",
        "type": "object",
        "required": [
          "sumOfLikers",
          "likerIds",
          "sumOfSeenUsers",
          "seenUserIds"
        ],
        "properties": {
          "isLiked": {
            "type": "boolean",
            "description": "Whether the page is liked by the logged in user"
          },
          "sumOfLikers": {
            "type": "number",
            "description": "Number of users who have liked the page"
          },
          "likerIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ids of users who have liked the page",
            "example": [
              "5e07345972560e001761fa63"
            ]
          },
          "sumOfSeenUsers": {
            "type": "number",
            "description": "Number of users who have seen the page"
          },
          "seenUserIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ids of users who have seen the page",
            "example": [
              "5e07345972560e001761fa63"
            ]
          }
        }
      },
      "PageParams": {
        "description": "PageParams",
        "type": "object",
        "required": [
          "pageId"
        ],
        "properties": {
          "pageId": {
            "type": "string",
            "description": "page ID",
            "example": "5e07345972560e001761fa63"
          }
        }
      },
      "Tags": {
        "description": "Tags",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Tag/properties/name"
        },
        "example": [
          "daily",
          "report",
          "tips"
        ]
      },
      "Tag": {
        "description": "Tag",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "tag ID",
            "example": "5e2d6aede35da4004ef7e0b7"
          },
          "name": {
            "type": "string",
            "description": "tag name",
            "example": "daily"
          },
          "count": {
            "type": "number",
            "description": "Count of tagged pages",
            "example": 3
          }
        }
      },
      "PersonalSettings": {
        "description": "personal settings",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "lang": {
            "type": "string"
          },
          "isEmailPublished": {
            "type": "boolean"
          },
          "slackMemberId": {
            "type": "string"
          }
        }
      },
      "Passwords": {
        "description": "passwords for update",
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          },
          "newPasswordConfirm": {
            "type": "string"
          }
        }
      },
      "AssociateUser": {
        "description": "Ldap account for associate",
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "DisassociateUser": {
        "description": "Ldap account for disassociate",
        "type": "object",
        "properties": {
          "providerType": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          }
        }
      },
      "Revision": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "revision ID",
            "example": "5e0734e472560e001761fa68"
          },
          "format": {
            "type": "string",
            "description": "format",
            "example": "markdown"
          },
          "pageId": {
            "type": "string",
            "description": "The ID of the page the revision belongs to"
          },
          "body": {
            "type": "string",
            "description": "content body",
            "example": "# test\n\ntest\n"
          },
          "author": {
            "$ref": "#/components/schemas/User/properties/_id"
          },
          "origin": {
            "type": "string",
            "description": "The origin of the revision"
          },
          "hasDiffToPrev": {
            "type": "boolean",
            "description": "Whether the revision has differences to the previous one"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "date created at",
            "example": "2010-01-01T00:00:00.000Z"
          },
          "__v": {
            "type": "number",
            "description": "DB record version",
            "example": 0
          },
          "path": {
            "type": "string",
            "description": "path",
            "example": "/user/alice/test"
          }
        },
        "description": "Revision"
      },
      "Indices": {
        "type": "object",
        "properties": {
          "growi": {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string"
              },
              "health": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "primaries": {
                "type": "object",
                "$ref": "#/components/schemas/SearchIndex"
              },
              "total": {
                "type": "object",
                "$ref": "#/components/schemas/SearchIndex"
              }
            }
          },
          "aliases": {
            "type": "object",
            "properties": {
              "growi": {
                "type": "object",
                "properties": {
                  "aliases": {
                    "type": "object",
                    "properties": {
                      "growi-alias": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "isNormalized": {
            "type": "boolean"
          }
        }
      },
      "SearchIndex": {
        "type": "object",
        "properties": {
          "docs": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer"
              },
              "deleted": {
                "type": "integer"
              }
            }
          },
          "store": {
            "type": "object",
            "properties": {
              "size_in_bytes": {
                "type": "integer"
              },
              "total_data_set_size_in_bytes": {
                "type": "integer"
              },
              "reserved_in_bytes": {
                "type": "integer"
              }
            }
          },
          "indexing": {
            "type": "object",
            "properties": {
              "index_total": {
                "type": "integer"
              },
              "index_time_in_millis": {
                "type": "integer"
              },
              "index_current": {
                "type": "integer"
              },
              "index_failed": {
                "type": "integer"
              },
              "delete_total": {
                "type": "integer"
              },
              "delete_time_in_millis": {
                "type": "integer"
              },
              "delete_current": {
                "type": "integer"
              },
              "noop_update_total": {
                "type": "integer"
              },
              "is_throttled": {
                "type": "boolean"
              },
              "throttle_time_in_millis": {
                "type": "integer"
              },
              "write_load": {
                "type": "number"
              }
            }
          }
        }
      },
      "GeneralSetting": {
        "type": "object",
        "properties": {
          "restrictGuestMode": {
            "type": "string",
            "description": "type of restrictGuestMode"
          },
          "pageDeletionAuthority": {
            "type": "string",
            "description": "type of pageDeletionAuthority"
          },
          "pageRecursiveDeletionAuthority": {
            "type": "string",
            "description": "type of pageRecursiveDeletionAuthority"
          },
          "pageRecursiveCompleteDeletionAuthority": {
            "type": "string",
            "description": "type of pageRecursiveCompleteDeletionAuthority"
          },
          "isAllGroupMembershipRequiredForPageCompleteDeletion": {
            "type": "boolean",
            "description": "enable all group membership required for page complete deletion"
          },
          "pageCompleteDeletionAuthority": {
            "type": "string",
            "description": "type of pageDeletionAuthority"
          },
          "hideRestrictedByOwner": {
            "type": "boolean",
            "description": "enable hide by owner"
          },
          "hideRestrictedByGroup": {
            "type": "boolean",
            "description": "enable hide by group"
          },
          "isUsersHomepageDeletionEnabled": {
            "type": "boolean",
            "description": "enable user homepage deletion"
          },
          "isForceDeleteUserHomepageOnUserDeletion": {
            "type": "boolean",
            "description": "enable force delete user homepage on user deletion"
          },
          "isRomUserAllowedToComment": {
            "type": "boolean",
            "description": "enable rom user allowed to comment"
          },
          "wikiMode": {
            "type": "string",
            "description": "type of wikiMode"
          },
          "sessionMaxAge": {
            "type": "integer",
            "description": "max age of session"
          }
        }
      },
      "ShareLinkSetting": {
        "type": "object",
        "properties": {
          "disableLinkSharing": {
            "type": "boolean",
            "description": "disable link sharing"
          }
        }
      },
      "LocalSetting": {
        "type": "object",
        "properties": {
          "useOnlyEnvVarsForSomeOptions": {
            "type": "boolean",
            "description": "use only env vars for some options"
          },
          "isPasswordResetEnabled": {
            "type": "boolean",
            "description": "enable password reset"
          },
          "isEmailAuthenticationEnabled": {
            "type": "boolean",
            "description": "enable email authentication"
          },
          "isLocalEnabled": {
            "type": "boolean",
            "description": "local setting mode"
          },
          "registrationMode": {
            "type": "string",
            "description": "type of registrationMode"
          },
          "registrationWhitelist": {
            "type": "array",
            "description": "array of regsitrationList",
            "items": {
              "type": "string",
              "description": "registration whitelist"
            }
          }
        }
      },
      "GeneralAuthSetting": {
        "type": "object",
        "properties": {
          "isLocalEnabled": {
            "type": "boolean",
            "description": "local setting mode"
          },
          "isLdapEnabled": {
            "type": "boolean",
            "description": "ldap setting mode"
          },
          "isSamlEnabled": {
            "type": "boolean",
            "description": "saml setting mode"
          },
          "isOidcEnabled": {
            "type": "boolean",
            "description": "oidc setting mode"
          },
          "isGoogleEnabled": {
            "type": "boolean",
            "description": "google setting mode"
          },
          "isGitHubEnabled": {
            "type": "boolean",
            "description": "github setting mode"
          }
        }
      },
      "LdapAuthSetting": {
        "type": "object",
        "properties": {
          "serverUrl": {
            "type": "string",
            "description": "server url for ldap"
          },
          "isUserBind": {
            "type": "boolean",
            "description": "enable user bind"
          },
          "ldapBindDN": {
            "type": "string",
            "description": "the query used to bind with the directory service"
          },
          "ldapBindDNPassword": {
            "type": "string",
            "description": "the password that is entered in the login page will be used to bind"
          },
          "ldapSearchFilter": {
            "type": "string",
            "description": "the query used to locate the authenticated user"
          },
          "ldapAttrMapUsername": {
            "type": "string",
            "description": "specification of mappings for username when creating new users"
          },
          "isSameUsernameTreatedAsIdenticalUser": {
            "type": "boolean",
            "description": "local account automatically linked the user name matched"
          },
          "ldapAttrMapMail": {
            "type": "string",
            "description": "specification of mappings for mail address when creating new users"
          },
          "ldapAttrMapName": {
            "type": "string",
            "description": "Specification of mappings for full name address when creating new users"
          },
          "ldapGroupSearchBase": {
            "type": "string",
            "description": "the base DN from which to search for groups."
          },
          "ldapGroupSearchFilter": {
            "type": "string",
            "description": "the query used to filter for groups"
          },
          "ldapGroupDnProperty": {
            "type": "string",
            "description": "The property of user object to use in dn interpolation of Group Search Filter"
          }
        }
      },
      "SamlAuthSetting": {
        "type": "object",
        "properties": {
          "missingMandatoryConfigKeys": {
            "type": "array",
            "description": "array of missing mandatory config keys",
            "items": {
              "type": "string",
              "description": "missing mandatory config key"
            }
          },
          "useOnlyEnvVarsForSomeOptions": {
            "type": "boolean",
            "description": "use only env vars for some options"
          },
          "samlEntryPoint": {
            "type": "string",
            "description": "entry point for saml"
          },
          "samlIssuer": {
            "type": "string",
            "description": "issuer for saml"
          },
          "samlEnvVarIssuer": {
            "type": "string",
            "description": "issuer for saml"
          },
          "samlCert": {
            "type": "string",
            "description": "certificate for saml"
          },
          "samlEnvVarCert": {
            "type": "string",
            "description": "certificate for saml"
          },
          "samlAttrMapId": {
            "type": "string",
            "description": "attribute mapping id for saml"
          },
          "samlAttrMapUserName": {
            "type": "string",
            "description": "attribute mapping user name for saml"
          },
          "samlAttrMapMail": {
            "type": "string",
            "description": "attribute mapping mail for saml"
          },
          "samlEnvVarAttrMapId": {
            "type": "string",
            "description": "attribute mapping id for saml"
          },
          "samlEnvVarAttrMapUserName": {
            "type": "string",
            "description": "attribute mapping user name for saml"
          },
          "samlEnvVarAttrMapMail": {
            "type": "string",
            "description": "attribute mapping mail for saml"
          },
          "samlAttrMapFirstName": {
            "type": "string",
            "description": "attribute mapping first name for saml"
          },
          "samlAttrMapLastName": {
            "type": "string",
            "description": "attribute mapping last name for saml"
          },
          "samlEnvVarAttrMapFirstName": {
            "type": "string",
            "description": "attribute mapping first name for saml"
          },
          "samlEnvVarAttrMapLastName": {
            "type": "string",
            "description": "attribute mapping last name for saml"
          },
          "isSameUsernameTreatedAsIdenticalUser": {
            "type": "boolean",
            "description": "local account automatically linked the user name matched"
          },
          "isSameEmailTreatedAsIdenticalUser": {
            "type": "boolean",
            "description": "local account automatically linked the email matched"
          },
          "samlABLCRule": {
            "type": "string",
            "description": "ABLCRule for saml"
          },
          "samlEnvVarABLCRule": {
            "type": "string",
            "description": "ABLCRule for saml"
          }
        }
      },
      "OidcAuthSetting": {
        "type": "object",
        "properties": {
          "oidcProviderName": {
            "type": "string",
            "description": "provider name for oidc"
          },
          "oidcIssuerHost": {
            "type": "string",
            "description": "issuer host for oidc"
          },
          "oidcAuthorizationEndpoint": {
            "type": "string",
            "description": "authorization endpoint for oidc"
          },
          "oidcTokenEndpoint": {
            "type": "string",
            "description": "token endpoint for oidc"
          },
          "oidcRevocationEndpoint": {
            "type": "string",
            "description": "revocation endpoint for oidc"
          },
          "oidcIntrospectionEndpoint": {
            "type": "string",
            "description": "introspection endpoint for oidc"
          },
          "oidcUserInfoEndpoint": {
            "type": "string",
            "description": "userinfo endpoint for oidc"
          },
          "oidcEndSessionEndpoint": {
            "type": "string",
            "description": "end session endpoint for oidc"
          },
          "oidcRegistrationEndpoint": {
            "type": "string",
            "description": "registration endpoint for oidc"
          },
          "oidcJWKSUri": {
            "type": "string",
            "description": "JSON Web Key Set URI for oidc"
          },
          "oidcClientId": {
            "type": "string",
            "description": "client id for oidc"
          },
          "oidcClientSecret": {
            "type": "string",
            "description": "client secret for oidc"
          },
          "oidcAttrMapId": {
            "type": "string",
            "description": "attr map id for oidc"
          },
          "oidcAttrMapUserName": {
            "type": "string",
            "description": "attr map username for oidc"
          },
          "oidcAttrMapName": {
            "type": "string",
            "description": "attr map name for oidc"
          },
          "oidcAttrMapMail": {
            "type": "string",
            "description": "attr map mail for oidc"
          },
          "isSameUsernameTreatedAsIdenticalUser": {
            "type": "boolean",
            "description": "local account automatically linked the user name matched"
          },
          "isSameEmailTreatedAsIdenticalUser": {
            "type": "boolean",
            "description": "local account automatically linked the email matched"
          }
        }
      },
      "GitHubOAuthSetting": {
        "type": "object",
        "properties": {
          "githubClientId": {
            "type": "string",
            "description": "key of comsumer"
          },
          "githubClientSecret": {
            "type": "string",
            "description": "password of comsumer"
          },
          "isSameUsernameTreatedAsIdenticalUser": {
            "type": "boolean",
            "description": "local account automatically linked the email matched"
          }
        }
      },
      "GoogleOAuthSetting": {
        "type": "object",
        "properties": {
          "googleClientId": {
            "type": "string",
            "description": "key of comsumer"
          },
          "googleClientSecret": {
            "type": "string",
            "description": "password of comsumer"
          },
          "isSameUsernameTreatedAsIdenticalUser": {
            "type": "boolean",
            "description": "local account automatically linked the email matched"
          }
        }
      },
      "ShareLink": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier of the share link"
          },
          "relatedPage": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "The unique identifier of the related page"
              },
              "path": {
                "type": "string",
                "description": "The path of the related page"
              }
            }
          },
          "expiredAt": {
            "type": "string",
            "format": "date-time",
            "description": "The expiration date of the share link"
          },
          "description": {
            "type": "string",
            "description": "The description of the share link"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The creation date of the share link"
          },
          "__v": {
            "type": "integer",
            "description": "The version key"
          }
        }
      },
      "ShareLinkSimple": {
        "type": "object",
        "properties": {
          "relatedPage": {
            "type": "string",
            "description": "The unique identifier of the related page"
          },
          "expiredAt": {
            "type": "string",
            "format": "date-time",
            "description": "The expiration date of the share link"
          },
          "description": {
            "type": "string",
            "description": "The description of the share link"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The creation date of the share link"
          },
          "__v": {
            "type": "integer",
            "description": "The version key"
          },
          "_id": {
            "type": "string",
            "description": "The unique identifier of the share link"
          }
        }
      },
      "SlackConfigurationParams": {
        "type": "object",
        "properties": {
          "webhookUrl": {
            "type": "string",
            "description": "incoming webhooks url"
          },
          "isIncomingWebhookPrioritized": {
            "type": "boolean",
            "description": "use incoming webhooks even if Slack App settings are enabled"
          },
          "slackToken": {
            "type": "string",
            "description": "OAuth access token"
          }
        }
      },
      "BotType": {
        "description": "BotType",
        "properties": {
          "currentBotType": {
            "type": "string"
          }
        }
      },
      "SlackIntegration": {
        "description": "SlackIntegration",
        "type": "object",
        "properties": {
          "currentBotType": {
            "type": "string"
          }
        }
      },
      "StatisticsUserResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "example": 1
              },
              "active": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer",
                    "example": 1
                  },
                  "admin": {
                    "type": "integer",
                    "example": 1
                  }
                }
              },
              "inactive": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer",
                    "example": 0
                  },
                  "registered": {
                    "type": "integer",
                    "example": 0
                  },
                  "suspended": {
                    "type": "integer",
                    "example": 0
                  },
                  "deleted": {
                    "type": "integer",
                    "example": 0
                  },
                  "invited": {
                    "type": "integer",
                    "example": 0
                  }
                }
              }
            }
          }
        }
      },
      "User": {
        "description": "User",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "user ID",
            "example": "5ae5fccfc5577b0004dbd8ab"
          },
          "lang": {
            "type": "string",
            "description": "language",
            "example": "en_US"
          },
          "status": {
            "type": "integer",
            "description": "status",
            "example": 0
          },
          "admin": {
            "type": "boolean",
            "description": "whether the admin",
            "example": false
          },
          "email": {
            "type": "string",
            "description": "E-Mail address",
            "example": "alice@aaa.aaa"
          },
          "username": {
            "type": "string",
            "description": "username",
            "example": "alice"
          },
          "name": {
            "type": "string",
            "description": "full name",
            "example": "Alice"
          },
          "createdAt": {
            "type": "string",
            "description": "date created at",
            "example": "2010-01-01T00:00:00.000Z"
          },
          "imageUrlCached": {
            "type": "string",
            "description": "cached image URL",
            "example": "/images/user/5ae5fccfc5577b0004dbd8ab/profile.jpg"
          },
          "isEmailPublished": {
            "type": "boolean",
            "description": "whether the email is published",
            "example": false
          },
          "isGravatarEnabled": {
            "type": "boolean",
            "description": "whether the gravatar is enabled",
            "example": false
          },
          "isInvitationEmailSended": {
            "type": "boolean",
            "description": "whether the invitation email is sent",
            "example": false
          },
          "isQuestionnaireEnabled": {
            "type": "boolean",
            "description": "whether the questionnaire is enabled",
            "example": false
          },
          "lastLoginAt": {
            "type": "string",
            "description": "datetime last login at",
            "example": "2010-01-01T00:00:00.000Z"
          },
          "readOnly": {
            "type": "boolean",
            "description": "whether the user is read only",
            "example": false
          },
          "updatedAt": {
            "type": "string",
            "description": "datetime updated at",
            "example": "2010-01-01T00:00:00.000Z"
          },
          "__v": {
            "type": "integer",
            "description": "DB record version",
            "example": 0
          }
        }
      },
      "ErrorV3": {
        "description": "Error for APIv3",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "error message"
          },
          "code": {
            "type": "string",
            "example": "someapi-error-with-something"
          },
          "stack": {
            "type": "object"
          },
          "args": {
            "type": "object",
            "example": {
              "name": "Josh",
              "age": 20
            }
          }
        }
      },
      "Page": {
        "description": "Page",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "page ID",
            "example": "5e07345972560e001761fa63"
          },
          "__v": {
            "type": "number",
            "description": "DB record version",
            "example": 0
          },
          "commentCount": {
            "type": "number",
            "description": "count of comments",
            "example": 3
          },
          "createdAt": {
            "type": "string",
            "description": "date created at",
            "example": "2010-01-01T00:00:00.000Z"
          },
          "creator": {
            "$ref": "#/components/schemas/User"
          },
          "extended": {
            "type": "object",
            "description": "extend data",
            "example": {}
          },
          "grant": {
            "type": "number",
            "description": "grant",
            "example": 1
          },
          "grantedUsers": {
            "type": "array",
            "description": "granted users",
            "items": {
              "type": "string",
              "description": "user ID"
            },
            "example": [
              "5ae5fccfc5577b0004dbd8ab"
            ]
          },
          "lastUpdateUser": {
            "$ref": "#/components/schemas/User"
          },
          "liker": {
            "type": "array",
            "description": "granted users",
            "items": {
              "type": "string",
              "description": "user ID"
            },
            "example": []
          },
          "path": {
            "type": "string",
            "description": "page path",
            "example": "/"
          },
          "revision": {
            "type": "string",
            "description": "page revision"
          },
          "seenUsers": {
            "type": "array",
            "description": "granted users",
            "items": {
              "type": "string",
              "description": "user ID"
            },
            "example": [
              "5ae5fccfc5577b0004dbd8ab"
            ]
          },
          "status": {
            "type": "string",
            "description": "status",
            "enum": [
              "wip",
              "published",
              "deleted",
              "deprecated"
            ],
            "example": "published"
          },
          "updatedAt": {
            "type": "string",
            "description": "date updated at",
            "example": "2010-01-01T00:00:00.000Z"
          }
        }
      },
      "PaginateResult": {
        "description": "PaginateResult",
        "type": "object",
        "properties": {
          "docs": {
            "type": "array",
            "description": "Array of documents",
            "items": {
              "type": "object"
            }
          },
          "totalDocs": {
            "type": "number",
            "description": "Total number of documents in collection that match a query"
          },
          "limit": {
            "type": "number",
            "description": "Limit that was used"
          },
          "hasPrevPage": {
            "type": "number",
            "description": "Availability of prev page."
          },
          "hasNextPage": {
            "type": "number",
            "description": "Availability of next page."
          },
          "page": {
            "type": "number",
            "description": "Current page number"
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages."
          },
          "offset": {
            "type": "number",
            "description": "Only if specified or default page/offset values were used"
          },
          "prefPage": {
            "type": "number",
            "description": "Previous page number if available or NULL"
          },
          "nextPage": {
            "type": "number",
            "description": "Next page number if available or NULL"
          },
          "pagingCounter": {
            "type": "number",
            "description": "The starting sl. number of first document."
          },
          "meta": {
            "type": "number",
            "description": "Object of pagination meta data (Default false)."
          }
        }
      },
      "V1PaginateResult": {
        "description": "Paginate result v1",
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total number of documents in collection that match a query",
                "example": 35
              },
              "limit": {
                "type": "integer",
                "description": "Limit that was used",
                "example": 10
              },
              "offset": {
                "type": "integer",
                "description": "Only if specified or default page/offset values were used",
                "example": 20
              }
            }
          },
          "data": {
            "type": "object",
            "description": "Object of pagination meta data."
          }
        }
      },
      "V1Response": {
        "description": "Response v1",
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "description": "API is succeeded",
            "example": true
          }
        }
      }
    },
    "responses": {
      "403": {
        "description": "Forbidden"
      },
      "500": {
        "description": "Internal Server Error"
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "User API",
      "tags": [
        "Attachment",
        "Bookmarks",
        "BookmarkFolders",
        "Page",
        "Pages",
        "PageListing",
        "Revisions",
        "ShareLinks",
        "Users",
        "UserUISettings",
        ""
      ]
    },
    {
      "name": "User Personal Settings API",
      "tags": [
        "GeneralSetting",
        "EditorSetting",
        "InAppNotificationSettings",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "name": "System Management API",
      "tags": [
        "Home",
        "Activity",
        "AdminHome",
        "AppSettings",
        "ExternalUserGroups",
        "SecuritySetting",
        "MarkDownSetting",
        "CustomizeSetting",
        "Import",
        "Export",
        "GROWI to GROWI Transfer",
        "MongoDB",
        "NotificationSetting",
        "Plugins",
        "Questionnaire",
        "QuestionnaireSetting",
        "SlackIntegration",
        "SlackIntegrationSettings",
        "SlackIntegrationSettings (with proxy)",
        "SlackIntegrationSettings (without proxy)",
        "SlackIntegrationLegacySetting",
        "ShareLink Management",
        "Templates",
        "Staff",
        "UserGroupRelations",
        "UserGroups",
        "Users Management",
        "FullTextSearch Management",
        "Install"
      ]
    },
    {
      "name": "Public API",
      "tags": [
        "Healthcheck",
        "Statistics",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    }
  ],
  "paths": {
    "/external-user-group-relations": {
      "get": {
        "summary": "/external-user-group-relations",
        "description": "Get user group relations",
        "tags": [
          "ExternalUserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupIds",
            "in": "query",
            "description": "The group IDs to get relations for",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "childGroupIds",
            "in": "query",
            "description": "The child group IDs to get relations for",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user group relations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userGroupRelations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "relationsOfChildGroups": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/external-user-groups": {
      "get": {
        "tags": [
          "ExternalUserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "listExternalUserGroups",
        "summary": "/external-user-groups",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Number of items per page"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Offset for pagination"
          },
          {
            "name": "pagination",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Whether to enable pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved external user groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userGroups": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "totalUserGroups": {
                      "type": "integer"
                    },
                    "pagingLimit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/external-user-groups/ancestors": {
      "get": {
        "tags": [
          "ExternalUserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getAncestors",
        "summary": "/external-user-groups/ancestors",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user group to get ancestors for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved ancestor user groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ancestorUserGroups": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/external-user-groups/children": {
      "get": {
        "tags": [
          "ExternalUserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "listChildren",
        "summary": "/external-user-groups/children",
        "parameters": [
          {
            "name": "parentIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "The IDs of the parent user groups"
          },
          {
            "name": "includeGrandChildren",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Whether to include grandchild user groups"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved child user groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "childUserGroups": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "grandChildUserGroups": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/external-user-groups/{id}": {
      "get": {
        "tags": [
          "ExternalUserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getExternalUserGroup",
        "summary": "/external-user-groups/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the external user group"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved external user group details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userGroup": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ExternalUserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "deleteExternalUserGroup",
        "summary": "/external-user-groups/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the external user group"
          },
          {
            "name": "actionName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The action to perform on group delete"
          },
          {
            "name": "transferToUserGroupId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user group to transfer to"
          },
          {
            "name": "transferToUserGroupType",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "The type of the user group to transfer to"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the external user group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userGroups": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ExternalUserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updateExternalUserGroup",
        "summary": "/external-user-groups/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the external user group"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the external user group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userGroup": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/external-user-groups/{id}/external-user-group-relations": {
      "get": {
        "tags": [
          "ExternalUserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getExternalUserGroupRelations",
        "summary": "/external-user-groups/{id}/external-user-group-relations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the external user group"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved external user group relations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userGroupRelations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/external-user-groups/ldap/sync-settings": {
      "get": {
        "tags": [
          "ExternalUserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getLdapSyncSettings",
        "summary": "Get LDAP sync settings",
        "responses": {
          "200": {
            "description": "Successfully retrieved LDAP sync settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ldapGroupSearchBase": {
                      "type": "string"
                    },
                    "ldapGroupMembershipAttribute": {
                      "type": "string"
                    },
                    "ldapGroupMembershipAttributeType": {
                      "type": "string"
                    },
                    "ldapGroupChildGroupAttribute": {
                      "type": "string"
                    },
                    "autoGenerateUserOnLdapGroupSync": {
                      "type": "boolean"
                    },
                    "preserveDeletedLdapGroups": {
                      "type": "boolean"
                    },
                    "ldapGroupNameAttribute": {
                      "type": "string"
                    },
                    "ldapGroupDescriptionAttribute": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ExternalUserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updateLdapSyncSettings",
        "summary": "Update LDAP sync settings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ldapGroupSearchBase": {
                    "type": "string"
                  },
                  "ldapGroupMembershipAttribute": {
                    "type": "string"
                  },
                  "ldapGroupMembershipAttributeType": {
                    "type": "string"
                  },
                  "ldapGroupChildGroupAttribute": {
                    "type": "string"
                  },
                  "autoGenerateUserOnLdapGroupSync": {
                    "type": "boolean"
                  },
                  "preserveDeletedLdapGroups": {
                    "type": "boolean"
                  },
                  "ldapGroupNameAttribute": {
                    "type": "string"
                  },
                  "ldapGroupDescriptionAttribute": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Sync settings updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/external-user-groups/keycloak/sync-settings": {
      "get": {
        "tags": [
          "ExternalUserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getKeycloakSyncSettings",
        "summary": "Get Keycloak sync settings",
        "responses": {
          "200": {
            "description": "Successfully retrieved Keycloak sync settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "keycloakHost": {
                      "type": "string"
                    },
                    "keycloakGroupRealm": {
                      "type": "string"
                    },
                    "keycloakGroupSyncClientRealm": {
                      "type": "string"
                    },
                    "keycloakGroupSyncClientID": {
                      "type": "string"
                    },
                    "keycloakGroupSyncClientSecret": {
                      "type": "string"
                    },
                    "autoGenerateUserOnKeycloakGroupSync": {
                      "type": "boolean"
                    },
                    "preserveDeletedKeycloakGroups": {
                      "type": "boolean"
                    },
                    "keycloakGroupDescriptionAttribute": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ExternalUserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updateKeycloakSyncSettings",
        "summary": "/external-user-groups/keycloak/sync-settings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "keycloakHost": {
                    "type": "string"
                  },
                  "keycloakGroupRealm": {
                    "type": "string"
                  },
                  "keycloakGroupSyncClientRealm": {
                    "type": "string"
                  },
                  "keycloakGroupSyncClientID": {
                    "type": "string"
                  },
                  "keycloakGroupSyncClientSecret": {
                    "type": "string"
                  },
                  "autoGenerateUserOnKeycloakGroupSync": {
                    "type": "boolean"
                  },
                  "preserveDeletedKeycloakGroups": {
                    "type": "boolean"
                  },
                  "keycloakGroupDescriptionAttribute": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Sync settings updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/external-user-groups/ldap/sync": {
      "put": {
        "tags": [
          "ExternalUserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "syncExternalUserGroupsLdap",
        "summary": "Start LDAP sync process",
        "responses": {
          "202": {
            "description": "Sync process started",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/external-user-groups/keycloak/sync": {
      "put": {
        "tags": [
          "ExternalUserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "syncExternalUserGroupsKeycloak",
        "summary": "/external-user-groups/keycloak/sync",
        "responses": {
          "202": {
            "description": "Sync process started",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/external-user-groups/ldap/sync-status": {
      "get": {
        "tags": [
          "ExternalUserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getExternalUserGroupsLdapSyncStatus",
        "summary": "/external-user-groups/ldap/sync-status",
        "responses": {
          "200": {
            "description": "Successfully retrieved LDAP sync status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncStatus"
                }
              }
            }
          }
        }
      }
    },
    "/questionnaire/orders": {
      "get": {
        "tags": [
          "Questionnaire"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "/questionnaire/orders",
        "description": "Get questionnaire orders",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "questionnaireOrders": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/questionnaire/is-enabled": {
      "get": {
        "tags": [
          "Questionnaire"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "/questionnaire/is-enabled",
        "description": "Get questionnaire is enabled",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isEnabled": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/questionnaire/proactive/answer": {
      "post": {
        "tags": [
          "Questionnaire"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "/questionnaire/proactive/answer",
        "description": "Post proactive questionnaire answer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/questionnaire/answer": {
      "put": {
        "tags": [
          "Questionnaire"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "/questionnaire/answer",
        "description": "Post questionnaire answer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/questionnaire/skip": {
      "put": {
        "tags": [
          "Questionnaire"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "/questionnaire/skip",
        "description": "Skip questionnaire",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/questionnaire/deny": {
      "put": {
        "tags": [
          "Questionnaire"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "/questionnaire/deny",
        "description": "Deny questionnaire",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/templates": {
      "get": {
        "summary": "/templates",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "Get all templates",
        "tags": [
          "Templates"
        ],
        "parameters": [
          {
            "name": "includeInvalidTemplates",
            "in": "query",
            "description": "Whether to include invalid templates",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "summaries": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "isDefault": {
                            "type": "boolean"
                          },
                          "isValid": {
                            "type": "boolean"
                          },
                          "locale": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/templates/preset-templates/{templateId}/{locale}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "/templates/preset-templates/{templateId}/{locale}",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "Get a preset template",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "The template ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "path",
            "description": "The locale",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "markdown": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/templates/plugin-templates/{organizationId}/{reposId}/{templateId}/{locale}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "/templates/plugin-templates/{organizationId}/{reposId}/{templateId}/{locale}",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "Get a plugin template",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reposId",
            "in": "path",
            "description": "The repository ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "The template ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "path",
            "description": "The locale",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "markdown": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/plugins": {
      "post": {
        "tags": [
          "Plugins"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/plugins",
        "description": "Install a plugin",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pluginInstallerForm": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string"
                      },
                      "ghBranch": {
                        "type": "string"
                      },
                      "ghTag": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pluginName": {
                      "type": "string",
                      "description": "The name of the installed plugin"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/plugins/{id}/activate": {
      "put": {
        "tags": [
          "Plugins"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/plugins/{id}/activate",
        "description": "Activate a plugin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pluginName": {
                      "type": "string",
                      "description": "The name of the activated plugin"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/plugins/{id}/remove": {
      "delete": {
        "tags": [
          "Plugins"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/plugins/{id}/remove",
        "description": "Remove a plugin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pluginName": {
                      "type": "string",
                      "description": "The name of the removed plugin"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/activity": {
      "get": {
        "summary": "/activity",
        "tags": [
          "Activity"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "searchFilter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activity fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin-home/": {
      "get": {
        "tags": [
          "AdminHome"
        ],
        "operationId": "getAdminHome",
        "summary": "/admin-home",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "Get adminHome parameters",
        "responses": {
          "200": {
            "description": "params of adminHome",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "adminHomeParams": {
                      "$ref": "#/components/schemas/SystemInformationParams"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/app-settings": {
      "get": {
        "tags": [
          "AppSettings"
        ],
        "operationId": "getAppSettings",
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "/app-settings",
        "description": "get app setting params",
        "responses": {
          "200": {
            "description": "Resources are available",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "appSettingsParams": {
                      "type": "object",
                      "$ref": "#/components/schemas/AppSettingParams"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/app-settings/app-setting": {
      "put": {
        "tags": [
          "AppSettings"
        ],
        "operationId": "updateAppSettings",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/app-settings/app-setting",
        "description": "Update app setting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppSettingPutParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update app setting",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "appSettingParams": {
                      "type": "object",
                      "$ref": "#/components/schemas/AppSettingPutParams"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/app-settings/site-url-setting": {
      "put": {
        "tags": [
          "AppSettings"
        ],
        "operationId": "updateAppSettingSiteUrlSetting",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/app-settings/site-url-setting",
        "description": "Update site url setting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteUrlSettingParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update site url setting",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "siteUrlSettingParams": {
                      "type": "object",
                      "properties": {
                        "siteUrl": {
                          "type": "string",
                          "description": "Site URL. e.g. https://example.com, https://example.com:3000",
                          "example": "http://localhost:3000"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/app-settings/smtp-setting": {
      "put": {
        "tags": [
          "AppSettings"
        ],
        "operationId": "updateAppSettingSmtpSetting",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/app-settings/smtp-setting",
        "description": "Update smtp setting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmtpSettingParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update smtp setting",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mailSettingParams": {
                      "type": "object",
                      "$ref": "#/components/schemas/SmtpSettingResponseParams"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/app-settings/smtp-test": {
      "post": {
        "tags": [
          "AppSettings"
        ],
        "operationId": "postSmtpTest",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/app-settings/smtp-setting",
        "description": "Send test mail for smtp",
        "responses": {
          "200": {
            "description": "Succeeded to send test mail for smtp",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Empty object"
                }
              }
            }
          }
        }
      }
    },
    "/app-settings/ses-setting": {
      "put": {
        "tags": [
          "AppSettings"
        ],
        "operationId": "updateAppSettingSesSetting",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/app-settings/ses-setting",
        "description": "Update ses setting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SesSettingParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update ses setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SesSettingResponseParams"
                }
              }
            }
          }
        }
      }
    },
    "/app-settings/file-upload-settings": {
      "put": {
        "tags": [
          "AppSettings"
        ],
        "operationId": "updateAppSettingFileUploadSetting",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/app-settings/file-upload-setting",
        "description": "Update fileUploadSetting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileUploadSettingParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update fileUploadSetting",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "responseParams": {
                      "type": "object",
                      "$ref": "#/components/schemas/FileUploadSettingParams"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/app-settings/questionnaire-settings": {
      "put": {
        "tags": [
          "AppSettings"
        ],
        "operationId": "updateAppSettingQuestionnaireSettings",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/app-settings/questionnaire-settings",
        "description": "Update QuestionnaireSetting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionnaireSettingParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update QuestionnaireSetting",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "responseParams": {
                      "type": "object",
                      "$ref": "#/components/schemas/QuestionnaireSettingParams"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/app-settings/v5-schema-migration": {
      "post": {
        "tags": [
          "AppSettings"
        ],
        "operationId": "updateAppSettingV5SchemaMigration",
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "AccessToken supported.",
        "description": "Update V5SchemaMigration",
        "responses": {
          "200": {
            "description": "Succeeded to get V5SchemaMigration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isV5Compatible": {
                      "type": "boolean",
                      "description": "is V5 compatible, or not",
                      "example": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/app-settings/maintenance-mode": {
      "post": {
        "tags": [
          "AppSettings"
        ],
        "operationId": "updateAppSettingMaintenanceMode",
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "AccessToken supported.",
        "description": "Update MaintenanceMode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "flag": {
                    "type": "boolean",
                    "description": "flag for maintenance mode"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update MaintenanceMode",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "flag": {
                      "type": "boolean",
                      "description": "true if maintenance mode is enabled",
                      "example": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/attachment/list": {
      "get": {
        "tags": [
          "Attachment"
        ],
        "description": "Get attachment list",
        "parameters": [
          {
            "name": "pageId",
            "in": "query",
            "required": true,
            "description": "page id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "description": "page number",
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "limit",
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return attachment list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/AttachmentPaginateResult"
                }
              }
            }
          }
        }
      }
    },
    "/attachment/limit": {
      "get": {
        "tags": [
          "Attachment"
        ],
        "operationId": "getAttachmentLimit",
        "summary": "/attachment/limit",
        "description": "Get available capacity of uploaded file with GridFS",
        "parameters": [
          {
            "in": "query",
            "name": "fileSize",
            "schema": {
              "type": "number",
              "description": "file size",
              "example": 23175
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to get available capacity of uploaded file with GridFS.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "isUploadable": {
                      "type": "boolean",
                      "description": "uploadable",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/attachment": {
      "post": {
        "tags": [
          "Attachment"
        ],
        "operationId": "addAttachment",
        "summary": "/attachment",
        "description": "Add attachment to the page",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "page_id": {
                    "nullable": false,
                    "type": "string"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "attachment data"
                  }
                }
              },
              "encoding": {
                "path": {
                  "contentType": "application/x-www-form-urlencoded"
                }
              }
            },
            "*/*": {
              "schema": {
                "properties": {
                  "page_id": {
                    "nullable": false,
                    "type": "string"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "attachment data"
                  }
                }
              },
              "encoding": {
                "path": {
                  "contentType": "application/x-www-form-urlencoded"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to add attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "page": {
                      "$ref": "#/components/schemas/Page"
                    },
                    "attachment": {
                      "$ref": "#/components/schemas/Attachment"
                    },
                    "revision": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/attachment/{id}": {
      "get": {
        "tags": [
          "Attachment"
        ],
        "description": "Get attachment",
        "responses": {
          "200": {
            "description": "Return attachment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attachment": {
                      "$ref": "#/components/schemas/Attachment"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "attachment id",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/bookmark-folder": {
      "post": {
        "tags": [
          "BookmarkFolders"
        ],
        "operationId": "createBookmarkFolder",
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "Create bookmark folder",
        "description": "Create a new bookmark folder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the bookmark folder",
                    "nullable": false
                  },
                  "parent": {
                    "type": "string",
                    "description": "Parent folder ID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resources are available",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "bookmarkFolder": {
                      "type": "object",
                      "$ref": "#/components/schemas/BookmarkFolder"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "BookmarkFolders"
        ],
        "operationId": "updateBookmarkFolder",
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "Update bookmark folder",
        "description": "Update a bookmark folder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "bookmarkFolderId": {
                    "type": "string",
                    "description": "Bookmark Folder ID"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the bookmark folder",
                    "nullable": false
                  },
                  "parent": {
                    "type": "string",
                    "description": "Parent folder ID"
                  },
                  "childFolder": {
                    "type": "array",
                    "description": "Child folders",
                    "items": {
                      "type": "object",
                      "$ref": "#/components/schemas/BookmarkFolder"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resources are available",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "bookmarkFolder": {
                      "type": "object",
                      "$ref": "#/components/schemas/BookmarkFolder"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookmark-folder/list/{userId}": {
      "get": {
        "tags": [
          "BookmarkFolders"
        ],
        "operationId": "listBookmarkFolders",
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "List bookmark folders of a user",
        "description": "List bookmark folders of a user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resources are available",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "bookmarkFolderItems": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/BookmarkFolder"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookmark-folder/{id}": {
      "delete": {
        "tags": [
          "BookmarkFolders"
        ],
        "operationId": "deleteBookmarkFolder",
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "Delete bookmark folder",
        "description": "Delete a bookmark folder and its children",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Bookmark Folder ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "deletedCount": {
                      "type": "number",
                      "description": "Number of deleted folders",
                      "example": 1
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookmark-folder/add-bookmark-to-folder": {
      "post": {
        "tags": [
          "BookmarkFolders"
        ],
        "operationId": "addBookmarkToFolder",
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "Update bookmark folder",
        "description": "Update a bookmark folder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "pageId": {
                    "type": "string",
                    "description": "Page ID",
                    "nullable": false
                  },
                  "folderId": {
                    "type": "string",
                    "description": "Folder ID",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resources are available",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "bookmarkFolder": {
                      "type": "object",
                      "$ref": "#/components/schemas/BookmarkFolder"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookmark-folder/update-bookmark": {
      "put": {
        "tags": [
          "BookmarkFolders"
        ],
        "operationId": "updateBookmarkInFolder",
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "Update bookmark in folder",
        "description": "Update a bookmark in a folder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "pageId": {
                    "type": "string",
                    "description": "Page ID",
                    "nullable": false
                  },
                  "status": {
                    "type": "string",
                    "description": "Bookmark status"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resources are available",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "bookmarkFolder": {
                      "type": "object",
                      "$ref": "#/components/schemas/BookmarkFolder"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookmarks/info": {
      "get": {
        "tags": [
          "Bookmarks"
        ],
        "summary": "/bookmarks/info",
        "description": "Get bookmarked info",
        "operationId": "getBookmarkedInfo",
        "parameters": [
          {
            "name": "pageId",
            "in": "query",
            "description": "page id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to get bookmark info.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookmarkInfo"
                }
              }
            }
          }
        }
      }
    },
    "/bookmarks/{userId}": {
      "get": {
        "tags": [
          "Bookmarks"
        ],
        "summary": "/bookmarks/{userId}",
        "description": "Get my bookmarked status",
        "operationId": "getMyBookmarkedStatus",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "user id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to get my bookmarked status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bookmarks"
                }
              }
            }
          }
        }
      }
    },
    "/bookmarks": {
      "put": {
        "tags": [
          "Bookmarks"
        ],
        "summary": "/bookmarks",
        "description": "Update bookmarked status",
        "operationId": "updateBookmarkedStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookmarkParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update bookmarked status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bookmark": {
                      "$ref": "#/components/schemas/Bookmark"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customize-setting": {
      "get": {
        "tags": [
          "CustomizeSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getCustomizeSetting",
        "summary": "/customize-setting",
        "description": "Get customize parameters",
        "responses": {
          "200": {
            "description": "params of customize",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "customizeParams": {
                      "type": "object",
                      "description": "customize params",
                      "$ref": "#/components/schemas/CustomizeSetting"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customize-setting/layout": {
      "get": {
        "tags": [
          "CustomizeSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getLayoutCustomizeSetting",
        "summary": "/customize-setting/layout",
        "description": "Get layout",
        "responses": {
          "200": {
            "description": "Succeeded to get layout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomizeLayout"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomizeSetting"
        ],
        "operationId": "updateLayoutCustomizeSetting",
        "summary": "/customize-setting/layout",
        "description": "Update layout",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomizeLayout"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update layout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customizedParams": {
                      "type": "object",
                      "description": "customized params",
                      "$ref": "#/components/schemas/CustomizeLayout"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customize-setting/theme": {
      "get": {
        "tags": [
          "CustomizeSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getThemeCustomizeSetting",
        "summary": "/customize-setting/theme",
        "description": "Get theme",
        "responses": {
          "200": {
            "description": "Succeeded to get layout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currentTheme": {
                      "type": "string",
                      "description": "The current theme name."
                    },
                    "pluginThemesMetadatas": {
                      "type": "array",
                      "description": "Metadata for available plugin themes.",
                      "items": {
                        "$ref": "#/components/schemas/ThemesMetadata"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomizeSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updateThemeCustomizeSetting",
        "summary": "/customize-setting/theme",
        "description": "Update theme",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomizeTheme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update theme",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customizedParams": {
                      "$ref": "#/components/schemas/CustomizeTheme"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customize-setting/sidebar": {
      "get": {
        "tags": [
          "CustomizeSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getCustomeSettingSidebar",
        "summary": "/customize-setting/sidebar",
        "description": "Get sidebar",
        "responses": {
          "200": {
            "description": "Succeeded to get sidebar",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomizeSidebar"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomizeSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updateCustomizeSettingSidebar",
        "summary": "/customize-setting/sidebar",
        "description": "Update sidebar",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomizeSidebar"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update sidebar",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customizedParams": {
                      "$ref": "#/components/schemas/CustomizeSidebar"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customize-setting/function": {
      "put": {
        "tags": [
          "CustomizeSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updateFunctionCustomizeSetting",
        "summary": "/customize-setting/function",
        "description": "Update function",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomizeFunction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update function",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customizedParams": {
                      "$ref": "#/components/schemas/CustomizeFunction"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customize-setting/presentation": {
      "put": {
        "tags": [
          "CustomizeSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updatePresentationCustomizeSetting",
        "summary": "/customize-setting/presentation",
        "description": "Update presentation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomizePresentation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update presentation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customizedParams": {
                      "$ref": "#/components/schemas/CustomizePresentation"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customize-setting/highlight": {
      "put": {
        "tags": [
          "CustomizeSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updateHighlightCustomizeSetting",
        "summary": "/customize-setting/highlight",
        "description": "Update highlight",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomizeHighlight"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update highlight",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customizedParams": {
                      "$ref": "#/components/schemas/CustomizeHighlightResponse"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customize-setting/customizeTitle": {
      "put": {
        "tags": [
          "CustomizeSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updateCustomizeTitleCustomizeSetting",
        "summary": "/customize-setting/customizeTitle",
        "description": "Update title",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomizeTitle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update customizeTitle",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customizedParams": {
                      "$ref": "#/components/schemas/CustomizeTitle"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customize-setting/customize-noscript": {
      "put": {
        "tags": [
          "CustomizeSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updateCustomizeNoscriptCustomizeSetting",
        "summary": "/customize-setting/customize-noscript",
        "description": "Update noscript",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomizeNoscript"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update customize header",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customizedParams": {
                      "$ref": "#/components/schemas/CustomizeNoscript"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customize-setting/customize-css": {
      "put": {
        "tags": [
          "CustomizeSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updateCustomizeCssCustomizeSetting",
        "summary": "/customize-setting/customize-css",
        "description": "Update customize css",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomizeCss"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update customize css",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customizedParams": {
                      "$ref": "#/components/schemas/CustomizeCss"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customize-setting/customize-script": {
      "put": {
        "tags": [
          "CustomizeSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updateCustomizeScriptCustomizeSetting",
        "summary": "/customize-setting/customize-script",
        "description": "Update customize script",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomizeScript"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update customize script",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customizedParams": {
                      "$ref": "#/components/schemas/CustomizeScript"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customize-setting/customize-logo": {
      "put": {
        "tags": [
          "CustomizeSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updateCustomizeLogoCustomizeSetting",
        "summary": "/customize-setting/customize-logo",
        "description": "Update customize logo",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomizeLogo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update customize logo",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customizedParams": {
                      "$ref": "#/components/schemas/CustomizeLogo"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customize-setting/upload-brand-logo": {
      "put": {
        "tags": [
          "CustomizeSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "uploadBrandLogoCustomizeSetting",
        "summary": "/customize-setting/upload-brand-logo",
        "description": "Upload brand logo",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to upload brand logo",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attachment": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Attachment"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "creator": {
                              "type": "string"
                            },
                            "page": {},
                            "temporaryUrlExpiredAt": {},
                            "temporaryUrlCached": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customize-setting/delete-brand-logo": {
      "delete": {
        "tags": [
          "CustomizeSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "deleteBrandLogoCustomizeSetting",
        "summary": "/customize-setting/delete-brand-logo",
        "description": "Delete brand logo",
        "responses": {
          "200": {
            "description": "Succeeded to delete brand logo",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/export/status": {
      "get": {
        "tags": [
          "Export"
        ],
        "operationId": "getExportStatus",
        "summary": "/export/status",
        "description": "get properties of stored zip files for export",
        "responses": {
          "200": {
            "description": "the zip file statuses",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "whether the request is succeeded or not"
                    },
                    "status": {
                      "$ref": "#/components/schemas/ExportStatus"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/export": {
      "post": {
        "tags": [
          "Export"
        ],
        "operationId": "createExport",
        "summary": "/export",
        "description": "generate zipped jsons for collections",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collections": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "the collections to export",
                      "example": [
                        "pages",
                        "tags"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "a zip file is generated",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "whether the request is succeeded"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/export/{fileName}": {
      "delete": {
        "tags": [
          "Export"
        ],
        "operationId": "deleteExport",
        "summary": "/export/{fileName}",
        "description": "delete the file",
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "description": "the file name of zip file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the file is deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "whether the request is succeeded"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/forgot-password": {
      "post": {
        "summary": "Request password reset",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address of the user requesting password reset"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset request processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Reset password",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newPassword": {
                    "type": "string",
                    "format": "password",
                    "description": "New password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userData": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/g2g-transfer/files": {
      "get": {
        "summary": "/g2g-transfer/files",
        "tags": [
          "GROWI to GROWI Transfer"
        ],
        "security": [
          {
            "transferHeaderAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got the list of files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the file"
                          },
                          "size": {
                            "type": "number",
                            "description": "The size of the file"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/g2g-transfer": {
      "post": {
        "summary": "/g2g-transfer",
        "tags": [
          "GROWI to GROWI Transfer"
        ],
        "security": [
          {
            "transferHeaderAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "format": "binary",
                    "description": "The zip file of the data to be transferred"
                  },
                  "collections": {
                    "type": "array",
                    "description": "The list of MongoDB collections to be transferred",
                    "items": {
                      "type": "string"
                    }
                  },
                  "optionsMap": {
                    "type": "object",
                    "description": "The map of options for each collection"
                  },
                  "operatorUserId": {
                    "type": "string",
                    "description": "The ID of the operator user"
                  },
                  "uploadConfigs": {
                    "type": "object",
                    "description": "The map of upload configurations"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully started to receive transfer data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "The message of the result"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/g2g-transfer/attachment": {
      "post": {
        "summary": "/g2g-transfer/attachment",
        "tags": [
          "GROWI to GROWI Transfer"
        ],
        "security": [
          {
            "transferHeaderAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "format": "binary",
                    "description": "The zip file of the data to be transferred"
                  },
                  "attachmentMetadata": {
                    "type": "object",
                    "description": "Metadata of the attachment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully imported attachment file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "The message of the result"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/g2g-transfer/growi-info": {
      "get": {
        "summary": "/g2g-transfer/growi-info",
        "tags": [
          "GROWI to GROWI Transfer"
        ],
        "security": [
          {
            "transferHeaderAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got GROWI information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "growiInfo": {
                      "$ref": "#/components/schemas/GrowiInfo"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/g2g-transfer/generate-key": {
      "post": {
        "summary": "/g2g-transfer/generate-key",
        "tags": [
          "GROWI to GROWI Transfer"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "appSiteUrl": {
                    "type": "string",
                    "description": "The URL of the GROWI"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully generated transfer key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transferKey": {
                      "type": "string",
                      "description": "The transfer key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/g2g-transfer/transfer": {
      "post": {
        "summary": "/g2g-transfer/transfer",
        "tags": [
          "GROWI to GROWI Transfer"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "transferKey": {
                    "type": "string",
                    "description": "The transfer key"
                  },
                  "collections": {
                    "type": "array",
                    "description": "The list of MongoDB collections to be transferred",
                    "items": {
                      "type": "string"
                    }
                  },
                  "optionsMap": {
                    "type": "object",
                    "description": "The map of options for each collection"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully requested auto transfer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "The message of the result"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/healthcheck": {
      "get": {
        "tags": [
          "Healthcheck"
        ],
        "security": [],
        "operationId": "getHealthcheck",
        "summary": "/healthcheck",
        "description": "Check whether the server is healthy or not",
        "parameters": [
          {
            "name": "checkServices",
            "in": "query",
            "description": "The list of services to check health",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "mongo",
                  "search"
                ]
              }
            }
          },
          {
            "name": "strictly",
            "in": "query",
            "description": "Check services and responds 503 if either of these is unhealthy",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Healthy",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "Don't select checkServices",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Select checkServices",
                      "properties": {
                        "info": {
                          "$ref": "#/components/schemas/HealthcheckInfo"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "503": {
            "description": "errors occurs when using checkServicesStrictly",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Errors",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "info": {
                      "$ref": "#/components/schemas/HealthcheckInfo"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/import": {
      "get": {
        "tags": [
          "Import"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "operationId": "getImportSettingsParams",
        "summary": "/import",
        "description": "Get import settings params",
        "responses": {
          "200": {
            "description": "import settings params",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "importSettingsParams": {
                      "type": "object",
                      "description": "import settings params",
                      "properties": {
                        "esaTeamName": {
                          "type": "string",
                          "description": "the team name of esa.io"
                        },
                        "esaAccessToken": {
                          "type": "string",
                          "description": "the access token of esa.io"
                        },
                        "qiitaTeamName": {
                          "type": "string",
                          "description": "the team name of qiita.com"
                        },
                        "qiitaAccessToken": {
                          "type": "string",
                          "description": "the access token of qiita.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Import"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "operationId": "executeImport",
        "summary": "/import",
        "description": "import a collection from a zipped json",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fileName": {
                    "description": "the file name of zip file",
                    "type": "string"
                  },
                  "collections": {
                    "description": "collection names to import",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "options": {
                    "description": "the array of importing option that have collection name as the key\n",
                    "additionalProperties": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GrowiArchiveImportOption"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import process has requested"
          }
        }
      }
    },
    "/import/status": {
      "get": {
        "tags": [
          "Import"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "operationId": "getImportStatus",
        "summary": "/import/status",
        "description": "Get properties of stored zip files for import",
        "responses": {
          "200": {
            "description": "the zip file statuses",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ImportStatus"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/import/upload": {
      "post": {
        "tags": [
          "Import"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "operationId": "uploadImport",
        "summary": "/import/upload",
        "description": "upload a zip file",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "the file is uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileImportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/import/all": {
      "delete": {
        "tags": [
          "Import"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "operationId": "deleteImportAll",
        "summary": "/import/all",
        "description": "Delete all zip files",
        "responses": {
          "200": {
            "description": "all files are deleted"
          }
        }
      }
    },
    "/in-app-notification/list": {
      "get": {
        "tags": [
          "NotificationSetting"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "operationId": "getInAppNotificationList",
        "summary": "/in-app-notification/list",
        "description": "Get the list of in-app notifications",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of notifications to get",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of notifications to skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status to categorize. 'UNOPENED' or 'OPENED'.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of in-app notifications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InAppNotificationListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/in-app-notification/status": {
      "get": {
        "tags": [
          "NotificationSetting"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "operationId": "getInAppNotificationStatus",
        "summary": "/in-app-notification/status",
        "description": "Get the status of in-app notifications",
        "responses": {
          "200": {
            "description": "Get count of unread notifications",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "Count of unread notifications"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/in-app-notification/open": {
      "post": {
        "tags": [
          "NotificationSetting"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "operationId": "openInAppNotification",
        "summary": "/in-app-notification/open",
        "description": "Open the in-app notification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Notification ID"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification opened successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/in-app-notification/all-statuses-open": {
      "put": {
        "tags": [
          "NotificationSetting"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "operationId": "openAllInAppNotification",
        "summary": "/in-app-notification/all-statuses-open",
        "description": "Open all in-app notifications",
        "responses": {
          "200": {
            "description": "All notifications opened successfully"
          }
        }
      }
    },
    "/installer": {
      "post": {
        "tags": [
          "Install"
        ],
        "security": [],
        "operationId": "Install",
        "summary": "/installer",
        "description": "Install GROWI",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "registerForm": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      },
                      "app:globalLang": {
                        "type": "string",
                        "default": "en_US"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "import settings params",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Installation completed (Logged in as an admin user)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invited": {
      "post": {
        "tags": [
          "Users"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "activateInvitedUser",
        "summary": "/invited",
        "description": "Activate invited user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "invitedForm": {
                    "type": "object",
                    "properties": {
                      "username": {
                        "type": "string",
                        "description": "The username of the invited user."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the invited user."
                      },
                      "password": {
                        "type": "string",
                        "description": "The password for the invited user."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User activated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "redirectTo": {
                      "type": "string",
                      "description": "URL to redirect after successful activation."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Logout user",
        "description": "Logout the currently authenticated user",
        "responses": {
          "200": {
            "description": "Successfully logged out"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/markdown-setting": {
      "get": {
        "tags": [
          "MarkDownSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getMarkdownSetting",
        "summary": "Get markdown parameters",
        "responses": {
          "200": {
            "description": "params of markdown",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "markdownParams": {
                      "type": "object",
                      "description": "markdown params",
                      "$ref": "#/components/schemas/MarkdownParams"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/markdown-setting/lineBreak": {
      "put": {
        "tags": [
          "MarkDownSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updateLineBreakMarkdownSetting",
        "summary": "Update lineBreak setting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LineBreakParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update lineBreak setting",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lineBreaksParams": {
                      "type": "object",
                      "$ref": "#/components/schemas/LineBreakParams"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/markdown-setting/indent": {
      "put": {
        "tags": [
          "MarkDownSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updateIndentMarkdownSetting",
        "summary": "Update indent setting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndentParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update indent setting",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "indentParams": {
                      "type": "object",
                      "description": "indent params",
                      "$ref": "#/components/schemas/IndentParams"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/markdown-setting/xss": {
      "put": {
        "tags": [
          "MarkDownSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updateXssMarkdownSetting",
        "summary": "Update XSS setting",
        "description": "Update xss",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XssParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update xss setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XssParams"
                }
              }
            }
          }
        }
      }
    },
    "/mongo/collections": {
      "get": {
        "tags": [
          "MongoDB"
        ],
        "operationId": "getMongoCollections",
        "summary": "/mongo/collections",
        "description": "get mongodb collections names",
        "responses": {
          "200": {
            "description": "a list of collections in mongoDB",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "whether the request is succeeded"
                    },
                    "collections": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notification-setting/": {
      "get": {
        "tags": [
          "NotificationSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "Get notification paramators",
        "responses": {
          "200": {
            "description": "params of notification",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "notificationParams": {
                      "type": "object",
                      "description": "notification params",
                      "$ref": "#/components/schemas/NotificationParams"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notification-setting/user-notification": {
      "post": {
        "tags": [
          "NotificationSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "add user notification setting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserNotificationParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to add user notification setting",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "responseParams": {
                      "type": "object",
                      "description": "response params",
                      "properties": {
                        "createdUser": {
                          "$ref": "#/components/schemas/User",
                          "description": "user who set notification"
                        },
                        "userNotifications": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserNotification",
                            "description": "user notification settings"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notification-setting/user-notification/{id}": {
      "delete": {
        "tags": [
          "NotificationSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "delete user trigger notification pattern",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of user trigger notification",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to delete user trigger notification pattern",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotification"
                }
              }
            }
          }
        }
      }
    },
    "/notification-setting/global-notification/{id}": {
      "get": {
        "tags": [
          "NotificationSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "get global notification setting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of global notification",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to get global notification setting",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "globalNotification": {
                      "$ref": "#/components/schemas/GlobalNotification"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "NotificationSetting"
        ],
        "description": "update global notification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "global notification id for updated",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalNotificationParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update global notification",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "createdNotification": {
                      "type": "object",
                      "description": "notification param updated",
                      "$ref": "#/components/schemas/GlobalNotification"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "NotificationSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "delete global notification pattern",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of global notification",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to delete global notification pattern",
            "content": {
              "application/json": {
                "schema": {
                  "description": "deleted notification",
                  "$ref": "#/components/schemas/GlobalNotification"
                }
              }
            }
          }
        }
      }
    },
    "/notification-setting/global-notification": {
      "post": {
        "tags": [
          "NotificationSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "add global notification",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalNotificationParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to add global notification",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "createdNotification": {
                      "type": "object",
                      "description": "notification param created",
                      "$ref": "#/components/schemas/GlobalNotification"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notification-setting/notify-for-page-grant": {
      "put": {
        "tags": [
          "NotificationSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "Update settings for notify for page grant",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotifyForPageGrant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to settings for notify for page grant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotifyForPageGrant"
                }
              }
            }
          }
        }
      }
    },
    "/notification-setting/global-notification/{id}/enabled": {
      "put": {
        "tags": [
          "NotificationSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "toggle enabled global notification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "notification id for updated",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "isEnabled": {
                    "type": "boolean",
                    "description": "is notification enabled"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to delete global notification pattern",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "notification id"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/page-listing/root": {
      "get": {
        "tags": [
          "PageListing"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "/page-listing/root",
        "description": "Get the root page",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rootPage": {
                      "$ref": "#/components/schemas/Page"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/page-listing/ancestors-children": {
      "get": {
        "tags": [
          "PageListing"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "/page-listing/ancestors-children",
        "description": "Get the ancestors and children of a page",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the ancestors and children of a page",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ancestorsChildren": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "description": "Document ID"
                          },
                          "descendantCount": {
                            "type": "integer",
                            "description": "Number of descendants"
                          },
                          "isEmpty": {
                            "type": "boolean",
                            "description": "Indicates if the node is empty"
                          },
                          "grant": {
                            "type": "integer",
                            "description": "Access level"
                          },
                          "path": {
                            "type": "string",
                            "description": "Path string"
                          },
                          "revision": {
                            "type": "string",
                            "nullable": true,
                            "description": "Revision ID (nullable)"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/page-listing/children": {
      "get": {
        "tags": [
          "PageListing"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "/page-listing/children",
        "description": "Get the children of a page",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the children of a page",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "children": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Page"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/page-listing/info": {
      "get": {
        "tags": [
          "PageListing"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "accessTokenInQuery": []
          }
        ],
        "summary": "/page-listing/info",
        "description": "Get the information of a page",
        "parameters": [
          {
            "name": "pageIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "path",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachBookmarkCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "attachShortBody",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the information of a page",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "idToPageInfoMap": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "commentCount": {
                            "type": "integer"
                          },
                          "contentAge": {
                            "type": "integer"
                          },
                          "descendantCount": {
                            "type": "integer"
                          },
                          "isAbleToDeleteCompletely": {
                            "type": "boolean"
                          },
                          "isDeletable": {
                            "type": "boolean"
                          },
                          "isEmpty": {
                            "type": "boolean"
                          },
                          "isMovable": {
                            "type": "boolean"
                          },
                          "isRevertible": {
                            "type": "boolean"
                          },
                          "isV5Compatible": {
                            "type": "boolean"
                          },
                          "likerIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "seenUserIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "sumOfLikers": {
                            "type": "integer"
                          },
                          "sumOfSeenUsers": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/page": {
      "get": {
        "tags": [
          "Page"
        ],
        "operationId": "getPage",
        "summary": "Get page",
        "description": "get page by pagePath or pageId",
        "parameters": [
          {
            "name": "pageId",
            "in": "query",
            "description": "page id",
            "schema": {
              "$ref": "#/components/schemas/Page/properties/_id"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "page path",
            "schema": {
              "$ref": "#/components/schemas/Page/properties/path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Page"
        ],
        "summary": "Create page",
        "operationId": "createPage",
        "description": "Create page",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "Text of page"
                  },
                  "path": {
                    "$ref": "#/components/schemas/Page/properties/path"
                  },
                  "grant": {
                    "$ref": "#/components/schemas/Page/properties/grant"
                  },
                  "grantUserGroupIds": {
                    "type": "string",
                    "description": "UserGroup ID",
                    "example": "5ae5fccfc5577b0004dbd8ab"
                  },
                  "pageTags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "body",
                  "path"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Succeeded to create page.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "$ref": "#/components/schemas/Page"
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Tags"
                          }
                        },
                        "revision": {
                          "$ref": "#/components/schemas/Revision"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "page path is already existed"
          }
        }
      },
      "put": {
        "tags": [
          "Page"
        ],
        "operationId": "updatePage",
        "description": "Update page",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "$ref": "#/components/schemas/Revision/properties/body"
                  },
                  "pageId": {
                    "$ref": "#/components/schemas/Page/properties/_id"
                  },
                  "revisionId": {
                    "$ref": "#/components/schemas/Revision/properties/_id"
                  },
                  "grant": {
                    "$ref": "#/components/schemas/Page/properties/grant"
                  },
                  "userRelatedGrantUserGroupIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "UserGroup ID"
                    }
                  },
                  "overwriteScopesOfDescendants": {
                    "type": "boolean",
                    "description": "Determine whether the scopes of descendants should be overwritten"
                  },
                  "isSlackEnabled": {
                    "type": "boolean",
                    "description": "Determine whether the page is enabled to be posted to Slack"
                  },
                  "slackChannels": {
                    "type": "string",
                    "description": "Slack channel IDs"
                  },
                  "origin": {
                    "type": "string",
                    "description": "Origin is \"view\" or \"editor\""
                  },
                  "wip": {
                    "type": "boolean",
                    "description": "Determine whether the page is WIP"
                  }
                },
                "required": [
                  "body",
                  "pageId",
                  "revisionId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update page.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "$ref": "#/components/schemas/Page"
                        },
                        "revision": {
                          "$ref": "#/components/schemas/Revision"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/page/exist": {
      "get": {
        "tags": [
          "Page"
        ],
        "summary": "Check if page exists",
        "description": "Check if a page exists at the specified path",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path to check for existence",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully checked page existence.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isExist": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/page/likes": {
      "put": {
        "tags": [
          "Page"
        ],
        "summary": "Get page likes",
        "description": "Update liked status",
        "operationId": "updateLikedStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LikeParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update liked status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          }
        }
      }
    },
    "/page/info": {
      "get": {
        "tags": [
          "Page"
        ],
        "summary": "Get page info",
        "description": "Retrieve current page info",
        "operationId": "getPageInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PageParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved current page info.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageInfo"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/page/grant-data": {
      "get": {
        "tags": [
          "Page"
        ],
        "summary": "Get page grant data",
        "description": "Retrieve current page's grant data",
        "operationId": "getPageGrantData",
        "parameters": [
          {
            "name": "pageId",
            "in": "query",
            "description": "page id",
            "schema": {
              "$ref": "#/components/schemas/Page/properties/_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved current grant data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isGrantNormalized": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Page is unreachable or empty."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/page/non-user-related-groups-granted": {
      "get": {
        "tags": [
          "Page"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Check if non-user related groups are granted page access",
        "description": "Check if non-user related groups are granted access to a specific page or its closest ancestor",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "Path of the page",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully checked non-user related groups access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isNonUserRelatedGroupsGranted": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Cannot access page or ancestor."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/page/applicable-grant": {
      "get": {
        "tags": [
          "Page"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get applicable grant data",
        "description": "Retrieve applicable grant data for a specific page",
        "parameters": [
          {
            "name": "pageId",
            "in": "query",
            "description": "ID of the page",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved applicable grant data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "grant": {
                      "type": "number"
                    },
                    "grantedUsers": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "grantedGroups": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Page is unreachable or empty."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/{pageId}/grant": {
      "put": {
        "tags": [
          "Page"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Update page grant",
        "description": "Update the grant of a specific page",
        "parameters": [
          {
            "name": "pageId",
            "in": "path",
            "description": "ID of the page",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "grant": {
                    "type": "number",
                    "description": "Grant level"
                  },
                  "userRelatedGrantedGroups": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of user-related granted group IDs"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated page grant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          }
        }
      }
    },
    "/page/export/{pageId}": {
      "get": {
        "tags": [
          "Page"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "return page's markdown",
        "parameters": [
          {
            "name": "pageId",
            "in": "path",
            "description": "ID of the page",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return page's markdown"
          }
        }
      }
    },
    "/page/exist-paths": {
      "get": {
        "tags": [
          "Page"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get already exist paths",
        "description": "Get already exist paths",
        "operationId": "getAlreadyExistPaths",
        "parameters": [
          {
            "name": "fromPath",
            "in": "query",
            "description": "old parent path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toPath",
            "in": "query",
            "description": "new parent path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to retrieve pages.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "existPaths": {
                      "type": "object",
                      "description": "Paths are already exist in DB"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/page/subscribe": {
      "put": {
        "tags": [
          "Page"
        ],
        "summary": "Update subscription status",
        "description": "Update subscription status",
        "operationId": "updateSubscriptionStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "pageId": {
                    "$ref": "#/components/schemas/Page/properties/_id"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update subscription status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/{pageId}/content-width": {
      "put": {
        "tags": [
          "Page"
        ],
        "summary": "Update content width",
        "description": "Update the content width setting for a specific page",
        "parameters": [
          {
            "name": "pageId",
            "in": "path",
            "description": "ID of the page",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "expandContentWidth": {
                    "type": "boolean",
                    "description": "Whether to expand the content width"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated content width.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "page": {
                      "$ref": "#/components/schemas/Page"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{pageId}/publish": {
      "put": {
        "tags": [
          "Page"
        ],
        "summary": "Publish page",
        "description": "Publish a specific page",
        "parameters": [
          {
            "name": "pageId",
            "in": "path",
            "description": "ID of the page",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully published the page.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          }
        }
      }
    },
    "/{pageId}/unpublish": {
      "put": {
        "tags": [
          "Page"
        ],
        "summary": "Unpublish page",
        "description": "Unpublish a specific page",
        "parameters": [
          {
            "name": "pageId",
            "in": "path",
            "description": "ID of the page",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully unpublished the page.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          }
        }
      }
    },
    "/{pageId}/yjs-data": {
      "get": {
        "tags": [
          "Page"
        ],
        "summary": "Get Yjs data",
        "description": "Retrieve Yjs data for a specific page",
        "parameters": [
          {
            "name": "pageId",
            "in": "path",
            "description": "ID of the page",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Yjs data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "yjsData": {
                      "type": "object",
                      "description": "Yjs data",
                      "properties": {
                        "hasYdocsNewerThanLatestRevision": {
                          "type": "boolean",
                          "description": "Whether Yjs documents are newer than the latest revision"
                        },
                        "awarenessStateSize": {
                          "type": "number",
                          "description": "Size of the awareness state"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{pageId}/sync-latest-revision-body-to-yjs-draft": {
      "put": {
        "tags": [
          "Page"
        ],
        "summary": "Sync latest revision body to Yjs draft",
        "description": "Sync the latest revision body to the Yjs draft for a specific page",
        "parameters": [
          {
            "name": "pageId",
            "in": "path",
            "description": "ID of the page",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "editingMarkdownLength": {
                    "type": "integer",
                    "description": "Length of the editing markdown"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully synced the latest revision body to Yjs draft.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "synced": {
                      "type": "boolean",
                      "description": "Whether the latest revision body is synced to the Yjs draft"
                    },
                    "isYjsDataBroken": {
                      "type": "boolean",
                      "description": "Whether Yjs data is broken"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pages/recent": {
      "get": {
        "tags": [
          "Pages"
        ],
        "description": "Get recently updated pages",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit of acquisitions",
            "schema": {
              "type": "number"
            },
            "example": 10
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of acquisitions",
            "schema": {
              "type": "number"
            },
            "example": 0
          },
          {
            "name": "includeWipPage",
            "in": "query",
            "description": "Whether to include WIP pages",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return pages recently updated"
          }
        }
      }
    },
    "/pages/rename": {
      "post": {
        "tags": [
          "Pages"
        ],
        "operationId": "renamePage",
        "description": "Rename page",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "pageId": {
                    "$ref": "#/components/schemas/Page/properties/_id"
                  },
                  "path": {
                    "$ref": "#/components/schemas/Page/properties/path"
                  },
                  "revisionId": {
                    "type": "string",
                    "description": "revision ID",
                    "example": "5e07345972560e001761fa63"
                  },
                  "newPagePath": {
                    "type": "string",
                    "description": "new path",
                    "example": "/user/alice/new_test"
                  },
                  "isRenameRedirect": {
                    "type": "boolean",
                    "description": "whether redirect page"
                  },
                  "updateMetadata": {
                    "type": "boolean",
                    "description": "whether update meta data"
                  },
                  "isRecursively": {
                    "type": "boolean",
                    "description": "whether rename page with descendants"
                  }
                },
                "required": [
                  "pageId",
                  "revisionId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to rename page.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "page": {
                      "$ref": "#/components/schemas/Page"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "page id is invalid"
          },
          "409": {
            "description": "page path is already existed"
          }
        }
      }
    },
    "/pages/resume-rename": {
      "post": {
        "tags": [
          "Pages"
        ],
        "operationId": "resumeRenamePage",
        "description": "Resume rename page operation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "pageId": {
                    "$ref": "#/components/schemas/Page/properties/_id"
                  }
                },
                "required": [
                  "pageId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to resume rename page operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/pages/empty-trash": {
      "delete": {
        "tags": [
          "Pages"
        ],
        "description": "empty trash",
        "responses": {
          "200": {
            "description": "Succeeded to remove all trash pages",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "deletablePages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Page"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pages/list": {
      "get": {
        "tags": [
          "Pages"
        ],
        "operationId": "getList",
        "description": "Get list of pages",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "Path to search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit of acquisitions",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to retrieve pages.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "totalCount": {
                      "type": "number",
                      "description": "Total count of pages",
                      "example": 3
                    },
                    "offset": {
                      "type": "number",
                      "description": "Offset of pages",
                      "example": 0
                    },
                    "limit": {
                      "type": "number",
                      "description": "Limit of pages",
                      "example": 10
                    },
                    "pages": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Page"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "lastUpdateUser": {
                                "$ref": "#/components/schemas/User"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pages/duplicate": {
      "post": {
        "tags": [
          "Pages"
        ],
        "operationId": "duplicatePage",
        "description": "Duplicate page",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "pageId": {
                    "$ref": "#/components/schemas/Page/properties/_id"
                  },
                  "pageNameInput": {
                    "$ref": "#/components/schemas/Page/properties/path"
                  },
                  "isRecursively": {
                    "type": "boolean",
                    "description": "whether duplicate page with descendants"
                  },
                  "onlyDuplicateUserRelatedResources": {
                    "type": "boolean",
                    "description": "whether duplicate only user related resources"
                  }
                },
                "required": [
                  "pageId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to duplicate page.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "page": {
                      "$ref": "#/components/schemas/Page"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to duplicate page."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/pages/subordinated-list": {
      "get": {
        "tags": [
          "Pages"
        ],
        "operationId": "subordinatedList",
        "description": "Get subordinated pages",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "Parent path of search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit of acquisitions",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to retrieve pages.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "subordinatedPages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Page"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pages/delete": {
      "post": {
        "tags": [
          "Pages"
        ],
        "operationId": "deletePages",
        "description": "Delete pages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "pageIdToRevisionIdMap": {
                    "type": "object",
                    "description": "Map of page IDs to revision IDs",
                    "example": {
                      "5e2d6aede35da4004ef7e0b7": "5e07345972560e001761fa63"
                    }
                  },
                  "isCompletely": {
                    "type": "boolean",
                    "description": "Whether to delete pages completely"
                  },
                  "isRecursively": {
                    "type": "boolean",
                    "description": "Whether to delete pages recursively"
                  },
                  "isAnyoneWithTheLink": {
                    "type": "boolean",
                    "description": "Whether the page is restricted to anyone with the link"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to delete pages.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "paths": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of deleted page paths"
                    },
                    "isRecursively": {
                      "type": "boolean",
                      "description": "Whether pages were deleted recursively"
                    },
                    "isCompletely": {
                      "type": "boolean",
                      "description": "Whether pages were deleted completely"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pages/convert-pages-by-path": {
      "post": {
        "tags": [
          "Pages"
        ],
        "operationId": "convertPagesByPath",
        "description": "Convert pages by path",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "convertPath": {
                    "type": "string",
                    "description": "Path to convert",
                    "example": "/user/alice"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to convert pages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Empty object"
                }
              }
            }
          }
        }
      }
    },
    "/pages/legacy-pages-migration": {
      "post": {
        "tags": [
          "Pages"
        ],
        "operationId": "legacyPagesMigration",
        "description": "Migrate legacy pages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "pageIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of page IDs to migrate"
                  },
                  "isRecursively": {
                    "type": "boolean",
                    "description": "Whether to migrate pages recursively"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to migrate legacy pages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Empty object"
                }
              }
            }
          }
        }
      }
    },
    "/pages/v5-migration-status": {
      "get": {
        "tags": [
          "Pages"
        ],
        "description": "Get V5 migration status",
        "responses": {
          "200": {
            "description": "Return V5 migration status",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "isV5Compatible": {
                      "type": "boolean",
                      "description": "Whether the app is V5 compatible"
                    },
                    "migratablePagesCount": {
                      "type": "number",
                      "description": "Number of pages that can be migrated"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/personal-setting": {
      "get": {
        "tags": [
          "GeneralSetting"
        ],
        "operationId": "getPersonalSetting",
        "summary": "/personal-setting",
        "description": "Get personal parameters",
        "responses": {
          "200": {
            "description": "params of personal",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "currentUser": {
                      "type": "object",
                      "description": "personal params"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "GeneralSetting"
        ],
        "operationId": "updatePersonalSetting",
        "summary": "/personal-setting",
        "description": "Update personal setting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "params of personal",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "updatedUser": {
                      "type": "object",
                      "description": "personal params"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/personal-setting/is-password-set": {
      "get": {
        "tags": [
          "GeneralSetting"
        ],
        "operationId": "getIsPasswordSet",
        "summary": "/personal-setting",
        "description": "Get whether a password has been set",
        "responses": {
          "200": {
            "description": "Whether a password has been set",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "isPasswordSet": {
                      "type": "boolean",
                      "description": "Whether a password has been set"
                    },
                    "minPasswordLength": {
                      "type": "number",
                      "description": "Minimum password length"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/personal-setting/image-type": {
      "put": {
        "tags": [
          "GeneralSetting"
        ],
        "operationId": "putUserImageType",
        "summary": "/personal-setting/image-type",
        "description": "Update user image type",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isGravatarEnabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "succeded to update user image type",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userData": {
                      "type": "object",
                      "description": "user data"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/personal-setting/external-accounts": {
      "get": {
        "tags": [
          "GeneralSetting"
        ],
        "operationId": "getExternalAccounts",
        "summary": "/personal-setting/external-accounts",
        "description": "Get external accounts that linked current user",
        "responses": {
          "200": {
            "description": "external accounts",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "externalAccounts": {
                      "type": "object",
                      "description": "array of external accounts"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/personal-setting/password": {
      "put": {
        "tags": [
          "GeneralSetting"
        ],
        "operationId": "putUserPassword",
        "summary": "/personal-setting/password",
        "description": "Update user password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "oldPassword": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user password",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userData": {
                      "type": "object",
                      "description": "user data updated"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/personal-setting/api-token": {
      "put": {
        "tags": [
          "GeneralSetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "putUserApiToken",
        "summary": "/personal-setting/api-token",
        "description": "Update user api token",
        "responses": {
          "200": {
            "description": "succeded to update user api token",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userData": {
                      "type": "object",
                      "description": "user data"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/personal-setting/associate-ldap": {
      "put": {
        "tags": [
          "GeneralSetting"
        ],
        "operationId": "associateLdapAccount",
        "summary": "/personal-setting/associate-ldap",
        "description": "associate Ldap account",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "succeded to associate Ldap account",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "associateUser": {
                      "type": "object",
                      "description": "Ldap account associate to me"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/personal-setting/disassociate-ldap": {
      "put": {
        "tags": [
          "GeneralSetting"
        ],
        "operationId": "disassociateLdapAccount",
        "summary": "/personal-setting/disassociate-ldap",
        "description": "disassociate Ldap account",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisassociateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "succeded to disassociate Ldap account",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "disassociateUser": {
                      "type": "object",
                      "description": "Ldap account disassociate to me"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/personal-setting/editor-settings": {
      "put": {
        "tags": [
          "EditorSetting"
        ],
        "operationId": "putEditorSettings",
        "summary": "/personal-setting/editor-settings",
        "description": "Put editor preferences",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "theme": {
                    "type": "string"
                  },
                  "keymapMode": {
                    "type": "string"
                  },
                  "styleActiveLine": {
                    "type": "boolean"
                  },
                  "autoFormatMarkdownTable": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "params of editor settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "editor settings"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "EditorSetting"
        ],
        "operationId": "getEditorSettings",
        "summary": "/personal-setting/editor-settings",
        "description": "Get editor preferences",
        "responses": {
          "200": {
            "description": "params of editor settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "editor settings"
                }
              }
            }
          }
        }
      }
    },
    "/personal-setting/in-app-notification-settings": {
      "put": {
        "tags": [
          "InAppNotificationSettings"
        ],
        "operationId": "putInAppNotificationSettings",
        "summary": "/personal-setting/in-app-notification-settings",
        "description": "Put InAppNotificationSettings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "subscribeRules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "isEnabled": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "params of InAppNotificationSettings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "InAppNotificationSettings"
        ],
        "operationId": "getInAppNotificationSettings",
        "summary": "personal-setting/in-app-notification-settings",
        "description": "Get InAppNotificationSettings",
        "responses": {
          "200": {
            "description": "params of InAppNotificationSettings",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "currentUser": {
                      "type": "object",
                      "description": "InAppNotificationSettings"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/personal-setting/questionnaire-settings": {
      "put": {
        "tags": [
          "QuestionnaireSetting"
        ],
        "operationId": "putQuestionnaireSetting",
        "summary": "/personal-setting/questionnaire-settings",
        "description": "Update the questionnaire settings for the current user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "isQuestionnaireEnabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated questionnaire settings",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "isQuestionnaireEnabled": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/revisions/list": {
      "get": {
        "tags": [
          "Revisions"
        ],
        "description": "Get revisions by page id",
        "parameters": [
          {
            "in": "query",
            "name": "pageId",
            "schema": {
              "type": "string",
              "description": "page id"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "selected page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page item limit",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return revisions belong to page",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "revisions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Revision"
                      }
                    },
                    "totalCount": {
                      "type": "number",
                      "description": "total count of revisions"
                    },
                    "offset": {
                      "type": "number",
                      "description": "offset of the revisions"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/revisions/{id}": {
      "get": {
        "tags": [
          "Revisions"
        ],
        "description": "Get one revision by id",
        "parameters": [
          {
            "in": "query",
            "name": "pageId",
            "required": true,
            "description": "page id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "revision id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return revision",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "revision": {
                      "$ref": "#/components/schemas/Revision"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search/indices": {
      "get": {
        "tags": [
          "FullTextSearch Management"
        ],
        "summary": "/search/indices",
        "description": "Get current status of indices",
        "responses": {
          "200": {
            "description": "Status of indices",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "info": {
                      "type": "object",
                      "description": "Status of indices",
                      "$ref": "#/components/schemas/Indices"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "FullTextSearch Management"
        ],
        "summary": "/search/indices",
        "description": "Operate indices",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "operation": {
                    "type": "string",
                    "description": "Operation type against to indices > * `normalize` - Normalize indices * `rebuild` - Rebuild indices",
                    "enum": [
                      "normalize",
                      "rebuild"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return 200",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Operation is successfully processed, or requested"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search/connection": {
      "post": {
        "tags": [
          "FullTextSearch Management"
        ],
        "summary": "/search/connection",
        "description": "Reconnect to Elasticsearch",
        "responses": {
          "200": {
            "description": "Successfully connected"
          }
        }
      }
    },
    "/security-setting/": {
      "get": {
        "tags": [
          "SecuritySetting"
        ],
        "description": "Get security paramators",
        "responses": {
          "200": {
            "description": "params of security",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "securityParams": {
                      "type": "object",
                      "description": "security params",
                      "properties": {
                        "generalSetting": {
                          "$ref": "#/components/schemas/GeneralSetting"
                        },
                        "shareLinkSetting": {
                          "$ref": "#/components/schemas/ShareLinkSetting"
                        },
                        "localSetting": {
                          "$ref": "#/components/schemas/LocalSetting"
                        },
                        "generalAuth": {
                          "$ref": "#/components/schemas/GeneralAuthSetting"
                        },
                        "ldapAuth": {
                          "$ref": "#/components/schemas/LdapAuthSetting"
                        },
                        "samlAuth": {
                          "$ref": "#/components/schemas/SamlAuthSetting"
                        },
                        "oidcAuth": {
                          "$ref": "#/components/schemas/OidcAuthSetting"
                        },
                        "googleOAuth": {
                          "$ref": "#/components/schemas/GoogleOAuthSetting"
                        },
                        "githubOAuth": {
                          "$ref": "#/components/schemas/GitHubOAuthSetting"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/security-setting/authentication/enabled": {
      "put": {
        "tags": [
          "SecuritySetting"
        ],
        "description": "Update authentication isEnabled",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isEnabled": {
                    "type": "boolean"
                  },
                  "authId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to enable authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "updated param"
                }
              }
            }
          }
        }
      }
    },
    "/security-setting/authentication": {
      "get": {
        "tags": [
          "SecuritySetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/security-setting/authentication",
        "description": "Get setup strategies for passport",
        "responses": {
          "200": {
            "description": "params of setup strategies",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "setupStrategies": {
                      "type": "array",
                      "description": "setup strategies list",
                      "items": {
                        "type": "string",
                        "description": "setup strategie"
                      },
                      "example": [
                        "local"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/security-setting/general-setting": {
      "put": {
        "tags": [
          "SecuritySetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/security-setting/general-setting",
        "description": "Update GeneralSetting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralSetting"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update general Setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralSetting"
                }
              }
            }
          }
        }
      }
    },
    "/security-setting/share-link-setting": {
      "put": {
        "tags": [
          "SecuritySetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/security-setting/share-link-setting",
        "description": "Update ShareLink Setting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareLinkSetting"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update ShareLink Setting",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "securitySettingParams": {
                      "$ref": "#/components/schemas/ShareLinkSetting"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/security-setting/all-share-links": {
      "get": {
        "tags": [
          "SecuritySetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/security-setting/all-share-links",
        "description": "Get All ShareLinks at Share Link Setting",
        "responses": {
          "200": {
            "description": "all share links",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "securityParams": {
                      "type": "object",
                      "description": "suceed to get all share links"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SecuritySetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/security-setting/all-share-links",
        "description": "Delete All ShareLinks at Share Link Setting",
        "responses": {
          "200": {
            "description": "succeed to delete all share links",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "removeTotal": {
                      "type": "number",
                      "description": "total number of removed share links"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/security-setting/local-setting": {
      "put": {
        "tags": [
          "SecuritySetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/security-setting/local-setting",
        "description": "Update LocalSetting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocalSetting"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update local Setting",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "localSettingParams": {
                      "$ref": "#/components/schemas/LocalSetting"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/security-setting/ldap": {
      "put": {
        "tags": [
          "SecuritySetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/security-setting/ldap",
        "description": "Update LDAP setting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapAuthSetting"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update LDAP setting",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "securitySettingParams": {
                      "$ref": "#/components/schemas/LdapAuthSetting"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/security-setting/saml": {
      "put": {
        "tags": [
          "SecuritySetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/security-setting/saml",
        "description": "Update SAML setting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SamlAuthSetting"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update SAML setting",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "securitySettingParams": {
                      "$ref": "#/components/schemas/SamlAuthSetting"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/security-setting/oidc": {
      "put": {
        "tags": [
          "SecuritySetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/security-setting/oidc",
        "description": "Update OpenID Connect setting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OidcAuthSetting"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update OpenID Connect setting",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "securitySettingParams": {
                      "$ref": "#/components/schemas/OidcAuthSetting"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/security-setting/google-oauth": {
      "put": {
        "tags": [
          "SecuritySetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/security-setting/google-oauth",
        "description": "Update google OAuth",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoogleOAuthSetting"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to google OAuth",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "securitySettingParams": {
                      "$ref": "#/components/schemas/GoogleOAuthSetting"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/security-setting/github-oauth": {
      "put": {
        "tags": [
          "SecuritySetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/security-setting/github-oauth",
        "description": "Update github OAuth",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitHubOAuthSetting"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to github OAuth",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "securitySettingParams": {
                      "$ref": "#/components/schemas/GitHubOAuthSetting"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/share-links/": {
      "get": {
        "tags": [
          "ShareLinks"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "get share links",
        "parameters": [
          {
            "name": "relatedPage",
            "in": "query",
            "required": true,
            "description": "page id of share link",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to get share links",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "shareLinksResult": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ShareLink"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ShareLinks"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "Create new share link",
        "parameters": [
          {
            "name": "relatedPage",
            "in": "query",
            "required": true,
            "description": "page id of share link",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiredAt",
            "in": "query",
            "description": "expiration date of share link",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "description of share link",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to create one share link",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareLinkSimple"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShareLinks"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "delete all share links related one page",
        "description": "delete all share links related one page",
        "parameters": [
          {
            "name": "relatedPage",
            "in": "query",
            "required": true,
            "description": "page id of share link",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to delete o all share links related one page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareLinkSimple"
                }
              }
            }
          }
        }
      }
    },
    "/share-links/all": {
      "delete": {
        "tags": [
          "ShareLink Management"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "delete all share links",
        "description": "delete all share links",
        "responses": {
          "200": {
            "description": "Succeeded to remove all share links",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "deletedCount": {
                      "type": "integer",
                      "description": "The number of share links deleted"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/share-links/{id}": {
      "delete": {
        "tags": [
          "ShareLinks"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "delete one share link related one page",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of share link",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to delete one share link"
          }
        }
      }
    },
    "/slack-integration-legacy-setting/": {
      "get": {
        "tags": [
          "SlackIntegrationLegacySetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "Get slack configuration setting",
        "responses": {
          "200": {
            "description": "params of slack configuration setting",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "slackIntegrationParams": {
                      "type": "object",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SlackConfigurationParams"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "isSlackbotConfigured": {
                              "type": "boolean",
                              "description": "whether slackbot is configured"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SlackIntegrationLegacySetting"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "description": "Update slack configuration setting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "webhookUrl": {
                    "type": "string",
                    "description": "incoming webhooks url"
                  },
                  "isIncomingWebhookPrioritized": {
                    "type": "boolean",
                    "description": "use incoming webhooks even if Slack App settings are enabled"
                  },
                  "slackToken": {
                    "type": "string",
                    "description": "OAuth access token"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update slack configuration setting",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "responseParams": {
                      "type": "object",
                      "$ref": "#/components/schemas/SlackConfigurationParams"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/slack-integration-settings/": {
      "get": {
        "tags": [
          "SlackIntegrationSettings"
        ],
        "operationId": "getSlackBotSettingParams",
        "summary": "/slack-integration-settings",
        "description": "Get current settings and connection statuses.",
        "responses": {
          "200": {
            "description": "Succeeded to get info.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currentBotType": {
                      "type": "string"
                    },
                    "settings": {
                      "type": "object",
                      "properties": {
                        "slackSigningSecretEnvVars": {
                          "type": "string"
                        },
                        "slackBotTokenEnvVars": {
                          "type": "string"
                        },
                        "slackSigningSecret": {
                          "type": "string"
                        },
                        "slackBotToken": {
                          "type": "string"
                        },
                        "commandPermission": {
                          "type": "object"
                        },
                        "eventActionsPermission": {
                          "type": "object"
                        },
                        "proxyServerUri": {
                          "type": "string"
                        }
                      }
                    },
                    "connectionStatuses": {
                      "type": "object"
                    },
                    "errorMsg": {
                      "type": "string"
                    },
                    "errorCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/slack-integration-settings/bot-type/": {
      "put": {
        "tags": [
          "SlackIntegrationSettings"
        ],
        "operationId": "putBotType",
        "summary": "/slack-integration/bot-type",
        "description": "Put botType setting.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BotType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to put botType setting."
          }
        }
      }
    },
    "/slack-integration/bot-type/": {
      "delete": {
        "tags": [
          "SlackIntegrationSettings"
        ],
        "operationId": "deleteBotType",
        "summary": "/slack-integration/bot-type",
        "description": "Delete botType setting.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BotType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to delete botType setting."
          }
        }
      }
    },
    "/slack-integration-settings/without-proxy/update-settings/": {
      "put": {
        "tags": [
          "SlackIntegrationSettings (without proxy)"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "putWithoutProxySettings",
        "summary": "/slack-integration-settings/without-proxy/update-settings",
        "description": "Update customBotWithoutProxy setting.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "slackSigningSecret": {
                    "type": "string"
                  },
                  "slackBotToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to put CustomBotWithoutProxy setting."
          }
        }
      }
    },
    "/slack-integration-settings/without-proxy/update-permissions/": {
      "put": {
        "tags": [
          "SlackIntegrationSettings (without proxy)"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "putWithoutProxyPermissions",
        "summary": "/slack-integration-settings/without-proxy/update-permissions",
        "description": "Update customBotWithoutProxy permissions.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "commandPermission": {
                    "type": "object"
                  },
                  "eventActionsPermission": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to put CustomBotWithoutProxy permissions."
          }
        }
      }
    },
    "/slack-integration-settings/slack-app-integrations": {
      "post": {
        "tags": [
          "SlackIntegrationSettings (with proxy)"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "putSlackAppIntegrations",
        "summary": "/slack-integration-settings/slack-app-integrations",
        "description": "Generate SlackAppIntegrations",
        "responses": {
          "200": {
            "description": "Succeeded to create slack app integration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tokenGtoP": {
                      "type": "string"
                    },
                    "tokenPtoG": {
                      "type": "string"
                    },
                    "permissionsForBroadcastUseCommands": {
                      "type": "object"
                    },
                    "permissionsForSingleUseCommands": {
                      "type": "object"
                    },
                    "permissionsForSlackEvents": {
                      "type": "object"
                    },
                    "isPrimary": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/slack-integration-settings/slack-app-integrations/{id}": {
      "delete": {
        "tags": [
          "SlackIntegrationSettings (with proxy)"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "deleteAccessTokens",
        "summary": "/slack-integration-settings/slack-app-integrations/:id",
        "description": "Delete accessTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to delete access tokens for slack",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/slack-integration-settings/proxy-uri": {
      "put": {
        "tags": [
          "SlackIntegrationSettings (with proxy)"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "putProxyUri",
        "summary": "/slack-integration-settings/proxy-uri",
        "description": "Update proxy uri",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "proxyUri": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update proxy uri",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/slack-integration-settings/slack-app-integrations/{id}/makeprimary": {
      "put": {
        "tags": [
          "SlackIntegrationSettings (with proxy)"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "makePrimary",
        "summary": "/slack-integration-settings/slack-app-integrations/:id/makeprimary",
        "description": "Make SlackAppTokens primary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to make it primary"
          }
        }
      }
    },
    "/slack-integration-settings/slack-app-integrations/{id}/regenerate-tokens": {
      "put": {
        "tags": [
          "SlackIntegrationSettings (with proxy)"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "putRegenerateTokens",
        "summary": "/slack-integration-settings/slack-app-integrations/:id/regenerate-tokens",
        "description": "Regenerate SlackAppTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to regenerate slack app tokens",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/slack-integration-settings/slack-app-integrations/{id}/permissions": {
      "put": {
        "tags": [
          "SlackIntegrationSettings (with proxy)"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "putSupportedCommands",
        "summary": "/slack-integration-settings/slack-app-integrations/:id/permissions",
        "description": "update supported commands",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "permissionsForBroadcastUseCommands": {
                    "type": "object"
                  },
                  "permissionsForSingleUseCommands": {
                    "type": "object"
                  },
                  "permissionsForSlackEventActions": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to update supported commands",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/slack-integration-settings/slack-app-integrations/{id}/relation-test": {
      "post": {
        "tags": [
          "SlackIntegrationSettings (with proxy)"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "postRelationTest",
        "summary": "/slack-integration-settings/slack-app-integrations/:id/relation-test",
        "description": "Delete botType setting.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to delete botType setting."
          }
        }
      }
    },
    "/slack-integration-settings/without-proxy/test": {
      "post": {
        "tags": [
          "SlackIntegrationSettings (without proxy)"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "postTest",
        "summary": "/slack-integration-settings/without-proxy/test",
        "description": "Test the connection with slack work space.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded to connect to slack work space."
          }
        }
      }
    },
    "/slack-integration/commands": {
      "post": {
        "tags": [
          "SlackIntegration"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/slack-integration/commands",
        "description": "Handle Slack commands",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "No text."
                }
              }
            }
          }
        }
      }
    },
    "/slack-integration/proxied/verify": {
      "post": {
        "tags": [
          "SlackIntegration"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/slack-integration/proxied/verify",
        "description": "Verify the access token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "challenge": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "challenge": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/slack-integration/proxied/commands": {
      "post": {
        "tags": [
          "SlackIntegration"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/slack-integration/proxied/commands",
        "description": "Handle Slack commands",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "No text."
                }
              }
            }
          }
        }
      }
    },
    "/slack-integration/interactions": {
      "post": {
        "tags": [
          "SlackIntegration"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/slack-integration/interactions",
        "description": "Handle Slack interactions",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/slack-integration/proxied/interactions": {
      "post": {
        "tags": [
          "SlackIntegration"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/slack-integration/proxied/interactions",
        "description": "Handle Slack interactions",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/slack-integration/supported-commands": {
      "get": {
        "tags": [
          "SlackIntegration"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/slack-integration/supported-commands",
        "description": "Get supported commands",
        "responses": {
          "200": {
            "description": "Supported commands",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "permissionsForBroadcastUseCommands": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "permissionsForSingleUseCommands": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/slack-integration/events": {
      "post": {
        "tags": [
          "SlackIntegration"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/slack-integration/events",
        "description": "Handle Slack events",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/slack-integration/proxied/events": {
      "post": {
        "tags": [
          "SlackIntegration"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/slack-integration/proxied/events",
        "description": "Handle Slack events",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "growiBotEvent": {
                    "type": "object"
                  },
                  "data": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/statistics/user": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "security": [],
        "operationId": "getStatisticsUser",
        "summary": "/statistics/user",
        "description": "Get statistics for user",
        "responses": {
          "200": {
            "description": "Statistics for user",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Statistics for all user",
                  "$ref": "#/components/schemas/StatisticsUserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/complete-registration": {
      "post": {
        "summary": "/complete-registration",
        "tags": [
          "Users"
        ],
        "security": [],
        "operationId": "completeRegistration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "registerForm": {
                    "type": "object",
                    "properties": {
                      "username": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      },
                      "token": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User activation successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "redirectTo": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user-group-relations": {
      "get": {
        "tags": [
          "UserGroupRelations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "listUserGroupRelations",
        "summary": "/user-group-relations",
        "description": "Gets the user group relations",
        "responses": {
          "200": {
            "description": "user group relations are fetched",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userGroupRelations": {
                      "type": "object",
                      "description": "contains arrays user objects related",
                      "properties": {
                        "userGroupRelations": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        },
                        "relationsOfChildGroups": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user-groups": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getUserGroup",
        "summary": "/user-groups",
        "description": "Get usergroups",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "number of items per page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "offset",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pagination",
            "in": "query",
            "required": false,
            "description": "whether to paginate",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "usergroups are fetched",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userGroups": {
                      "type": "object",
                      "description": "a result of `UserGroup.find`"
                    },
                    "totalUserGroups": {
                      "type": "number",
                      "description": "the number of userGroups"
                    },
                    "pagingLimit": {
                      "type": "number",
                      "description": "the number of items per page"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "createUserGroup",
        "summary": "/user-groups",
        "description": "Adds userGroup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "name of the userGroup trying to be added"
                  },
                  "description": {
                    "type": "string",
                    "description": "description of the userGroup trying to be added"
                  },
                  "parentId": {
                    "type": "string",
                    "description": "parentId of the userGroup trying to be added"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "userGroup is added",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userGroup": {
                      "type": "object",
                      "description": "A result of `UserGroup.createGroupByName`"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user-groups/ancestors": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getAncestorUserGroups",
        "summary": "/user-groups/ancestors",
        "description": "Get ancestor user groups.",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": true,
            "description": "id of userGroup",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "userGroups are fetched",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ancestorUserGroups": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "userGroup objects"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user-groups/children": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getUserGroupChildren",
        "summary": "/user-groups/children",
        "description": "Get child user groups",
        "parameters": [
          {
            "name": "parentIds",
            "in": "query",
            "required": false,
            "description": "IDs of parent user groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includeGrandChildren",
            "in": "query",
            "required": false,
            "description": "Whether to include grandchild user groups",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Child user groups are fetched",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "childUserGroups": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Child user group objects"
                    },
                    "grandChildUserGroups": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Grandchild user group objects"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/selectable-parent-groups": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getSelectableParentGroups",
        "summary": "/selectable-parent-groups",
        "description": "Get selectable parent UserGroups",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": true,
            "description": "id of userGroup",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "userGroups are fetched",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "selectableParentGroups": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "userGroup objects"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/selectable-child-groups": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getSelectableChildGroups",
        "summary": "/selectable-child-groups",
        "description": "Get selectable child UserGroups",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": true,
            "description": "id of userGroup",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "userGroups are fetched",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "selectableChildGroups": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "userGroup objects"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user-groups/{id}": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getUserGroupFromGroupId",
        "summary": "/user-groups/{id}",
        "description": "Get UserGroup from Group ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of userGroup",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "userGroup are fetched",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userGroup": {
                      "type": "object",
                      "description": "userGroup object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "deleteUserGroup",
        "summary": "/user-groups/{id}",
        "description": "Deletes userGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of userGroup",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionName",
            "in": "query",
            "description": "name of action",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferToUserGroupId",
            "in": "query",
            "description": "userGroup id that will be transferred to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferToUserGroupType",
            "in": "query",
            "description": "userGroup type that will be transferred to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "userGroup is removed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userGroups": {
                      "type": "object",
                      "description": "A result of `UserGroup.removeCompletelyById`"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "updateUserGroups",
        "summary": "/user-groups/{id}",
        "description": "Update userGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of userGroup",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "name of the userGroup trying to be updated"
                  },
                  "description": {
                    "type": "string",
                    "description": "description of the userGroup trying to be updated"
                  },
                  "parentId": {
                    "type": "string",
                    "description": "parentId of the userGroup trying to be updated"
                  },
                  "forceUpdateParents": {
                    "type": "boolean",
                    "description": "whether to update parent groups"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "userGroup is updated",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userGroup": {
                      "type": "object",
                      "description": "A result of `UserGroup.updateName`"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user-groups/{id}/users": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getUsersUserGroups",
        "summary": "/user-groups/{id}/users",
        "description": "Get users related to the userGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of userGroup",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "users are fetched",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      },
                      "description": "user objects"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user-groups/{id}/unrelated-users": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getUnrelatedUsersUserGroups",
        "summary": "/user-groups/{id}/unrelated-users",
        "description": "Get users unrelated to the userGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of userGroup",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchWord",
            "in": "query",
            "description": "search word",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchType",
            "in": "query",
            "description": "search type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isAlsoNameSearched",
            "in": "query",
            "description": "whether name is also searched",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isAlsoMailSearched",
            "in": "query",
            "description": "whether mail is also searched",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "users are fetched",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      },
                      "description": "user objects"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user-groups/{id}/users/{username}": {
      "post": {
        "tags": [
          "UserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "addUserUserGroups",
        "summary": "/user-groups/{id}/users/{username}",
        "description": "Add a user to the userGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of userGroup",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "description": "username of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "a user is added",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User",
                      "description": "the user added to the group"
                    },
                    "createdRelationCount": {
                      "type": "number",
                      "description": "the number of relations created"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "deleteUsersUserGroups",
        "summary": "/user-groups/{id}/users/{username}",
        "description": "remove a user from the userGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of userGroup",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "description": "username of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "a user was removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "$ref": "#/components/schemas/User",
                      "description": "the user removed from the group"
                    },
                    "deletedGroupsCount": {
                      "type": "number",
                      "description": "the number of groups from which the user was removed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user-groups/{id}/user-group-relations": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getUserGroupRelationsUserGroups",
        "summary": "/user-groups/{id}/user-group-relations",
        "description": "Get the user group relations for the userGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of userGroup",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user group relations are fetched",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userGroupRelations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "userGroupRelation objects"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user-groups/{id}/pages": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "getPagesUserGroups",
        "summary": "/user-groups/{id}/pages",
        "description": "Get closed pages for the userGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of userGroup",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "pages are fetched",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "pages": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "page objects"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user-ui-settings": {
      "put": {
        "tags": [
          "UserUISettings"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "/user-ui-settings",
        "description": "Update the user's UI settings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "object",
                    "properties": {
                      "currentSidebarContents": {
                        "type": "string"
                      },
                      "currentProductNavWidth": {
                        "type": "number"
                      },
                      "preferCollapsedModeByUser": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user's UI settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string"
                    },
                    "user": {
                      "type": "string"
                    },
                    "__v": {
                      "type": "number"
                    },
                    "currentSidebarContents": {
                      "type": "string"
                    },
                    "preferCollapsedModeByUser": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "listUsers",
        "summary": "/users",
        "description": "Select selected columns from users order by asc or desc",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "selectedStatusList",
            "in": "query",
            "description": "status list",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "For incremental search value from input box",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "asc or desc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sorting column",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceIncludeAttributes",
            "in": "query",
            "description": "force include attributes",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "users are fetched",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "paginateResult": {
                      "$ref": "#/components/schemas/PaginateResult"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{id}/recent": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "recent created page of user id",
        "summary": "/usersIdReacent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "users recent created pages are fetched",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "paginateResult": {
                      "$ref": "#/components/schemas/PaginateResult"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/invite": {
      "post": {
        "tags": [
          "Users Management"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "inviteUser",
        "summary": "/users/invite",
        "description": "Create new users and send Emails",
        "parameters": [
          {
            "name": "shapedEmailList",
            "in": "query",
            "description": "Invitation emailList",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "sendEmail",
            "in": "query",
            "description": "Whether to send mail",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inviting user success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "createdUserList": {
                      "$ref": "#/components/schemas/User",
                      "description": "Users successfully created"
                    },
                    "existingEmailList": {
                      "type": "array",
                      "description": "Users email that already exists",
                      "items": {
                        "type": "string"
                      }
                    },
                    "failedEmailList": {
                      "type": "object",
                      "description": "Users email that failed to create or send email",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "email address"
                        },
                        "reason": {
                          "type": "string",
                          "description": "reason for failure"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/grant-admin": {
      "put": {
        "tags": [
          "Users Management"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "grantAdminUser",
        "summary": "/users/{id}/grant-admin",
        "description": "Grant user admin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of user for admin",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Grant user admin success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userData": {
                      "$ref": "#/components/schemas/User",
                      "description": "data of admin user"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/revoke-admin": {
      "put": {
        "tags": [
          "Users Management"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "revokeAdminUser",
        "summary": "/users/{id}/revoke-admin",
        "description": "Revoke user admin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of user for revoking admin",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Revoke user admin success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userData": {
                      "type": "object",
                      "description": "data of revoked admin user"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/grant-read-only": {
      "put": {
        "tags": [
          "Users Management"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "ReadOnly",
        "summary": "/users/{id}/grant-read-only",
        "description": "Grant user read only access",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of user for read only access",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Grant user read only access success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userData": {
                      "$ref": "#/components/schemas/User",
                      "description": "data of grant read only"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/revoke-read-only": {
      "put": {
        "tags": [
          "Users Management"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "revokeReadOnly",
        "summary": "/users/{id}/revoke-read-only",
        "description": "Revoke user read only access",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of user for removing read only access",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Revoke user read only access success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userData": {
                      "$ref": "#/components/schemas/User",
                      "description": "data of revoke read only"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/activate": {
      "put": {
        "tags": [
          "Users Management"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "activateUser",
        "summary": "/users/{id}/activate",
        "description": "Activate user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of activate user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activationg user success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userData": {
                      "$ref": "#/components/schemas/User",
                      "description": "data of activate user"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/deactivate": {
      "put": {
        "tags": [
          "Users Management"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "deactivateUser",
        "summary": "/users/{id}/deactivate",
        "description": "Deactivate user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of deactivate user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deactivationg user success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userData": {
                      "$ref": "#/components/schemas/User",
                      "description": "data of deactivate user"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/remove": {
      "delete": {
        "tags": [
          "Users Management"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "removeUser",
        "summary": "/users/{id}/remove",
        "description": "Delete user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of delete user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleting user success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User",
                      "description": "data of deleted user"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/external-accounts": {
      "get": {
        "tags": [
          "Users Management"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "listExternalAccountsUsers",
        "summary": "/users/external-accounts",
        "description": "Get external-account",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "external-account are fetched",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "paginateResult": {
                      "$ref": "#/components/schemas/PaginateResult"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/external-accounts/{id}/remove": {
      "delete": {
        "tags": [
          "Users Management"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "removeExternalAccountUser",
        "summary": "/users/external-accounts/{id}/remove",
        "description": "Delete ExternalAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of ExternalAccount",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "External Account is removed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "externalAccount": {
                      "type": "object",
                      "description": "A result of `ExtenralAccount.findByIdAndRemove`"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/update.imageUrlCache": {
      "put": {
        "tags": [
          "Users Management"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "update.imageUrlCache",
        "summary": "/users/update.imageUrlCache",
        "description": "update imageUrlCache",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "userIds": {
                    "type": "array",
                    "description": "user id list",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success creating imageUrlCached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "success creating imageUrlCached"
                }
              }
            }
          }
        }
      }
    },
    "/users/reset-password": {
      "put": {
        "tags": [
          "Users Management"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "resetPassword",
        "summary": "/users/reset-password",
        "description": "update imageUrlCache",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "user id for reset password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success reset password",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "newPassword": {
                      "type": "string",
                      "description": "new password"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/reset-password-email": {
      "put": {
        "tags": [
          "Users Management"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "resetPasswordEmail",
        "summary": "/users/reset-password-email",
        "description": "send new password email",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "user id for send new password email"
                  },
                  "newPassword": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success send new password email"
          }
        }
      }
    },
    "/users/send-invitation-email": {
      "put": {
        "tags": [
          "Users Management"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "operationId": "sendInvitationEmail",
        "summary": "/users/send-invitation-email",
        "description": "send invitation email",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "user id for send invitation email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success send invitation email",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "failedToSendEmail": {
                      "type": "object",
                      "description": "email and reasons for email sending failure",
                      "properties": {
                        "email": {
                          "type": "string"
                        },
                        "reason": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/list": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "/users/list",
        "operationId": "getUsersList",
        "description": "Get list of users",
        "parameters": [
          {
            "in": "query",
            "name": "userIds",
            "schema": {
              "type": "string",
              "description": "user IDs",
              "example": "5e06fcc7516d64004dbf4da6,5e098d53baa2ac004e7d24ad"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to get list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      },
                      "description": "user list"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/usernames": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "/users/usernames",
        "operationId": "getUsernames",
        "description": "Get list of usernames",
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string",
              "description": "query string to search usernames",
              "example": "alice"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "description": "offset for pagination",
              "example": 0
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "description": "limit for pagination",
              "example": 10
            }
          },
          {
            "in": "query",
            "name": "options",
            "schema": {
              "type": "string",
              "description": "options for including different types of users",
              "example": "{\"isIncludeActiveUser\": true, \"isIncludeInactiveUser\": true, \"isIncludeActivitySnapshotUser\": true, \"isIncludeMixedUsernames\": true}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded to get list of usernames.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "activeUser": {
                      "type": "object",
                      "properties": {
                        "usernames": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      }
                    },
                    "inactiveUser": {
                      "type": "object",
                      "properties": {
                        "usernames": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      }
                    },
                    "activitySnapshotUser": {
                      "type": "object",
                      "properties": {
                        "usernames": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      }
                    },
                    "mixedUsernames": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "/login",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "loginForm": {
                    "type": "object",
                    "properties": {
                      "username": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "redirectTo": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "summary": "/register",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "registerForm": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Register successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "redirectTo": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": []
}