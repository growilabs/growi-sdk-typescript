/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * GROWI REST API v1
 * OpenAPI spec version: 7.2.6-RC.0
 */
/**
 * Comment
 */
export interface Comment {
  /** revision ID */
  _id?: string;
  /** DB record version */
  __v?: number;
  page?: _Id;
  creator?: _Id;
  revision?: _Id;
  /** comment */
  comment?: string;
  /** comment position */
  commentPosition?: number;
  /** date created at */
  createdAt?: string;
}

/**
 * provider
 */
export type UpdatePostProvider = (typeof UpdatePostProvider)[keyof typeof UpdatePostProvider];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdatePostProvider = {
  slack: 'slack',
} as const;

/**
 * UpdatePost
 */
export interface UpdatePost {
  /** update post ID */
  _id?: string;
  /** DB record version */
  __v?: number;
  /** path pattern */
  pathPattern?: string;
  /** patternPrefix prefix */
  patternPrefix?: string;
  /** path */
  patternPrefix2?: string;
  /** channel */
  channel?: string;
  /** provider */
  provider?: UpdatePostProvider;
  creator?: User;
  /** date created at */
  createdAt?: string;
}

export type ElasticsearchResultMeta = {
  /** Time Elasticsearch took to execute a search(milliseconds) */
  took?: number;
  /** Number of documents matching search criteria */
  total?: number;
  /** Actual array length of search results */
  results?: number;
};

/**
 * Elasticsearch result v1
 */
export interface ElasticsearchResult {
  meta?: ElasticsearchResultMeta;
}

/**
 * Tags
 */
export type Tags = Name[];

/**
 * Tag
 */
export interface Tag {
  /** tag ID */
  _id?: string;
  /** tag name */
  name?: string;
  /** Count of tagged pages */
  count?: number;
}

/**
 * User
 */
export interface User {
  /** record version */
  __v?: number;
  /** user ID */
  _id?: string;
  /** language */
  lang?: string;
  /** status */
  status?: number;
  /** whether the admin */
  admin?: boolean;
  /** E-Mail address */
  email?: string;
  /** username */
  username?: string;
  /** full name */
  name?: string;
  /** date created at */
  createdAt?: string;
}

/**
 * Attachment
 */
export interface Attachment {
  /** attachment ID */
  _id?: string;
  /** attachment version */
  __v?: number;
  /** file format in MIME */
  fileFormat?: string;
  /** file name */
  fileName?: string;
  /** original file name */
  originalName?: string;
  creator?: User;
  /** page ID attached at */
  page?: string;
  /** date created at */
  createdAt?: string;
  /** file size */
  fileSize?: number;
  /** attachment URL */
  url?: string;
  /** file path proxied */
  filePathProxied?: string;
  /** download path proxied */
  downloadPathProxied?: string;
}

/**
 * Attachment
 */
export interface AttachmentProfile {
  /** attachment ID */
  id?: string;
  /** attachment ID */
  _id?: string;
  /** attachment version */
  __v?: number;
  /** file format in MIME */
  fileFormat?: string;
  /** file name */
  fileName?: string;
  /** original file name */
  originalName?: string;
  creator?: _Id;
  /** page ID attached at */
  page?: string;
  /** date created at */
  createdAt?: string;
  /** file size */
  fileSize?: number;
  /** file path proxied */
  filePathProxied?: string;
  /** download path proxied */
  downloadPathProxied?: string;
}

export type ErrorV3Stack = { [key: string]: unknown };

export type ErrorV3Args = { [key: string]: unknown };

/**
 * Error for APIv3
 */
export interface ErrorV3 {
  message?: string;
  code?: string;
  stack?: ErrorV3Stack;
  args?: ErrorV3Args;
}

/**
 * extend data
 */
export type PageExtended = { [key: string]: unknown };

/**
 * status
 */
export type PageStatus = (typeof PageStatus)[keyof typeof PageStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PageStatus = {
  wip: 'wip',
  published: 'published',
  deleted: 'deleted',
  deprecated: 'deprecated',
} as const;

/**
 * Page
 */
export interface Page {
  /** page ID */
  _id?: string;
  /** DB record version */
  __v?: number;
  /** count of comments */
  commentCount?: number;
  /** date created at */
  createdAt?: string;
  creator?: User;
  /** extend data */
  extended?: PageExtended;
  /** grant */
  grant?: number;
  /** granted users */
  grantedUsers?: string[];
  lastUpdateUser?: User;
  /** granted users */
  liker?: string[];
  /** page path */
  path?: string;
  /** page revision */
  revision?: string;
  /** granted users */
  seenUsers?: string[];
  /** status */
  status?: PageStatus;
  /** date updated at */
  updatedAt?: string;
}

export type PaginateResultDocsItem = { [key: string]: unknown };

/**
 * PaginateResult
 */
export interface PaginateResult {
  /** Array of documents */
  docs?: PaginateResultDocsItem[];
  /** Total number of documents in collection that match a query */
  totalDocs?: number;
  /** Limit that was used */
  limit?: number;
  /** Availability of prev page. */
  hasPrevPage?: number;
  /** Availability of next page. */
  hasNextPage?: number;
  /** Current page number */
  page?: number;
  /** Total number of pages. */
  totalPages?: number;
  /** Only if specified or default page/offset values were used */
  offset?: number;
  /** Previous page number if available or NULL */
  prefPage?: number;
  /** Next page number if available or NULL */
  nextPage?: number;
  /** The starting sl. number of first document. */
  pagingCounter?: number;
  /** Object of pagination meta data (Default false). */
  meta?: number;
}

export type V1PaginateResultMeta = {
  /** Total number of documents in collection that match a query */
  total?: number;
  /** Limit that was used */
  limit?: number;
  /** Only if specified or default page/offset values were used */
  offset?: number;
};

/**
 * Object of pagination meta data.
 */
export type V1PaginateResultData = { [key: string]: unknown };

/**
 * Paginate result v1
 */
export interface V1PaginateResult {
  meta?: V1PaginateResultMeta;
  /** Object of pagination meta data. */
  data?: V1PaginateResultData;
}

/**
 * Revision
 */
export interface Revision {
  /** revision ID */
  _id?: string;
  /** DB record version */
  __v?: number;
  author?: _Id;
  /** content body */
  body?: string;
  /** format */
  format?: string;
  /** path */
  path?: string;
  /** date created at */
  createdAt?: string;
}

/**
 * Response v1
 */
export interface V1Response {
  /** API is succeeded */
  ok?: boolean;
}

/**
 * Forbidden
 */
export type N403Response = void;

/**
 * Internal Server Error
 */
export type N500Response = void;

export type GetCommentsParams = {
  page_id?: _Id;
  revision_id?: _Id;
};

export type GetComments200 = {
  ok?: Ok;
  comments?: Comment[];
};

export type AddCommentBodyCommentForm = {
  page_id?: _Id;
  revision_id?: _Id;
  comment?: Comment;
  comment_position?: CommentPosition;
};

export type AddCommentBody = {
  commentForm: AddCommentBodyCommentForm;
};

export type AddComment200 = {
  ok?: Ok;
  comment?: Comment;
};

export type UpdateCommentBodyFormCommentForm = {
  page_id?: _Id;
  revision_id?: _Id;
  comment_id?: _Id;
  comment?: Comment;
};

export type UpdateCommentBodyForm = {
  commentForm?: UpdateCommentBodyFormCommentForm;
};

export type UpdateCommentBody = {
  form: UpdateCommentBodyForm;
};

export type UpdateComment200 = {
  ok?: Ok;
  comment?: Comment;
};

export type RemoveCommentBody = {
  comment_id: _Id;
};

export type RemoveComment200 = {
  ok?: Ok;
  comment?: Comment;
};

export type PostLoginBodyLoginForm = {
  username?: string;
  password?: string;
};

export type PostLoginBody = {
  loginForm?: PostLoginBodyLoginForm;
};

export type PostLogin200 = {
  redirectTo?: string;
};

export type PostRegisterBodyRegisterForm = {
  name?: string;
  username?: string;
  email?: string;
  password?: string;
};

export type PostRegisterBody = {
  registerForm?: PostRegisterBodyRegisterForm;
};

export type PostRegister200 = {
  redirectTo?: string;
};

export type GetPageTagParams = {
  pageId?: _Id;
};

export type GetPageTag200 = {
  ok?: Ok;
  tags?: Tags;
};

export type GetUpdatePostPageParams = {
  path?: Path;
};

export type GetUpdatePostPage200 = {
  ok?: Ok;
  updatePost?: UpdatePost;
};

export type SearchPagesParams = {
  q: string;
  path?: Path;
  offset?: Offset;
  limit?: Limit;
};

export type SearchPages200 = {
  ok?: Ok;
  meta?: Meta;
  /** total count of pages */
  totalCount?: number;
  /** page list */
  data?: Page[];
};

export type SearchTagsParams = {
  /**
   * keyword to search
   */
  q?: string;
};

export type SearchTags200 = {
  ok?: Ok;
  tags?: Tags;
};

export type UpdateTagBody = {
  pageId?: _Id;
  revisionId?: _Id;
  tags?: Tags;
};

export type UpdateTag200 = {
  ok?: Ok;
  tags?: Tags;
};

export type ListTagsParams = {
  limit?: Limit;
  offset?: Offset;
};

export type ListTags200 = {
  ok?: Ok;
  data?: Tag[];
};

export type UploadProfileImageBodyOne = {
  /** attachment data */
  file?: Blob;
  /** user to set profile image */
  user?: string;
};

export type UploadProfileImageBodyTwo = {
  /** attachment data */
  file?: Blob;
  /** user to set profile */
  user?: string;
};

export type UploadProfileImage200 = {
  ok?: Ok;
  attachment?: AttachmentProfile;
};

export type RemoveAttachmentBody = {
  attachment_id: _Id;
};

export type RemoveAttachment200 = {
  ok?: Ok;
};

export type RemoveProfileImageBody = {
  /** user to remove profile image */
  user?: string;
};

export type RemoveProfileImage200 = {
  ok?: Ok;
};
