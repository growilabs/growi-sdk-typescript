/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * GROWI REST API v1
 * OpenAPI spec version: 7.2.6-RC.0
 */
import type {
  AddComment200,
  AddCommentBody,
  GetComments200,
  GetCommentsParams,
  GetPageTag200,
  GetPageTagParams,
  GetUpdatePostPage200,
  GetUpdatePostPageParams,
  ListTags200,
  ListTagsParams,
  PostLogin200,
  PostLoginBody,
  PostRegister200,
  PostRegisterBody,
  RemoveAttachment200,
  RemoveAttachmentBody,
  RemoveComment200,
  RemoveCommentBody,
  RemoveProfileImage200,
  RemoveProfileImageBody,
  SearchPages200,
  SearchPagesParams,
  SearchTags200,
  SearchTagsParams,
  UpdateComment200,
  UpdateCommentBody,
  UpdateTag200,
  UpdateTagBody,
  UploadProfileImage200,
  UploadProfileImageBodyOne,
  UploadProfileImageBodyTwo,
} from './index.schemas.js';

import { customInstance } from '../../utils/axios-instance.js';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getGrowirestapiv1 = () => {
  /**
   * Get comments of the page of the revision
   * @summary /comments.get
   */
  const getComments = (params?: GetCommentsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetComments200>({ url: `/comments.get`, method: 'GET', params }, options);
  };

  /**
   * Post comment for the page
   * @summary /comments.add
   */
  const addComment = (addCommentBody: AddCommentBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<AddComment200>(
      { url: `/comments.add`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: addCommentBody },
      options,
    );
  };

  /**
   * Update comment dody
   * @summary /comments.update
   */
  const updateComment = (updateCommentBody: UpdateCommentBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateComment200>(
      { url: `/comments.update`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: updateCommentBody },
      options,
    );
  };

  /**
   * Remove specified comment
   * @summary /comments.remove
   */
  const removeComment = (removeCommentBody: RemoveCommentBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<RemoveComment200>(
      { url: `/comments.remove`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: removeCommentBody },
      options,
    );
  };

  /**
   * @summary /login
   */
  const postLogin = (postLoginBody: PostLoginBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostLogin200>({ url: `/login`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postLoginBody }, options);
  };

  /**
   * @summary /register
   */
  const postRegister = (postRegisterBody: PostRegisterBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostRegister200>(
      { url: `/register`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postRegisterBody },
      options,
    );
  };

  /**
   * Get page tag
   * @summary /pages.getPageTag
   */
  const getPageTag = (params?: GetPageTagParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageTag200>({ url: `/pages.getPageTag`, method: 'GET', params }, options);
  };

  /**
   * Get UpdatePost setting list
   * @summary /pages.updatePost
   */
  const getUpdatePostPage = (params?: GetUpdatePostPageParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUpdatePostPage200>({ url: `/pages.updatePost`, method: 'GET', params }, options);
  };

  /**
   * Search pages
   * @summary /search
   */
  const searchPages = (params: SearchPagesParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<SearchPages200>({ url: `/search`, method: 'GET', params }, options);
  };

  /**
   * Search tags
   * @summary /tags.search
   */
  const searchTags = (params?: SearchTagsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<SearchTags200>({ url: `/tags.search`, method: 'GET', params }, options);
  };

  /**
   * Update tag
   * @summary /tags.update
   */
  const updateTag = (updateTagBody: UpdateTagBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateTag200>({ url: `/tags.update`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: updateTagBody }, options);
  };

  /**
   * Get tags
   * @summary /tags.list
   */
  const listTags = (params?: ListTagsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ListTags200>({ url: `/tags.list`, method: 'GET', params }, options);
  };

  /**
   * @summary /user-activation/{token}
   */
  const getUserActivationToken = (token: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<string>({ url: `/user-activation/${token}`, method: 'GET' }, options);
  };

  /**
   * Upload profile image
   * @summary /attachments.uploadProfileImage
   */
  const uploadProfileImage = (
    uploadProfileImageBody: UploadProfileImageBodyOne | UploadProfileImageBodyTwo,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<UploadProfileImage200>({ url: `/attachments.uploadProfileImage`, method: 'POST', data: uploadProfileImageBody }, options);
  };

  /**
   * Remove attachment
   * @summary /attachments.remove
   */
  const removeAttachment = (removeAttachmentBody: RemoveAttachmentBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<RemoveAttachment200>(
      { url: `/attachments.remove`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: removeAttachmentBody },
      options,
    );
  };

  /**
   * Remove profile image
   * @summary /attachments.removeProfileImage
   */
  const removeProfileImage = (removeProfileImageBody: RemoveProfileImageBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<RemoveProfileImage200>(
      { url: `/attachments.removeProfileImage`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: removeProfileImageBody },
      options,
    );
  };

  return {
    getComments,
    addComment,
    updateComment,
    removeComment,
    postLogin,
    postRegister,
    getPageTag,
    getUpdatePostPage,
    searchPages,
    searchTags,
    updateTag,
    listTags,
    getUserActivationToken,
    uploadProfileImage,
    removeAttachment,
    removeProfileImage,
  };
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type GetCommentsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv1>['getComments']>>>;
export type AddCommentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv1>['addComment']>>>;
export type UpdateCommentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv1>['updateComment']>>>;
export type RemoveCommentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv1>['removeComment']>>>;
export type PostLoginResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv1>['postLogin']>>>;
export type PostRegisterResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv1>['postRegister']>>>;
export type GetPageTagResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv1>['getPageTag']>>>;
export type GetUpdatePostPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv1>['getUpdatePostPage']>>>;
export type SearchPagesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv1>['searchPages']>>>;
export type SearchTagsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv1>['searchTags']>>>;
export type UpdateTagResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv1>['updateTag']>>>;
export type ListTagsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv1>['listTags']>>>;
export type GetUserActivationTokenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv1>['getUserActivationToken']>>>;
export type UploadProfileImageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv1>['uploadProfileImage']>>>;
export type RemoveAttachmentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv1>['removeAttachment']>>>;
export type RemoveProfileImageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv1>['removeProfileImage']>>>;
