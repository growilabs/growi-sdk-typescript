/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * GROWI REST API v3
 * OpenAPI spec version: 7.2.6-RC.0
 */
import type {
  ActivityResponse,
  AppSettingPutParams,
  AttachmentPaginateResult,
  BookmarkInfo,
  BookmarkParams,
  Bookmarks,
  BotType,
  CustomizeCss,
  CustomizeFunction,
  CustomizeHighlight,
  CustomizeLayout,
  CustomizeLogo,
  CustomizeNoscript,
  CustomizePresentation,
  CustomizeScript,
  CustomizeSidebar,
  CustomizeTheme,
  CustomizeTitle,
  DeleteAllForShareLinks200,
  DeleteAllShareLinksForSecuritySetting200,
  DeleteBookmarkFolderById200,
  DeleteEmptyTrashForPages200,
  DeleteExportByFileName200,
  DeleteExternalUserGroupsById200,
  DeleteExternalUserGroupsByIdParams,
  DeleteRemoveByIdForPlugins200,
  DeleteRemoveByIdForUsers200,
  DeleteRemoveByIdForUsersExternalAccounts200,
  DeleteShareLinksParams,
  DeleteSlackAppIntegrationsByIdForSlackIntegrationSettings200,
  DeleteUserGroupsById200,
  DeleteUserGroupsByIdParams,
  DeleteUsersByUsernameByIdForUserGroups200,
  DisassociateUser,
  FileImportResponse,
  FileUploadSettingParams,
  GeneralSetting,
  GetActivityParams,
  GetAdminHome200,
  GetAllShareLinksForSecuritySetting200,
  GetAncestorsChildrenForPageListing200,
  GetAncestorsChildrenForPageListingParams,
  GetAncestorsForExternalUserGroups200,
  GetAncestorsForExternalUserGroupsParams,
  GetAncestorsForUserGroups200,
  GetAncestorsForUserGroupsParams,
  GetAppSettings200,
  GetApplicableGrantForPage200,
  GetApplicableGrantForPageParams,
  GetAttachmentById200,
  GetAuthenticationForSecuritySetting200,
  GetChildrenForExternalUserGroups200,
  GetChildrenForExternalUserGroupsParams,
  GetChildrenForPageListing200,
  GetChildrenForPageListingParams,
  GetChildrenForUserGroups200,
  GetChildrenForUserGroupsParams,
  GetCollectionsForMongo200,
  GetCustomizeSetting200,
  GetEditorSettingsForPersonalSetting200,
  GetExistForPage200,
  GetExistForPageParams,
  GetExistPathsForPage200,
  GetExistPathsForPageParams,
  GetExternalAccountsForPersonalSetting200,
  GetExternalAccountsForUsers200,
  GetExternalAccountsForUsersParams,
  GetExternalUserGroupRelations200,
  GetExternalUserGroupRelationsByIdForExternalUserGroups200,
  GetExternalUserGroupRelationsParams,
  GetExternalUserGroups200,
  GetExternalUserGroupsById200,
  GetExternalUserGroupsParams,
  GetFilesForG2gTransfer200,
  GetGlobalNotificationByIdForNotificationSetting200,
  GetGrantDataForPage200,
  GetGrantDataForPageParams,
  GetGrowiInfoForG2gTransfer200,
  GetHealthcheck200,
  GetHealthcheckParams,
  GetImport200,
  GetInAppNotificationSettingsForPersonalSetting200,
  GetIndicesForSearch200,
  GetInfoForBookmarksParams,
  GetInfoForPageListing200,
  GetInfoForPageListingParams,
  GetIsEnabledForQuestionnaire200,
  GetIsPasswordSetForPersonalSetting200,
  GetLimitForAttachment200,
  GetLimitForAttachmentParams,
  GetListByUserIdForBookmarkFolder200,
  GetListForAttachmentParams,
  GetListForInAppNotificationParams,
  GetListForPages200,
  GetListForPagesParams,
  GetListForRevisions200,
  GetListForRevisionsParams,
  GetListForUsers200,
  GetListForUsersParams,
  GetMarkdownSetting200,
  GetNonUserRelatedGroupsGrantedForPage200,
  GetNonUserRelatedGroupsGrantedForPageParams,
  GetNotificationSetting200,
  GetOrdersForQuestionnaire200,
  GetPageParams,
  GetPagesByIdForUserGroups200,
  GetPersonalSetting200,
  GetPluginTemplatesByLocaleByTemplateIdByReposIdByOrganizationIdForTemplates200,
  GetPresetTemplatesByLocaleByTemplateIdForTemplates200,
  GetRecentById200,
  GetRecentForPagesParams,
  GetRevisionsById200,
  GetRevisionsByIdParams,
  GetRootForPageListing200,
  GetSecuritySetting200,
  GetSelectableChildGroups200,
  GetSelectableChildGroupsParams,
  GetSelectableParentGroups200,
  GetSelectableParentGroupsParams,
  GetShareLinks200,
  GetShareLinksParams,
  GetSlackIntegrationLegacySetting200,
  GetSlackIntegrationSettings200,
  GetStatusForExport200,
  GetStatusForImport200,
  GetStatusForInAppNotification200,
  GetSubordinatedListForPages200,
  GetSubordinatedListForPagesParams,
  GetSupportedCommandsForSlackIntegration200,
  GetSyncSettingsForExternalUserGroupsKeycloak200,
  GetSyncSettingsForExternalUserGroupsLdap200,
  GetTemplates200,
  GetTemplatesParams,
  GetThemeForCustomizeSetting200,
  GetUnrelatedUsersByIdForUserGroups200,
  GetUnrelatedUsersByIdForUserGroupsParams,
  GetUserGroupRelations200,
  GetUserGroupRelationsByIdForUserGroups200,
  GetUserGroups200,
  GetUserGroupsById200,
  GetUserGroupsParams,
  GetUsernamesForUsers200,
  GetUsernamesForUsersParams,
  GetUsers200,
  GetUsersByIdForUserGroups200,
  GetUsersParams,
  GetV5MigrationStatusForPages200,
  GetYjsDataByPageId200,
  GitHubOAuthSetting,
  GlobalNotification,
  GlobalNotificationParams,
  GoogleOAuthSetting,
  InAppNotificationListResponse,
  IndentParams,
  LdapAuthSetting,
  LikeParams,
  LineBreakParams,
  LocalSetting,
  NotifyForPageGrant,
  OidcAuthSetting,
  Page,
  PageInfo,
  PageParams,
  PersonalSettings,
  PostAddBookmarkToFolderForBookmarkFolder200,
  PostAddBookmarkToFolderForBookmarkFolderBody,
  PostAnswerForQuestionnaireProactive200,
  PostAnswerForQuestionnaireProactiveBody,
  PostAttachment200,
  PostAttachmentBodyOne,
  PostAttachmentBodyTwo,
  PostAttachmentForG2gTransfer200,
  PostAttachmentForG2gTransferBody,
  PostBookmarkFolder200,
  PostBookmarkFolderBody,
  PostCommandsForSlackIntegrationBody,
  PostCommandsForSlackIntegrationProxiedBody,
  PostCompleteRegistration200,
  PostCompleteRegistrationBody,
  PostConvertPagesByPathForPages200,
  PostConvertPagesByPathForPagesBody,
  PostDeleteForPages200,
  PostDeleteForPagesBody,
  PostDuplicateForPages200,
  PostDuplicateForPagesBody,
  PostEventsForSlackIntegration200,
  PostEventsForSlackIntegrationBody,
  PostEventsForSlackIntegrationProxied200,
  PostEventsForSlackIntegrationProxiedBody,
  PostExport200,
  PostExportBody,
  PostForgotPassword200,
  PostForgotPasswordBody,
  PostG2gTransfer200,
  PostG2gTransferBody,
  PostGenerateKeyForG2gTransfer200,
  PostGenerateKeyForG2gTransferBody,
  PostGlobalNotificationForNotificationSetting200,
  PostImportBody,
  PostInstaller200,
  PostInstallerBody,
  PostInteractionsForSlackIntegrationBody,
  PostInteractionsForSlackIntegrationProxiedBody,
  PostInviteForUsers200,
  PostInviteForUsersParams,
  PostInvited200,
  PostInvitedBody,
  PostLegacyPagesMigrationForPages200,
  PostLegacyPagesMigrationForPagesBody,
  PostLogin200,
  PostLoginBody,
  PostMaintenanceModeForAppSettings200,
  PostMaintenanceModeForAppSettingsBody,
  PostOpenForInAppNotification200,
  PostOpenForInAppNotificationBody,
  PostPage201,
  PostPageBody,
  PostPlugins200,
  PostPluginsBody,
  PostRegister200,
  PostRegisterBody,
  PostRelationTestByIdForSlackIntegrationSettingsSlackAppIntegrationsBody,
  PostRenameForPages200,
  PostRenameForPagesBody,
  PostResumeRenameForPages200,
  PostResumeRenameForPagesBody,
  PostShareLinksParams,
  PostSlackAppIntegrationsForSlackIntegrationSettings200,
  PostSmtpTestForAppSettings200,
  PostTestForSlackIntegrationSettingsWithoutProxyBody,
  PostTransferForG2gTransfer200,
  PostTransferForG2gTransferBody,
  PostUploadForImportBody,
  PostUserGroups200,
  PostUserGroupsBody,
  PostUserNotificationForNotificationSetting200,
  PostUsersByUsernameByIdForUserGroups200,
  PostV5SchemaMigrationForAppSettings200,
  PostVerifyForSlackIntegrationProxied200,
  PostVerifyForSlackIntegrationProxiedBody,
  PutActivateByIdForPlugins200,
  PutActivateByIdForUsers200,
  PutAnswerForQuestionnaire201,
  PutAnswerForQuestionnaire204,
  PutAnswerForQuestionnaireBody,
  PutApiTokenForPersonalSetting200,
  PutAppSettingForAppSettings200,
  PutAssociateLdapForPersonalSetting200,
  PutAssociateLdapForPersonalSettingBody,
  PutBookmarkFolder200,
  PutBookmarkFolderBody,
  PutBookmarks200,
  PutContentWidthByPageId200,
  PutContentWidthByPageIdBody,
  PutCustomizeCssForCustomizeSetting200,
  PutCustomizeLogoForCustomizeSetting200,
  PutCustomizeNoscriptForCustomizeSetting200,
  PutCustomizeScriptForCustomizeSetting200,
  PutCustomizeTitleForCustomizeSetting200,
  PutDeactivateByIdForUsers200,
  PutDenyForQuestionnaire201,
  PutDenyForQuestionnaire204,
  PutDenyForQuestionnaireBody,
  PutDisassociateLdapForPersonalSetting200,
  PutEditorSettingsForPersonalSetting200,
  PutEditorSettingsForPersonalSettingBody,
  PutEnabledByIdForNotificationSettingGlobalNotification200,
  PutEnabledByIdForNotificationSettingGlobalNotificationBody,
  PutEnabledForSecuritySettingAuthentication200,
  PutEnabledForSecuritySettingAuthenticationBody,
  PutExternalUserGroupsById200,
  PutExternalUserGroupsByIdBody,
  PutFileUploadSettingsForAppSettings200,
  PutForgotPassword200,
  PutForgotPasswordBody,
  PutFunctionForCustomizeSetting200,
  PutGithubOauthForSecuritySetting200,
  PutGlobalNotificationByIdForNotificationSetting200,
  PutGoogleOauthForSecuritySetting200,
  PutGrantAdminByIdForUsers200,
  PutGrantByPageIdBody,
  PutGrantReadOnlyByIdForUsers200,
  PutHighlightForCustomizeSetting200,
  PutImageTypeForPersonalSetting200,
  PutImageTypeForPersonalSettingBody,
  PutInAppNotificationSettingsForPersonalSetting200,
  PutInAppNotificationSettingsForPersonalSettingBody,
  PutIndentForMarkdownSetting200,
  PutIndicesForSearch200,
  PutIndicesForSearchBody,
  PutLayoutForCustomizeSetting200,
  PutLdapForSecuritySetting200,
  PutLineBreakForMarkdownSetting200,
  PutLocalSettingForSecuritySetting200,
  PutOidcForSecuritySetting200,
  PutPage200,
  PutPageBody,
  PutPasswordForPersonalSetting200,
  PutPasswordForPersonalSettingBody,
  PutPermissionsByIdForSlackIntegrationSettingsSlackAppIntegrations200,
  PutPermissionsByIdForSlackIntegrationSettingsSlackAppIntegrationsBody,
  PutPersonalSetting200,
  PutPresentationForCustomizeSetting200,
  PutProxyUriForSlackIntegrationSettings200,
  PutProxyUriForSlackIntegrationSettingsBody,
  PutQuestionnaireSettingsForAppSettings200,
  PutQuestionnaireSettingsForPersonalSetting200,
  PutQuestionnaireSettingsForPersonalSettingBody,
  PutRegenerateTokensByIdForSlackIntegrationSettingsSlackAppIntegrations200,
  PutResetPasswordEmailForUsersBody,
  PutResetPasswordForUsers200,
  PutResetPasswordForUsersBody,
  PutRevokeAdminByIdForUsers200,
  PutRevokeReadOnlyByIdForUsers200,
  PutSamlForSecuritySetting200,
  PutSendInvitationEmailForUsers200,
  PutSendInvitationEmailForUsersBody,
  PutShareLinkSettingForSecuritySetting200,
  PutSidebarForCustomizeSetting200,
  PutSiteUrlSettingForAppSettings200,
  PutSkipForQuestionnaire201,
  PutSkipForQuestionnaire204,
  PutSkipForQuestionnaireBody,
  PutSlackIntegrationLegacySetting200,
  PutSlackIntegrationLegacySettingBody,
  PutSmtpSettingForAppSettings200,
  PutSubscribeForPageBody,
  PutSyncForExternalUserGroupsKeycloak202,
  PutSyncForExternalUserGroupsLdap202,
  PutSyncLatestRevisionBodyToYjsDraftByPageId200,
  PutSyncLatestRevisionBodyToYjsDraftByPageIdBody,
  PutSyncSettingsForExternalUserGroupsKeycloak204,
  PutSyncSettingsForExternalUserGroupsKeycloakBody,
  PutSyncSettingsForExternalUserGroupsLdap204,
  PutSyncSettingsForExternalUserGroupsLdapBody,
  PutThemeForCustomizeSetting200,
  PutUpdateBookmarkForBookmarkFolder200,
  PutUpdateBookmarkForBookmarkFolderBody,
  PutUpdateImageUrlCacheForUsers200,
  PutUpdateImageUrlCacheForUsersBody,
  PutUpdatePermissionsForSlackIntegrationSettingsWithoutProxyBody,
  PutUpdateSettingsForSlackIntegrationSettingsWithoutProxyBody,
  PutUploadBrandLogoForCustomizeSetting200,
  PutUploadBrandLogoForCustomizeSettingBody,
  PutUserGroupsById200,
  PutUserGroupsByIdBody,
  PutUserUiSettings200,
  PutUserUiSettingsBody,
  QuestionnaireSettingParams,
  SamlAuthSetting,
  SesSettingParams,
  SesSettingResponseParams,
  ShareLinkSetting,
  ShareLinkSimple,
  SiteUrlSettingParams,
  SmtpSettingParams,
  StatisticsUserResponse,
  SyncStatus,
  UserNotification,
  UserNotificationParams,
  XssParams,
} from './index.schemas.js';

import { customInstance } from '../../utils/axios-instance.js';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getGrowirestapiv3 = () => {
  /**
   * Get user group relations
   * @summary /external-user-group-relations
   */
  const getExternalUserGroupRelations = (params?: GetExternalUserGroupRelationsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalUserGroupRelations200>({ url: `/external-user-group-relations`, method: 'GET', params }, options);
  };

  /**
   * @summary /external-user-groups
   */
  const getExternalUserGroups = (params?: GetExternalUserGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalUserGroups200>({ url: `/external-user-groups`, method: 'GET', params }, options);
  };

  /**
   * @summary /external-user-groups/ancestors
   */
  const getAncestorsForExternalUserGroups = (params: GetAncestorsForExternalUserGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAncestorsForExternalUserGroups200>({ url: `/external-user-groups/ancestors`, method: 'GET', params }, options);
  };

  /**
   * @summary /external-user-groups/children
   */
  const getChildrenForExternalUserGroups = (params?: GetChildrenForExternalUserGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetChildrenForExternalUserGroups200>({ url: `/external-user-groups/children`, method: 'GET', params }, options);
  };

  /**
   * @summary /external-user-groups/{id}
   */
  const getExternalUserGroupsById = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalUserGroupsById200>({ url: `/external-user-groups/${id}`, method: 'GET' }, options);
  };

  /**
   * @summary /external-user-groups/{id}
   */
  const deleteExternalUserGroupsById = (id: string, params: DeleteExternalUserGroupsByIdParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteExternalUserGroupsById200>({ url: `/external-user-groups/${id}`, method: 'DELETE', params }, options);
  };

  /**
   * @summary /external-user-groups/{id}
   */
  const putExternalUserGroupsById = (
    id: string,
    putExternalUserGroupsByIdBody: PutExternalUserGroupsByIdBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutExternalUserGroupsById200>(
      { url: `/external-user-groups/${id}`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putExternalUserGroupsByIdBody },
      options,
    );
  };

  /**
   * @summary /external-user-groups/{id}/external-user-group-relations
   */
  const getExternalUserGroupRelationsByIdForExternalUserGroups = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalUserGroupRelationsByIdForExternalUserGroups200>(
      { url: `/external-user-groups/${id}/external-user-group-relations`, method: 'GET' },
      options,
    );
  };

  /**
   * @summary Get LDAP sync settings
   */
  const getSyncSettingsForExternalUserGroupsLdap = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSyncSettingsForExternalUserGroupsLdap200>({ url: `/external-user-groups/ldap/sync-settings`, method: 'GET' }, options);
  };

  /**
   * @summary Update LDAP sync settings
   */
  const putSyncSettingsForExternalUserGroupsLdap = (
    putSyncSettingsForExternalUserGroupsLdapBody: PutSyncSettingsForExternalUserGroupsLdapBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutSyncSettingsForExternalUserGroupsLdap204>(
      {
        url: `/external-user-groups/ldap/sync-settings`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putSyncSettingsForExternalUserGroupsLdapBody,
      },
      options,
    );
  };

  /**
   * @summary Get Keycloak sync settings
   */
  const getSyncSettingsForExternalUserGroupsKeycloak = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSyncSettingsForExternalUserGroupsKeycloak200>({ url: `/external-user-groups/keycloak/sync-settings`, method: 'GET' }, options);
  };

  /**
   * @summary /external-user-groups/keycloak/sync-settings
   */
  const putSyncSettingsForExternalUserGroupsKeycloak = (
    putSyncSettingsForExternalUserGroupsKeycloakBody: PutSyncSettingsForExternalUserGroupsKeycloakBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutSyncSettingsForExternalUserGroupsKeycloak204>(
      {
        url: `/external-user-groups/keycloak/sync-settings`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putSyncSettingsForExternalUserGroupsKeycloakBody,
      },
      options,
    );
  };

  /**
   * @summary Start LDAP sync process
   */
  const putSyncForExternalUserGroupsLdap = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSyncForExternalUserGroupsLdap202>({ url: `/external-user-groups/ldap/sync`, method: 'PUT' }, options);
  };

  /**
   * @summary /external-user-groups/keycloak/sync
   */
  const putSyncForExternalUserGroupsKeycloak = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSyncForExternalUserGroupsKeycloak202>({ url: `/external-user-groups/keycloak/sync`, method: 'PUT' }, options);
  };

  /**
   * @summary /external-user-groups/ldap/sync-status
   */
  const getSyncStatusForExternalUserGroupsLdap = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<SyncStatus>({ url: `/external-user-groups/ldap/sync-status`, method: 'GET' }, options);
  };

  /**
   * Get questionnaire orders
   * @summary /questionnaire/orders
   */
  const getOrdersForQuestionnaire = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetOrdersForQuestionnaire200>({ url: `/questionnaire/orders`, method: 'GET' }, options);
  };

  /**
   * Get questionnaire is enabled
   * @summary /questionnaire/is-enabled
   */
  const getIsEnabledForQuestionnaire = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetIsEnabledForQuestionnaire200>({ url: `/questionnaire/is-enabled`, method: 'GET' }, options);
  };

  /**
   * Post proactive questionnaire answer
   * @summary /questionnaire/proactive/answer
   */
  const postAnswerForQuestionnaireProactive = (
    postAnswerForQuestionnaireProactiveBody: PostAnswerForQuestionnaireProactiveBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostAnswerForQuestionnaireProactive200>(
      {
        url: `/questionnaire/proactive/answer`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postAnswerForQuestionnaireProactiveBody,
      },
      options,
    );
  };

  /**
   * Post questionnaire answer
   * @summary /questionnaire/answer
   */
  const putAnswerForQuestionnaire = (putAnswerForQuestionnaireBody: PutAnswerForQuestionnaireBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutAnswerForQuestionnaire201 | PutAnswerForQuestionnaire204>(
      { url: `/questionnaire/answer`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putAnswerForQuestionnaireBody },
      options,
    );
  };

  /**
   * Skip questionnaire
   * @summary /questionnaire/skip
   */
  const putSkipForQuestionnaire = (putSkipForQuestionnaireBody: PutSkipForQuestionnaireBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSkipForQuestionnaire201 | PutSkipForQuestionnaire204>(
      { url: `/questionnaire/skip`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putSkipForQuestionnaireBody },
      options,
    );
  };

  /**
   * Deny questionnaire
   * @summary /questionnaire/deny
   */
  const putDenyForQuestionnaire = (putDenyForQuestionnaireBody: PutDenyForQuestionnaireBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutDenyForQuestionnaire201 | PutDenyForQuestionnaire204>(
      { url: `/questionnaire/deny`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putDenyForQuestionnaireBody },
      options,
    );
  };

  /**
   * Get all templates
   * @summary /templates
   */
  const getTemplates = (params?: GetTemplatesParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetTemplates200>({ url: `/templates`, method: 'GET', params }, options);
  };

  /**
   * Get a preset template
   * @summary /templates/preset-templates/{templateId}/{locale}
   */
  const getPresetTemplatesByLocaleByTemplateIdForTemplates = (templateId: string, locale: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPresetTemplatesByLocaleByTemplateIdForTemplates200>(
      { url: `/templates/preset-templates/${templateId}/${locale}`, method: 'GET' },
      options,
    );
  };

  /**
   * Get a plugin template
   * @summary /templates/plugin-templates/{organizationId}/{reposId}/{templateId}/{locale}
   */
  const getPluginTemplatesByLocaleByTemplateIdByReposIdByOrganizationIdForTemplates = (
    organizationId: string,
    reposId: string,
    templateId: string,
    locale: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<GetPluginTemplatesByLocaleByTemplateIdByReposIdByOrganizationIdForTemplates200>(
      { url: `/templates/plugin-templates/${organizationId}/${reposId}/${templateId}/${locale}`, method: 'GET' },
      options,
    );
  };

  /**
   * Install a plugin
   * @summary /plugins
   */
  const postPlugins = (postPluginsBody: PostPluginsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostPlugins200>({ url: `/plugins`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postPluginsBody }, options);
  };

  /**
   * Activate a plugin
   * @summary /plugins/{id}/activate
   */
  const putActivateByIdForPlugins = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutActivateByIdForPlugins200>({ url: `/plugins/${id}/activate`, method: 'PUT' }, options);
  };

  /**
   * Remove a plugin
   * @summary /plugins/{id}/remove
   */
  const deleteRemoveByIdForPlugins = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteRemoveByIdForPlugins200>({ url: `/plugins/${id}/remove`, method: 'DELETE' }, options);
  };

  /**
   * @summary /activity
   */
  const getActivity = (params?: GetActivityParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ActivityResponse>({ url: `/activity`, method: 'GET', params }, options);
  };

  /**
   * Get adminHome parameters
   * @summary /admin-home
   */
  const getAdminHome = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAdminHome200>({ url: `/admin-home/`, method: 'GET' }, options);
  };

  /**
   * get app setting params
   * @summary /app-settings
   */
  const getAppSettings = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAppSettings200>({ url: `/app-settings`, method: 'GET' }, options);
  };

  /**
   * Update app setting
   * @summary /app-settings/app-setting
   */
  const putAppSettingForAppSettings = (appSettingPutParams: AppSettingPutParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutAppSettingForAppSettings200>(
      { url: `/app-settings/app-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: appSettingPutParams },
      options,
    );
  };

  /**
   * Update site url setting
   * @summary /app-settings/site-url-setting
   */
  const putSiteUrlSettingForAppSettings = (siteUrlSettingParams: SiteUrlSettingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSiteUrlSettingForAppSettings200>(
      { url: `/app-settings/site-url-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: siteUrlSettingParams },
      options,
    );
  };

  /**
   * Update smtp setting
   * @summary /app-settings/smtp-setting
   */
  const putSmtpSettingForAppSettings = (smtpSettingParams: SmtpSettingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSmtpSettingForAppSettings200>(
      { url: `/app-settings/smtp-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: smtpSettingParams },
      options,
    );
  };

  /**
   * Send test mail for smtp
   * @summary /app-settings/smtp-setting
   */
  const postSmtpTestForAppSettings = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostSmtpTestForAppSettings200>({ url: `/app-settings/smtp-test`, method: 'POST' }, options);
  };

  /**
   * Update ses setting
   * @summary /app-settings/ses-setting
   */
  const putSesSettingForAppSettings = (sesSettingParams: SesSettingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<SesSettingResponseParams>(
      { url: `/app-settings/ses-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: sesSettingParams },
      options,
    );
  };

  /**
   * Update fileUploadSetting
   * @summary /app-settings/file-upload-setting
   */
  const putFileUploadSettingsForAppSettings = (fileUploadSettingParams: FileUploadSettingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutFileUploadSettingsForAppSettings200>(
      { url: `/app-settings/file-upload-settings`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: fileUploadSettingParams },
      options,
    );
  };

  /**
   * Update QuestionnaireSetting
   * @summary /app-settings/questionnaire-settings
   */
  const putQuestionnaireSettingsForAppSettings = (questionnaireSettingParams: QuestionnaireSettingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutQuestionnaireSettingsForAppSettings200>(
      { url: `/app-settings/questionnaire-settings`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: questionnaireSettingParams },
      options,
    );
  };

  /**
   * Update V5SchemaMigration
   * @summary AccessToken supported.
   */
  const postV5SchemaMigrationForAppSettings = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostV5SchemaMigrationForAppSettings200>({ url: `/app-settings/v5-schema-migration`, method: 'POST' }, options);
  };

  /**
   * Update MaintenanceMode
   * @summary AccessToken supported.
   */
  const postMaintenanceModeForAppSettings = (
    postMaintenanceModeForAppSettingsBody: PostMaintenanceModeForAppSettingsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostMaintenanceModeForAppSettings200>(
      { url: `/app-settings/maintenance-mode`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postMaintenanceModeForAppSettingsBody },
      options,
    );
  };

  /**
   * Get attachment list
   */
  const getListForAttachment = (params: GetListForAttachmentParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<AttachmentPaginateResult>({ url: `/attachment/list`, method: 'GET', params }, options);
  };

  /**
   * Get available capacity of uploaded file with GridFS
   * @summary /attachment/limit
   */
  const getLimitForAttachment = (params: GetLimitForAttachmentParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetLimitForAttachment200>({ url: `/attachment/limit`, method: 'GET', params }, options);
  };

  /**
   * Add attachment to the page
   * @summary /attachment
   */
  const postAttachment = (postAttachmentBody: PostAttachmentBodyOne | PostAttachmentBodyTwo, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostAttachment200>({ url: `/attachment`, method: 'POST', data: postAttachmentBody }, options);
  };

  /**
   * Get attachment
   */
  const getAttachmentById = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAttachmentById200>({ url: `/attachment/${id}`, method: 'GET' }, options);
  };

  /**
   * Create a new bookmark folder
   * @summary Create bookmark folder
   */
  const postBookmarkFolder = (postBookmarkFolderBody: PostBookmarkFolderBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostBookmarkFolder200>(
      { url: `/bookmark-folder`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postBookmarkFolderBody },
      options,
    );
  };

  /**
   * Update a bookmark folder
   * @summary Update bookmark folder
   */
  const putBookmarkFolder = (putBookmarkFolderBody: PutBookmarkFolderBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutBookmarkFolder200>(
      { url: `/bookmark-folder`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putBookmarkFolderBody },
      options,
    );
  };

  /**
   * List bookmark folders of a user
   * @summary List bookmark folders of a user
   */
  const getListByUserIdForBookmarkFolder = (userId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetListByUserIdForBookmarkFolder200>({ url: `/bookmark-folder/list/${userId}`, method: 'GET' }, options);
  };

  /**
   * Delete a bookmark folder and its children
   * @summary Delete bookmark folder
   */
  const deleteBookmarkFolderById = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteBookmarkFolderById200>({ url: `/bookmark-folder/${id}`, method: 'DELETE' }, options);
  };

  /**
   * Update a bookmark folder
   * @summary Update bookmark folder
   */
  const postAddBookmarkToFolderForBookmarkFolder = (
    postAddBookmarkToFolderForBookmarkFolderBody: PostAddBookmarkToFolderForBookmarkFolderBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostAddBookmarkToFolderForBookmarkFolder200>(
      {
        url: `/bookmark-folder/add-bookmark-to-folder`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postAddBookmarkToFolderForBookmarkFolderBody,
      },
      options,
    );
  };

  /**
   * Update a bookmark in a folder
   * @summary Update bookmark in folder
   */
  const putUpdateBookmarkForBookmarkFolder = (
    putUpdateBookmarkForBookmarkFolderBody: PutUpdateBookmarkForBookmarkFolderBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutUpdateBookmarkForBookmarkFolder200>(
      { url: `/bookmark-folder/update-bookmark`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putUpdateBookmarkForBookmarkFolderBody },
      options,
    );
  };

  /**
   * Get bookmarked info
   * @summary /bookmarks/info
   */
  const getInfoForBookmarks = (params?: GetInfoForBookmarksParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<BookmarkInfo>({ url: `/bookmarks/info`, method: 'GET', params }, options);
  };

  /**
   * Get my bookmarked status
   * @summary /bookmarks/{userId}
   */
  const getBookmarksByUserId = (userId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Bookmarks>({ url: `/bookmarks/${userId}`, method: 'GET' }, options);
  };

  /**
   * Update bookmarked status
   * @summary /bookmarks
   */
  const putBookmarks = (bookmarkParams: BookmarkParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutBookmarks200>(
      { url: `/bookmarks`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: bookmarkParams },
      options,
    );
  };

  /**
   * Get customize parameters
   * @summary /customize-setting
   */
  const getCustomizeSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetCustomizeSetting200>({ url: `/customize-setting`, method: 'GET' }, options);
  };

  /**
   * Get layout
   * @summary /customize-setting/layout
   */
  const getLayoutForCustomizeSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CustomizeLayout>({ url: `/customize-setting/layout`, method: 'GET' }, options);
  };

  /**
   * Update layout
   * @summary /customize-setting/layout
   */
  const putLayoutForCustomizeSetting = (customizeLayout: CustomizeLayout, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutLayoutForCustomizeSetting200>(
      { url: `/customize-setting/layout`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeLayout },
      options,
    );
  };

  /**
   * Get theme
   * @summary /customize-setting/theme
   */
  const getThemeForCustomizeSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetThemeForCustomizeSetting200>({ url: `/customize-setting/theme`, method: 'GET' }, options);
  };

  /**
   * Update theme
   * @summary /customize-setting/theme
   */
  const putThemeForCustomizeSetting = (customizeTheme: CustomizeTheme, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutThemeForCustomizeSetting200>(
      { url: `/customize-setting/theme`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeTheme },
      options,
    );
  };

  /**
   * Get sidebar
   * @summary /customize-setting/sidebar
   */
  const getSidebarForCustomizeSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CustomizeSidebar>({ url: `/customize-setting/sidebar`, method: 'GET' }, options);
  };

  /**
   * Update sidebar
   * @summary /customize-setting/sidebar
   */
  const putSidebarForCustomizeSetting = (customizeSidebar: CustomizeSidebar, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSidebarForCustomizeSetting200>(
      { url: `/customize-setting/sidebar`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeSidebar },
      options,
    );
  };

  /**
   * Update function
   * @summary /customize-setting/function
   */
  const putFunctionForCustomizeSetting = (customizeFunction: CustomizeFunction, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutFunctionForCustomizeSetting200>(
      { url: `/customize-setting/function`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeFunction },
      options,
    );
  };

  /**
   * Update presentation
   * @summary /customize-setting/presentation
   */
  const putPresentationForCustomizeSetting = (customizePresentation: CustomizePresentation, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutPresentationForCustomizeSetting200>(
      { url: `/customize-setting/presentation`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizePresentation },
      options,
    );
  };

  /**
   * Update highlight
   * @summary /customize-setting/highlight
   */
  const putHighlightForCustomizeSetting = (customizeHighlight: CustomizeHighlight, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutHighlightForCustomizeSetting200>(
      { url: `/customize-setting/highlight`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeHighlight },
      options,
    );
  };

  /**
   * Update title
   * @summary /customize-setting/customizeTitle
   */
  const putCustomizeTitleForCustomizeSetting = (customizeTitle: CustomizeTitle, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutCustomizeTitleForCustomizeSetting200>(
      { url: `/customize-setting/customizeTitle`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeTitle },
      options,
    );
  };

  /**
   * Update noscript
   * @summary /customize-setting/customize-noscript
   */
  const putCustomizeNoscriptForCustomizeSetting = (customizeNoscript: CustomizeNoscript, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutCustomizeNoscriptForCustomizeSetting200>(
      { url: `/customize-setting/customize-noscript`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeNoscript },
      options,
    );
  };

  /**
   * Update customize css
   * @summary /customize-setting/customize-css
   */
  const putCustomizeCssForCustomizeSetting = (customizeCss: CustomizeCss, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutCustomizeCssForCustomizeSetting200>(
      { url: `/customize-setting/customize-css`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeCss },
      options,
    );
  };

  /**
   * Update customize script
   * @summary /customize-setting/customize-script
   */
  const putCustomizeScriptForCustomizeSetting = (customizeScript: CustomizeScript, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutCustomizeScriptForCustomizeSetting200>(
      { url: `/customize-setting/customize-script`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeScript },
      options,
    );
  };

  /**
   * Update customize logo
   * @summary /customize-setting/customize-logo
   */
  const putCustomizeLogoForCustomizeSetting = (customizeLogo: CustomizeLogo, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutCustomizeLogoForCustomizeSetting200>(
      { url: `/customize-setting/customize-logo`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeLogo },
      options,
    );
  };

  /**
   * Upload brand logo
   * @summary /customize-setting/upload-brand-logo
   */
  const putUploadBrandLogoForCustomizeSetting = (
    putUploadBrandLogoForCustomizeSettingBody: PutUploadBrandLogoForCustomizeSettingBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    const formData = new FormData();
    if (putUploadBrandLogoForCustomizeSettingBody.file !== undefined) {
      formData.append(`file`, putUploadBrandLogoForCustomizeSettingBody.file);
    }

    return customInstance<PutUploadBrandLogoForCustomizeSetting200>(
      { url: `/customize-setting/upload-brand-logo`, method: 'PUT', headers: { 'Content-Type': 'multipart/form-data' }, data: formData },
      options,
    );
  };

  /**
   * Delete brand logo
   * @summary /customize-setting/delete-brand-logo
   */
  const deleteDeleteBrandLogoForCustomizeSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<unknown>({ url: `/customize-setting/delete-brand-logo`, method: 'DELETE' }, options);
  };

  /**
   * get properties of stored zip files for export
   * @summary /export/status
   */
  const getStatusForExport = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetStatusForExport200>({ url: `/export/status`, method: 'GET' }, options);
  };

  /**
   * generate zipped jsons for collections
   * @summary /export
   */
  const postExport = (postExportBody: PostExportBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostExport200>({ url: `/export`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postExportBody }, options);
  };

  /**
   * delete the file
   * @summary /export/{fileName}
   */
  const deleteExportByFileName = (fileName: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteExportByFileName200>({ url: `/export/${fileName}`, method: 'DELETE' }, options);
  };

  /**
   * @summary Request password reset
   */
  const postForgotPassword = (postForgotPasswordBody: PostForgotPasswordBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostForgotPassword200>(
      { url: `/forgot-password`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postForgotPasswordBody },
      options,
    );
  };

  /**
   * @summary Reset password
   */
  const putForgotPassword = (putForgotPasswordBody: PutForgotPasswordBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutForgotPassword200>(
      { url: `/forgot-password`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putForgotPasswordBody },
      options,
    );
  };

  /**
   * @summary /g2g-transfer/files
   */
  const getFilesForG2gTransfer = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetFilesForG2gTransfer200>({ url: `/g2g-transfer/files`, method: 'GET' }, options);
  };

  /**
   * @summary /g2g-transfer
   */
  const postG2gTransfer = (postG2gTransferBody: PostG2gTransferBody, options?: SecondParameter<typeof customInstance>) => {
    const formData = new FormData();
    if (postG2gTransferBody.file !== undefined) {
      formData.append(`file`, postG2gTransferBody.file);
    }
    if (postG2gTransferBody.collections !== undefined) {
      postG2gTransferBody.collections.forEach((value) => formData.append(`collections`, value));
    }
    if (postG2gTransferBody.optionsMap !== undefined) {
      formData.append(`optionsMap`, JSON.stringify(postG2gTransferBody.optionsMap));
    }
    if (postG2gTransferBody.operatorUserId !== undefined) {
      formData.append(`operatorUserId`, postG2gTransferBody.operatorUserId);
    }
    if (postG2gTransferBody.uploadConfigs !== undefined) {
      formData.append(`uploadConfigs`, JSON.stringify(postG2gTransferBody.uploadConfigs));
    }

    return customInstance<PostG2gTransfer200>(
      { url: `/g2g-transfer`, method: 'POST', headers: { 'Content-Type': 'multipart/form-data' }, data: formData },
      options,
    );
  };

  /**
   * @summary /g2g-transfer/attachment
   */
  const postAttachmentForG2gTransfer = (
    postAttachmentForG2gTransferBody: PostAttachmentForG2gTransferBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    const formData = new FormData();
    if (postAttachmentForG2gTransferBody.file !== undefined) {
      formData.append(`file`, postAttachmentForG2gTransferBody.file);
    }
    if (postAttachmentForG2gTransferBody.attachmentMetadata !== undefined) {
      formData.append(`attachmentMetadata`, JSON.stringify(postAttachmentForG2gTransferBody.attachmentMetadata));
    }

    return customInstance<PostAttachmentForG2gTransfer200>(
      { url: `/g2g-transfer/attachment`, method: 'POST', headers: { 'Content-Type': 'multipart/form-data' }, data: formData },
      options,
    );
  };

  /**
   * @summary /g2g-transfer/growi-info
   */
  const getGrowiInfoForG2gTransfer = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetGrowiInfoForG2gTransfer200>({ url: `/g2g-transfer/growi-info`, method: 'GET' }, options);
  };

  /**
   * @summary /g2g-transfer/generate-key
   */
  const postGenerateKeyForG2gTransfer = (
    postGenerateKeyForG2gTransferBody: PostGenerateKeyForG2gTransferBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostGenerateKeyForG2gTransfer200>(
      { url: `/g2g-transfer/generate-key`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postGenerateKeyForG2gTransferBody },
      options,
    );
  };

  /**
   * @summary /g2g-transfer/transfer
   */
  const postTransferForG2gTransfer = (postTransferForG2gTransferBody: PostTransferForG2gTransferBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostTransferForG2gTransfer200>(
      { url: `/g2g-transfer/transfer`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postTransferForG2gTransferBody },
      options,
    );
  };

  /**
   * Check whether the server is healthy or not
   * @summary /healthcheck
   */
  const getHealthcheck = (params?: GetHealthcheckParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetHealthcheck200>({ url: `/healthcheck`, method: 'GET', params }, options);
  };

  /**
   * Get import settings params
   * @summary /import
   */
  const getImport = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetImport200>({ url: `/import`, method: 'GET' }, options);
  };

  /**
   * import a collection from a zipped json
   * @summary /import
   */
  const postImport = (postImportBody: PostImportBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/import`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postImportBody }, options);
  };

  /**
   * Get properties of stored zip files for import
   * @summary /import/status
   */
  const getStatusForImport = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetStatusForImport200>({ url: `/import/status`, method: 'GET' }, options);
  };

  /**
   * upload a zip file
   * @summary /import/upload
   */
  const postUploadForImport = (postUploadForImportBody: PostUploadForImportBody, options?: SecondParameter<typeof customInstance>) => {
    const formData = new FormData();
    if (postUploadForImportBody.file !== undefined) {
      formData.append(`file`, postUploadForImportBody.file);
    }

    return customInstance<FileImportResponse>(
      { url: `/import/upload`, method: 'POST', headers: { 'Content-Type': 'multipart/form-data' }, data: formData },
      options,
    );
  };

  /**
   * Delete all zip files
   * @summary /import/all
   */
  const deleteAllForImport = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/import/all`, method: 'DELETE' }, options);
  };

  /**
   * Get the list of in-app notifications
   * @summary /in-app-notification/list
   */
  const getListForInAppNotification = (params?: GetListForInAppNotificationParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<InAppNotificationListResponse>({ url: `/in-app-notification/list`, method: 'GET', params }, options);
  };

  /**
   * Get the status of in-app notifications
   * @summary /in-app-notification/status
   */
  const getStatusForInAppNotification = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetStatusForInAppNotification200>({ url: `/in-app-notification/status`, method: 'GET' }, options);
  };

  /**
   * Open the in-app notification
   * @summary /in-app-notification/open
   */
  const postOpenForInAppNotification = (
    postOpenForInAppNotificationBody: PostOpenForInAppNotificationBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostOpenForInAppNotification200>(
      { url: `/in-app-notification/open`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postOpenForInAppNotificationBody },
      options,
    );
  };

  /**
   * Open all in-app notifications
   * @summary /in-app-notification/all-statuses-open
   */
  const putAllStatusesOpenForInAppNotification = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/in-app-notification/all-statuses-open`, method: 'PUT' }, options);
  };

  /**
   * Install GROWI
   * @summary /installer
   */
  const postInstaller = (postInstallerBody: PostInstallerBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostInstaller200>(
      { url: `/installer`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postInstallerBody },
      options,
    );
  };

  /**
   * Activate invited user
   * @summary /invited
   */
  const postInvited = (postInvitedBody: PostInvitedBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostInvited200>({ url: `/invited`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postInvitedBody }, options);
  };

  /**
   * Logout the currently authenticated user
   * @summary Logout user
   */
  const postLogout = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/logout`, method: 'POST' }, options);
  };

  /**
   * @summary Get markdown parameters
   */
  const getMarkdownSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetMarkdownSetting200>({ url: `/markdown-setting`, method: 'GET' }, options);
  };

  /**
   * @summary Update lineBreak setting
   */
  const putLineBreakForMarkdownSetting = (lineBreakParams: LineBreakParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutLineBreakForMarkdownSetting200>(
      { url: `/markdown-setting/lineBreak`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: lineBreakParams },
      options,
    );
  };

  /**
   * @summary Update indent setting
   */
  const putIndentForMarkdownSetting = (indentParams: IndentParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutIndentForMarkdownSetting200>(
      { url: `/markdown-setting/indent`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: indentParams },
      options,
    );
  };

  /**
   * Update xss
   * @summary Update XSS setting
   */
  const putXssForMarkdownSetting = (xssParams: XssParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<XssParams>(
      { url: `/markdown-setting/xss`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: xssParams },
      options,
    );
  };

  /**
   * get mongodb collections names
   * @summary /mongo/collections
   */
  const getCollectionsForMongo = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetCollectionsForMongo200>({ url: `/mongo/collections`, method: 'GET' }, options);
  };

  /**
   * Get notification paramators
   */
  const getNotificationSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetNotificationSetting200>({ url: `/notification-setting/`, method: 'GET' }, options);
  };

  /**
   * add user notification setting
   */
  const postUserNotificationForNotificationSetting = (userNotificationParams: UserNotificationParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostUserNotificationForNotificationSetting200>(
      { url: `/notification-setting/user-notification`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: userNotificationParams },
      options,
    );
  };

  /**
   * delete user trigger notification pattern
   */
  const deleteUserNotificationByIdForNotificationSetting = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UserNotification>({ url: `/notification-setting/user-notification/${id}`, method: 'DELETE' }, options);
  };

  /**
   * get global notification setting
   */
  const getGlobalNotificationByIdForNotificationSetting = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetGlobalNotificationByIdForNotificationSetting200>(
      { url: `/notification-setting/global-notification/${id}`, method: 'GET' },
      options,
    );
  };

  /**
   * update global notification
   */
  const putGlobalNotificationByIdForNotificationSetting = (
    id: string,
    globalNotificationParams: GlobalNotificationParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutGlobalNotificationByIdForNotificationSetting200>(
      {
        url: `/notification-setting/global-notification/${id}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: globalNotificationParams,
      },
      options,
    );
  };

  /**
   * delete global notification pattern
   */
  const deleteGlobalNotificationByIdForNotificationSetting = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GlobalNotification>({ url: `/notification-setting/global-notification/${id}`, method: 'DELETE' }, options);
  };

  /**
   * add global notification
   */
  const postGlobalNotificationForNotificationSetting = (
    globalNotificationParams: GlobalNotificationParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostGlobalNotificationForNotificationSetting200>(
      { url: `/notification-setting/global-notification`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: globalNotificationParams },
      options,
    );
  };

  /**
   * Update settings for notify for page grant
   */
  const putNotifyForPageGrantForNotificationSetting = (notifyForPageGrant: NotifyForPageGrant, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<NotifyForPageGrant>(
      { url: `/notification-setting/notify-for-page-grant`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: notifyForPageGrant },
      options,
    );
  };

  /**
   * toggle enabled global notification
   */
  const putEnabledByIdForNotificationSettingGlobalNotification = (
    id: string,
    putEnabledByIdForNotificationSettingGlobalNotificationBody: PutEnabledByIdForNotificationSettingGlobalNotificationBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutEnabledByIdForNotificationSettingGlobalNotification200>(
      {
        url: `/notification-setting/global-notification/${id}/enabled`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putEnabledByIdForNotificationSettingGlobalNotificationBody,
      },
      options,
    );
  };

  /**
   * Get the root page
   * @summary /page-listing/root
   */
  const getRootForPageListing = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetRootForPageListing200>({ url: `/page-listing/root`, method: 'GET' }, options);
  };

  /**
   * Get the ancestors and children of a page
   * @summary /page-listing/ancestors-children
   */
  const getAncestorsChildrenForPageListing = (params: GetAncestorsChildrenForPageListingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAncestorsChildrenForPageListing200>({ url: `/page-listing/ancestors-children`, method: 'GET', params }, options);
  };

  /**
   * Get the children of a page
   * @summary /page-listing/children
   */
  const getChildrenForPageListing = (params?: GetChildrenForPageListingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetChildrenForPageListing200>({ url: `/page-listing/children`, method: 'GET', params }, options);
  };

  /**
   * Get the information of a page
   * @summary /page-listing/info
   */
  const getInfoForPageListing = (params?: GetInfoForPageListingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetInfoForPageListing200>({ url: `/page-listing/info`, method: 'GET', params }, options);
  };

  /**
   * get page by pagePath or pageId
   * @summary Get page
   */
  const getPage = (params?: GetPageParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>({ url: `/page`, method: 'GET', params }, options);
  };

  /**
   * Create page
   * @summary Create page
   */
  const postPage = (postPageBody: PostPageBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostPage201>({ url: `/page`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postPageBody }, options);
  };

  /**
   * Update page
   */
  const putPage = (putPageBody: PutPageBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutPage200>({ url: `/page`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putPageBody }, options);
  };

  /**
   * Check if a page exists at the specified path
   * @summary Check if page exists
   */
  const getExistForPage = (params: GetExistForPageParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExistForPage200>({ url: `/page/exist`, method: 'GET', params }, options);
  };

  /**
   * Update liked status
   * @summary Get page likes
   */
  const putLikesForPage = (likeParams: LikeParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>({ url: `/page/likes`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: likeParams }, options);
  };

  /**
   * Retrieve current page info
   * @summary Get page info
   */
  const getInfoForPage = (pageParams: PageParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PageInfo>({ url: `/page/info`, method: 'GET', headers: { 'Content-Type': 'application/json' } }, options);
  };

  /**
   * Retrieve current page's grant data
   * @summary Get page grant data
   */
  const getGrantDataForPage = (params?: GetGrantDataForPageParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetGrantDataForPage200>({ url: `/page/grant-data`, method: 'GET', params }, options);
  };

  /**
   * Check if non-user related groups are granted access to a specific page or its closest ancestor
   * @summary Check if non-user related groups are granted page access
   */
  const getNonUserRelatedGroupsGrantedForPage = (params: GetNonUserRelatedGroupsGrantedForPageParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetNonUserRelatedGroupsGrantedForPage200>({ url: `/page/non-user-related-groups-granted`, method: 'GET', params }, options);
  };

  /**
   * Retrieve applicable grant data for a specific page
   * @summary Get applicable grant data
   */
  const getApplicableGrantForPage = (params: GetApplicableGrantForPageParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetApplicableGrantForPage200>({ url: `/page/applicable-grant`, method: 'GET', params }, options);
  };

  /**
   * Update the grant of a specific page
   * @summary Update page grant
   */
  const putGrantByPageId = (pageId: string, putGrantByPageIdBody: PutGrantByPageIdBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>(
      { url: `/${pageId}/grant`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putGrantByPageIdBody },
      options,
    );
  };

  /**
   * return page's markdown
   */
  const getExportByPageIdForPage = (pageId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/page/export/${pageId}`, method: 'GET' }, options);
  };

  /**
   * Get already exist paths
   * @summary Get already exist paths
   */
  const getExistPathsForPage = (params?: GetExistPathsForPageParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExistPathsForPage200>({ url: `/page/exist-paths`, method: 'GET', params }, options);
  };

  /**
   * Update subscription status
   * @summary Update subscription status
   */
  const putSubscribeForPage = (putSubscribeForPageBody: PutSubscribeForPageBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>(
      { url: `/page/subscribe`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putSubscribeForPageBody },
      options,
    );
  };

  /**
   * Update the content width setting for a specific page
   * @summary Update content width
   */
  const putContentWidthByPageId = (
    pageId: string,
    putContentWidthByPageIdBody: PutContentWidthByPageIdBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutContentWidthByPageId200>(
      { url: `/${pageId}/content-width`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putContentWidthByPageIdBody },
      options,
    );
  };

  /**
   * Publish a specific page
   * @summary Publish page
   */
  const putPublishByPageId = (pageId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>({ url: `/${pageId}/publish`, method: 'PUT' }, options);
  };

  /**
   * Unpublish a specific page
   * @summary Unpublish page
   */
  const putUnpublishByPageId = (pageId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>({ url: `/${pageId}/unpublish`, method: 'PUT' }, options);
  };

  /**
   * Retrieve Yjs data for a specific page
   * @summary Get Yjs data
   */
  const getYjsDataByPageId = (pageId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetYjsDataByPageId200>({ url: `/${pageId}/yjs-data`, method: 'GET' }, options);
  };

  /**
   * Sync the latest revision body to the Yjs draft for a specific page
   * @summary Sync latest revision body to Yjs draft
   */
  const putSyncLatestRevisionBodyToYjsDraftByPageId = (
    pageId: string,
    putSyncLatestRevisionBodyToYjsDraftByPageIdBody: PutSyncLatestRevisionBodyToYjsDraftByPageIdBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutSyncLatestRevisionBodyToYjsDraftByPageId200>(
      {
        url: `/${pageId}/sync-latest-revision-body-to-yjs-draft`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putSyncLatestRevisionBodyToYjsDraftByPageIdBody,
      },
      options,
    );
  };

  /**
   * Get recently updated pages
   */
  const getRecentForPages = (params?: GetRecentForPagesParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/pages/recent`, method: 'GET', params }, options);
  };

  /**
   * Rename page
   */
  const postRenameForPages = (postRenameForPagesBody: PostRenameForPagesBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostRenameForPages200>(
      { url: `/pages/rename`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postRenameForPagesBody },
      options,
    );
  };

  /**
   * Resume rename page operation
   */
  const postResumeRenameForPages = (postResumeRenameForPagesBody: PostResumeRenameForPagesBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostResumeRenameForPages200>(
      { url: `/pages/resume-rename`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postResumeRenameForPagesBody },
      options,
    );
  };

  /**
   * empty trash
   */
  const deleteEmptyTrashForPages = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteEmptyTrashForPages200>({ url: `/pages/empty-trash`, method: 'DELETE' }, options);
  };

  /**
   * Get list of pages
   */
  const getListForPages = (params?: GetListForPagesParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetListForPages200>({ url: `/pages/list`, method: 'GET', params }, options);
  };

  /**
   * Duplicate page
   */
  const postDuplicateForPages = (postDuplicateForPagesBody: PostDuplicateForPagesBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostDuplicateForPages200>(
      { url: `/pages/duplicate`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postDuplicateForPagesBody },
      options,
    );
  };

  /**
   * Get subordinated pages
   */
  const getSubordinatedListForPages = (params?: GetSubordinatedListForPagesParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSubordinatedListForPages200>({ url: `/pages/subordinated-list`, method: 'GET', params }, options);
  };

  /**
   * Delete pages
   */
  const postDeleteForPages = (postDeleteForPagesBody: PostDeleteForPagesBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostDeleteForPages200>(
      { url: `/pages/delete`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postDeleteForPagesBody },
      options,
    );
  };

  /**
   * Convert pages by path
   */
  const postConvertPagesByPathForPages = (
    postConvertPagesByPathForPagesBody: PostConvertPagesByPathForPagesBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostConvertPagesByPathForPages200>(
      { url: `/pages/convert-pages-by-path`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postConvertPagesByPathForPagesBody },
      options,
    );
  };

  /**
   * Migrate legacy pages
   */
  const postLegacyPagesMigrationForPages = (
    postLegacyPagesMigrationForPagesBody: PostLegacyPagesMigrationForPagesBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostLegacyPagesMigrationForPages200>(
      { url: `/pages/legacy-pages-migration`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postLegacyPagesMigrationForPagesBody },
      options,
    );
  };

  /**
   * Get V5 migration status
   */
  const getV5MigrationStatusForPages = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetV5MigrationStatusForPages200>({ url: `/pages/v5-migration-status`, method: 'GET' }, options);
  };

  /**
   * Get personal parameters
   * @summary /personal-setting
   */
  const getPersonalSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPersonalSetting200>({ url: `/personal-setting`, method: 'GET' }, options);
  };

  /**
   * Update personal setting
   * @summary /personal-setting
   */
  const putPersonalSetting = (personalSettings: PersonalSettings, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutPersonalSetting200>(
      { url: `/personal-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: personalSettings },
      options,
    );
  };

  /**
   * Get whether a password has been set
   * @summary /personal-setting
   */
  const getIsPasswordSetForPersonalSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetIsPasswordSetForPersonalSetting200>({ url: `/personal-setting/is-password-set`, method: 'GET' }, options);
  };

  /**
   * Update user image type
   * @summary /personal-setting/image-type
   */
  const putImageTypeForPersonalSetting = (
    putImageTypeForPersonalSettingBody: PutImageTypeForPersonalSettingBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutImageTypeForPersonalSetting200>(
      { url: `/personal-setting/image-type`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putImageTypeForPersonalSettingBody },
      options,
    );
  };

  /**
   * Get external accounts that linked current user
   * @summary /personal-setting/external-accounts
   */
  const getExternalAccountsForPersonalSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalAccountsForPersonalSetting200>({ url: `/personal-setting/external-accounts`, method: 'GET' }, options);
  };

  /**
   * Update user password
   * @summary /personal-setting/password
   */
  const putPasswordForPersonalSetting = (
    putPasswordForPersonalSettingBody: PutPasswordForPersonalSettingBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutPasswordForPersonalSetting200>(
      { url: `/personal-setting/password`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putPasswordForPersonalSettingBody },
      options,
    );
  };

  /**
   * Update user api token
   * @summary /personal-setting/api-token
   */
  const putApiTokenForPersonalSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutApiTokenForPersonalSetting200>({ url: `/personal-setting/api-token`, method: 'PUT' }, options);
  };

  /**
   * associate Ldap account
   * @summary /personal-setting/associate-ldap
   */
  const putAssociateLdapForPersonalSetting = (
    putAssociateLdapForPersonalSettingBody: PutAssociateLdapForPersonalSettingBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutAssociateLdapForPersonalSetting200>(
      { url: `/personal-setting/associate-ldap`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putAssociateLdapForPersonalSettingBody },
      options,
    );
  };

  /**
   * disassociate Ldap account
   * @summary /personal-setting/disassociate-ldap
   */
  const putDisassociateLdapForPersonalSetting = (disassociateUser: DisassociateUser, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutDisassociateLdapForPersonalSetting200>(
      { url: `/personal-setting/disassociate-ldap`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: disassociateUser },
      options,
    );
  };

  /**
   * Put editor preferences
   * @summary /personal-setting/editor-settings
   */
  const putEditorSettingsForPersonalSetting = (
    putEditorSettingsForPersonalSettingBody: PutEditorSettingsForPersonalSettingBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutEditorSettingsForPersonalSetting200>(
      {
        url: `/personal-setting/editor-settings`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putEditorSettingsForPersonalSettingBody,
      },
      options,
    );
  };

  /**
   * Get editor preferences
   * @summary /personal-setting/editor-settings
   */
  const getEditorSettingsForPersonalSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetEditorSettingsForPersonalSetting200>({ url: `/personal-setting/editor-settings`, method: 'GET' }, options);
  };

  /**
   * Put InAppNotificationSettings
   * @summary /personal-setting/in-app-notification-settings
   */
  const putInAppNotificationSettingsForPersonalSetting = (
    putInAppNotificationSettingsForPersonalSettingBody: PutInAppNotificationSettingsForPersonalSettingBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutInAppNotificationSettingsForPersonalSetting200>(
      {
        url: `/personal-setting/in-app-notification-settings`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putInAppNotificationSettingsForPersonalSettingBody,
      },
      options,
    );
  };

  /**
   * Get InAppNotificationSettings
   * @summary personal-setting/in-app-notification-settings
   */
  const getInAppNotificationSettingsForPersonalSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetInAppNotificationSettingsForPersonalSetting200>({ url: `/personal-setting/in-app-notification-settings`, method: 'GET' }, options);
  };

  /**
   * Update the questionnaire settings for the current user
   * @summary /personal-setting/questionnaire-settings
   */
  const putQuestionnaireSettingsForPersonalSetting = (
    putQuestionnaireSettingsForPersonalSettingBody: PutQuestionnaireSettingsForPersonalSettingBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutQuestionnaireSettingsForPersonalSetting200>(
      {
        url: `/personal-setting/questionnaire-settings`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putQuestionnaireSettingsForPersonalSettingBody,
      },
      options,
    );
  };

  /**
   * Get revisions by page id
   */
  const getListForRevisions = (params?: GetListForRevisionsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetListForRevisions200>({ url: `/revisions/list`, method: 'GET', params }, options);
  };

  /**
   * Get one revision by id
   */
  const getRevisionsById = (id: string, params: GetRevisionsByIdParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetRevisionsById200>({ url: `/revisions/${id}`, method: 'GET', params }, options);
  };

  /**
   * Get current status of indices
   * @summary /search/indices
   */
  const getIndicesForSearch = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetIndicesForSearch200>({ url: `/search/indices`, method: 'GET' }, options);
  };

  /**
   * Operate indices
   * @summary /search/indices
   */
  const putIndicesForSearch = (putIndicesForSearchBody: PutIndicesForSearchBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutIndicesForSearch200>(
      { url: `/search/indices`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putIndicesForSearchBody },
      options,
    );
  };

  /**
   * Reconnect to Elasticsearch
   * @summary /search/connection
   */
  const postConnectionForSearch = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/search/connection`, method: 'POST' }, options);
  };

  /**
   * Get security paramators
   */
  const getSecuritySetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSecuritySetting200>({ url: `/security-setting/`, method: 'GET' }, options);
  };

  /**
   * Update authentication isEnabled
   */
  const putEnabledForSecuritySettingAuthentication = (
    putEnabledForSecuritySettingAuthenticationBody: PutEnabledForSecuritySettingAuthenticationBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutEnabledForSecuritySettingAuthentication200>(
      {
        url: `/security-setting/authentication/enabled`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putEnabledForSecuritySettingAuthenticationBody,
      },
      options,
    );
  };

  /**
   * Get setup strategies for passport
   * @summary /security-setting/authentication
   */
  const getAuthenticationForSecuritySetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAuthenticationForSecuritySetting200>({ url: `/security-setting/authentication`, method: 'GET' }, options);
  };

  /**
   * Update GeneralSetting
   * @summary /security-setting/general-setting
   */
  const putGeneralSettingForSecuritySetting = (generalSetting: GeneralSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GeneralSetting>(
      { url: `/security-setting/general-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: generalSetting },
      options,
    );
  };

  /**
   * Update ShareLink Setting
   * @summary /security-setting/share-link-setting
   */
  const putShareLinkSettingForSecuritySetting = (shareLinkSetting: ShareLinkSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutShareLinkSettingForSecuritySetting200>(
      { url: `/security-setting/share-link-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: shareLinkSetting },
      options,
    );
  };

  /**
   * Get All ShareLinks at Share Link Setting
   * @summary /security-setting/all-share-links
   */
  const getAllShareLinksForSecuritySetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAllShareLinksForSecuritySetting200>({ url: `/security-setting/all-share-links`, method: 'GET' }, options);
  };

  /**
   * Delete All ShareLinks at Share Link Setting
   * @summary /security-setting/all-share-links
   */
  const deleteAllShareLinksForSecuritySetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteAllShareLinksForSecuritySetting200>({ url: `/security-setting/all-share-links`, method: 'DELETE' }, options);
  };

  /**
   * Update LocalSetting
   * @summary /security-setting/local-setting
   */
  const putLocalSettingForSecuritySetting = (localSetting: LocalSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutLocalSettingForSecuritySetting200>(
      { url: `/security-setting/local-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: localSetting },
      options,
    );
  };

  /**
   * Update LDAP setting
   * @summary /security-setting/ldap
   */
  const putLdapForSecuritySetting = (ldapAuthSetting: LdapAuthSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutLdapForSecuritySetting200>(
      { url: `/security-setting/ldap`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: ldapAuthSetting },
      options,
    );
  };

  /**
   * Update SAML setting
   * @summary /security-setting/saml
   */
  const putSamlForSecuritySetting = (samlAuthSetting: SamlAuthSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSamlForSecuritySetting200>(
      { url: `/security-setting/saml`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: samlAuthSetting },
      options,
    );
  };

  /**
   * Update OpenID Connect setting
   * @summary /security-setting/oidc
   */
  const putOidcForSecuritySetting = (oidcAuthSetting: OidcAuthSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutOidcForSecuritySetting200>(
      { url: `/security-setting/oidc`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: oidcAuthSetting },
      options,
    );
  };

  /**
   * Update google OAuth
   * @summary /security-setting/google-oauth
   */
  const putGoogleOauthForSecuritySetting = (googleOAuthSetting: GoogleOAuthSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutGoogleOauthForSecuritySetting200>(
      { url: `/security-setting/google-oauth`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: googleOAuthSetting },
      options,
    );
  };

  /**
   * Update github OAuth
   * @summary /security-setting/github-oauth
   */
  const putGithubOauthForSecuritySetting = (gitHubOAuthSetting: GitHubOAuthSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutGithubOauthForSecuritySetting200>(
      { url: `/security-setting/github-oauth`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: gitHubOAuthSetting },
      options,
    );
  };

  /**
   * get share links
   */
  const getShareLinks = (params: GetShareLinksParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetShareLinks200>({ url: `/share-links/`, method: 'GET', params }, options);
  };

  /**
   * Create new share link
   */
  const postShareLinks = (params: PostShareLinksParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ShareLinkSimple>({ url: `/share-links/`, method: 'POST', params }, options);
  };

  /**
   * delete all share links related one page
   * @summary delete all share links related one page
   */
  const deleteShareLinks = (params: DeleteShareLinksParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ShareLinkSimple>({ url: `/share-links/`, method: 'DELETE', params }, options);
  };

  /**
   * delete all share links
   * @summary delete all share links
   */
  const deleteAllForShareLinks = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteAllForShareLinks200>({ url: `/share-links/all`, method: 'DELETE' }, options);
  };

  /**
   * delete one share link related one page
   */
  const deleteShareLinksById = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/share-links/${id}`, method: 'DELETE' }, options);
  };

  /**
   * Get slack configuration setting
   */
  const getSlackIntegrationLegacySetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSlackIntegrationLegacySetting200>({ url: `/slack-integration-legacy-setting/`, method: 'GET' }, options);
  };

  /**
   * Update slack configuration setting
   */
  const putSlackIntegrationLegacySetting = (
    putSlackIntegrationLegacySettingBody: PutSlackIntegrationLegacySettingBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutSlackIntegrationLegacySetting200>(
      { url: `/slack-integration-legacy-setting/`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putSlackIntegrationLegacySettingBody },
      options,
    );
  };

  /**
   * Get current settings and connection statuses.
   * @summary /slack-integration-settings
   */
  const getSlackIntegrationSettings = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSlackIntegrationSettings200>({ url: `/slack-integration-settings/`, method: 'GET' }, options);
  };

  /**
   * Put botType setting.
   * @summary /slack-integration/bot-type
   */
  const putBotTypeForSlackIntegrationSettings = (botType: BotType, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>(
      { url: `/slack-integration-settings/bot-type/`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: botType },
      options,
    );
  };

  /**
   * Delete botType setting.
   * @summary /slack-integration/bot-type
   */
  const deleteBotTypeForSlackIntegration = (botType: BotType, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>(
      { url: `/slack-integration/bot-type/`, method: 'DELETE', headers: { 'Content-Type': 'application/json' }, data: botType },
      options,
    );
  };

  /**
   * Update customBotWithoutProxy setting.
   * @summary /slack-integration-settings/without-proxy/update-settings
   */
  const putUpdateSettingsForSlackIntegrationSettingsWithoutProxy = (
    putUpdateSettingsForSlackIntegrationSettingsWithoutProxyBody: PutUpdateSettingsForSlackIntegrationSettingsWithoutProxyBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/slack-integration-settings/without-proxy/update-settings/`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putUpdateSettingsForSlackIntegrationSettingsWithoutProxyBody,
      },
      options,
    );
  };

  /**
   * Update customBotWithoutProxy permissions.
   * @summary /slack-integration-settings/without-proxy/update-permissions
   */
  const putUpdatePermissionsForSlackIntegrationSettingsWithoutProxy = (
    putUpdatePermissionsForSlackIntegrationSettingsWithoutProxyBody: PutUpdatePermissionsForSlackIntegrationSettingsWithoutProxyBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/slack-integration-settings/without-proxy/update-permissions/`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putUpdatePermissionsForSlackIntegrationSettingsWithoutProxyBody,
      },
      options,
    );
  };

  /**
   * Generate SlackAppIntegrations
   * @summary /slack-integration-settings/slack-app-integrations
   */
  const postSlackAppIntegrationsForSlackIntegrationSettings = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostSlackAppIntegrationsForSlackIntegrationSettings200>(
      { url: `/slack-integration-settings/slack-app-integrations`, method: 'POST' },
      options,
    );
  };

  /**
   * Delete accessTokens
   * @summary /slack-integration-settings/slack-app-integrations/:id
   */
  const deleteSlackAppIntegrationsByIdForSlackIntegrationSettings = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteSlackAppIntegrationsByIdForSlackIntegrationSettings200>(
      { url: `/slack-integration-settings/slack-app-integrations/${id}`, method: 'DELETE' },
      options,
    );
  };

  /**
   * Update proxy uri
   * @summary /slack-integration-settings/proxy-uri
   */
  const putProxyUriForSlackIntegrationSettings = (
    putProxyUriForSlackIntegrationSettingsBody: PutProxyUriForSlackIntegrationSettingsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutProxyUriForSlackIntegrationSettings200>(
      {
        url: `/slack-integration-settings/proxy-uri`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putProxyUriForSlackIntegrationSettingsBody,
      },
      options,
    );
  };

  /**
   * Make SlackAppTokens primary
   * @summary /slack-integration-settings/slack-app-integrations/:id/makeprimary
   */
  const putMakeprimaryByIdForSlackIntegrationSettingsSlackAppIntegrations = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/slack-integration-settings/slack-app-integrations/${id}/makeprimary`, method: 'PUT' }, options);
  };

  /**
   * Regenerate SlackAppTokens
   * @summary /slack-integration-settings/slack-app-integrations/:id/regenerate-tokens
   */
  const putRegenerateTokensByIdForSlackIntegrationSettingsSlackAppIntegrations = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutRegenerateTokensByIdForSlackIntegrationSettingsSlackAppIntegrations200>(
      { url: `/slack-integration-settings/slack-app-integrations/${id}/regenerate-tokens`, method: 'PUT' },
      options,
    );
  };

  /**
   * update supported commands
   * @summary /slack-integration-settings/slack-app-integrations/:id/permissions
   */
  const putPermissionsByIdForSlackIntegrationSettingsSlackAppIntegrations = (
    id: string,
    putPermissionsByIdForSlackIntegrationSettingsSlackAppIntegrationsBody: PutPermissionsByIdForSlackIntegrationSettingsSlackAppIntegrationsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutPermissionsByIdForSlackIntegrationSettingsSlackAppIntegrations200>(
      {
        url: `/slack-integration-settings/slack-app-integrations/${id}/permissions`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putPermissionsByIdForSlackIntegrationSettingsSlackAppIntegrationsBody,
      },
      options,
    );
  };

  /**
   * Delete botType setting.
   * @summary /slack-integration-settings/slack-app-integrations/:id/relation-test
   */
  const postRelationTestByIdForSlackIntegrationSettingsSlackAppIntegrations = (
    id: string,
    postRelationTestByIdForSlackIntegrationSettingsSlackAppIntegrationsBody: PostRelationTestByIdForSlackIntegrationSettingsSlackAppIntegrationsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/slack-integration-settings/slack-app-integrations/${id}/relation-test`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postRelationTestByIdForSlackIntegrationSettingsSlackAppIntegrationsBody,
      },
      options,
    );
  };

  /**
   * Test the connection with slack work space.
   * @summary /slack-integration-settings/without-proxy/test
   */
  const postTestForSlackIntegrationSettingsWithoutProxy = (
    postTestForSlackIntegrationSettingsWithoutProxyBody: PostTestForSlackIntegrationSettingsWithoutProxyBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/slack-integration-settings/without-proxy/test`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postTestForSlackIntegrationSettingsWithoutProxyBody,
      },
      options,
    );
  };

  /**
   * Handle Slack commands
   * @summary /slack-integration/commands
   */
  const postCommandsForSlackIntegration = (
    postCommandsForSlackIntegrationBody: PostCommandsForSlackIntegrationBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<string>(
      { url: `/slack-integration/commands`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postCommandsForSlackIntegrationBody },
      options,
    );
  };

  /**
   * Verify the access token
   * @summary /slack-integration/proxied/verify
   */
  const postVerifyForSlackIntegrationProxied = (
    postVerifyForSlackIntegrationProxiedBody: PostVerifyForSlackIntegrationProxiedBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostVerifyForSlackIntegrationProxied200>(
      {
        url: `/slack-integration/proxied/verify`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postVerifyForSlackIntegrationProxiedBody,
      },
      options,
    );
  };

  /**
   * Handle Slack commands
   * @summary /slack-integration/proxied/commands
   */
  const postCommandsForSlackIntegrationProxied = (
    postCommandsForSlackIntegrationProxiedBody: PostCommandsForSlackIntegrationProxiedBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<string>(
      {
        url: `/slack-integration/proxied/commands`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postCommandsForSlackIntegrationProxiedBody,
      },
      options,
    );
  };

  /**
   * Handle Slack interactions
   * @summary /slack-integration/interactions
   */
  const postInteractionsForSlackIntegration = (
    postInteractionsForSlackIntegrationBody: PostInteractionsForSlackIntegrationBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/slack-integration/interactions`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postInteractionsForSlackIntegrationBody,
      },
      options,
    );
  };

  /**
   * Handle Slack interactions
   * @summary /slack-integration/proxied/interactions
   */
  const postInteractionsForSlackIntegrationProxied = (
    postInteractionsForSlackIntegrationProxiedBody: PostInteractionsForSlackIntegrationProxiedBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/slack-integration/proxied/interactions`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postInteractionsForSlackIntegrationProxiedBody,
      },
      options,
    );
  };

  /**
   * Get supported commands
   * @summary /slack-integration/supported-commands
   */
  const getSupportedCommandsForSlackIntegration = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSupportedCommandsForSlackIntegration200>({ url: `/slack-integration/supported-commands`, method: 'GET' }, options);
  };

  /**
   * Handle Slack events
   * @summary /slack-integration/events
   */
  const postEventsForSlackIntegration = (
    postEventsForSlackIntegrationBody: PostEventsForSlackIntegrationBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostEventsForSlackIntegration200>(
      { url: `/slack-integration/events`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postEventsForSlackIntegrationBody },
      options,
    );
  };

  /**
   * Handle Slack events
   * @summary /slack-integration/proxied/events
   */
  const postEventsForSlackIntegrationProxied = (
    postEventsForSlackIntegrationProxiedBody: PostEventsForSlackIntegrationProxiedBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostEventsForSlackIntegrationProxied200>(
      {
        url: `/slack-integration/proxied/events`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postEventsForSlackIntegrationProxiedBody,
      },
      options,
    );
  };

  /**
   * Get statistics for user
   * @summary /statistics/user
   */
  const getUserForStatistics = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<StatisticsUserResponse>({ url: `/statistics/user`, method: 'GET' }, options);
  };

  /**
   * @summary /complete-registration
   */
  const postCompleteRegistration = (postCompleteRegistrationBody: PostCompleteRegistrationBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostCompleteRegistration200>(
      { url: `/complete-registration`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postCompleteRegistrationBody },
      options,
    );
  };

  /**
   * Gets the user group relations
   * @summary /user-group-relations
   */
  const getUserGroupRelations = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroupRelations200>({ url: `/user-group-relations`, method: 'GET' }, options);
  };

  /**
   * Get usergroups
   * @summary /user-groups
   */
  const getUserGroups = (params?: GetUserGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroups200>({ url: `/user-groups`, method: 'GET', params }, options);
  };

  /**
   * Adds userGroup
   * @summary /user-groups
   */
  const postUserGroups = (postUserGroupsBody: PostUserGroupsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostUserGroups200>(
      { url: `/user-groups`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postUserGroupsBody },
      options,
    );
  };

  /**
   * Get ancestor user groups.
   * @summary /user-groups/ancestors
   */
  const getAncestorsForUserGroups = (params: GetAncestorsForUserGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAncestorsForUserGroups200>({ url: `/user-groups/ancestors`, method: 'GET', params }, options);
  };

  /**
   * Get child user groups
   * @summary /user-groups/children
   */
  const getChildrenForUserGroups = (params?: GetChildrenForUserGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetChildrenForUserGroups200>({ url: `/user-groups/children`, method: 'GET', params }, options);
  };

  /**
   * Get selectable parent UserGroups
   * @summary /selectable-parent-groups
   */
  const getSelectableParentGroups = (params: GetSelectableParentGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSelectableParentGroups200>({ url: `/selectable-parent-groups`, method: 'GET', params }, options);
  };

  /**
   * Get selectable child UserGroups
   * @summary /selectable-child-groups
   */
  const getSelectableChildGroups = (params: GetSelectableChildGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSelectableChildGroups200>({ url: `/selectable-child-groups`, method: 'GET', params }, options);
  };

  /**
   * Get UserGroup from Group ID
   * @summary /user-groups/{id}
   */
  const getUserGroupsById = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroupsById200>({ url: `/user-groups/${id}`, method: 'GET' }, options);
  };

  /**
   * Deletes userGroup
   * @summary /user-groups/{id}
   */
  const deleteUserGroupsById = (id: string, params?: DeleteUserGroupsByIdParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteUserGroupsById200>({ url: `/user-groups/${id}`, method: 'DELETE', params }, options);
  };

  /**
   * Update userGroup
   * @summary /user-groups/{id}
   */
  const putUserGroupsById = (id: string, putUserGroupsByIdBody: PutUserGroupsByIdBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUserGroupsById200>(
      { url: `/user-groups/${id}`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putUserGroupsByIdBody },
      options,
    );
  };

  /**
   * Get users related to the userGroup
   * @summary /user-groups/{id}/users
   */
  const getUsersByIdForUserGroups = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUsersByIdForUserGroups200>({ url: `/user-groups/${id}/users`, method: 'GET' }, options);
  };

  /**
   * Get users unrelated to the userGroup
   * @summary /user-groups/{id}/unrelated-users
   */
  const getUnrelatedUsersByIdForUserGroups = (
    id: string,
    params?: GetUnrelatedUsersByIdForUserGroupsParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<GetUnrelatedUsersByIdForUserGroups200>({ url: `/user-groups/${id}/unrelated-users`, method: 'GET', params }, options);
  };

  /**
   * Add a user to the userGroup
   * @summary /user-groups/{id}/users/{username}
   */
  const postUsersByUsernameByIdForUserGroups = (id: string, username: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostUsersByUsernameByIdForUserGroups200>({ url: `/user-groups/${id}/users/${username}`, method: 'POST' }, options);
  };

  /**
   * remove a user from the userGroup
   * @summary /user-groups/{id}/users/{username}
   */
  const deleteUsersByUsernameByIdForUserGroups = (id: string, username: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteUsersByUsernameByIdForUserGroups200>({ url: `/user-groups/${id}/users/${username}`, method: 'DELETE' }, options);
  };

  /**
   * Get the user group relations for the userGroup
   * @summary /user-groups/{id}/user-group-relations
   */
  const getUserGroupRelationsByIdForUserGroups = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroupRelationsByIdForUserGroups200>({ url: `/user-groups/${id}/user-group-relations`, method: 'GET' }, options);
  };

  /**
   * Get closed pages for the userGroup
   * @summary /user-groups/{id}/pages
   */
  const getPagesByIdForUserGroups = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPagesByIdForUserGroups200>({ url: `/user-groups/${id}/pages`, method: 'GET' }, options);
  };

  /**
   * Update the user's UI settings
   * @summary /user-ui-settings
   */
  const putUserUiSettings = (putUserUiSettingsBody: PutUserUiSettingsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUserUiSettings200>(
      { url: `/user-ui-settings`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putUserUiSettingsBody },
      options,
    );
  };

  /**
   * Select selected columns from users order by asc or desc
   * @summary /users
   */
  const getUsers = (params?: GetUsersParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUsers200>({ url: `/users`, method: 'GET', params }, options);
  };

  /**
   * @summary /usersIdReacent
   */
  const getRecentById = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetRecentById200>({ url: `/${id}/recent`, method: 'GET' }, options);
  };

  /**
   * Create new users and send Emails
   * @summary /users/invite
   */
  const postInviteForUsers = (params?: PostInviteForUsersParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostInviteForUsers200>({ url: `/users/invite`, method: 'POST', params }, options);
  };

  /**
   * Grant user admin
   * @summary /users/{id}/grant-admin
   */
  const putGrantAdminByIdForUsers = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutGrantAdminByIdForUsers200>({ url: `/users/${id}/grant-admin`, method: 'PUT' }, options);
  };

  /**
   * Revoke user admin
   * @summary /users/{id}/revoke-admin
   */
  const putRevokeAdminByIdForUsers = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutRevokeAdminByIdForUsers200>({ url: `/users/${id}/revoke-admin`, method: 'PUT' }, options);
  };

  /**
   * Grant user read only access
   * @summary /users/{id}/grant-read-only
   */
  const putGrantReadOnlyByIdForUsers = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutGrantReadOnlyByIdForUsers200>({ url: `/users/${id}/grant-read-only`, method: 'PUT' }, options);
  };

  /**
   * Revoke user read only access
   * @summary /users/{id}/revoke-read-only
   */
  const putRevokeReadOnlyByIdForUsers = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutRevokeReadOnlyByIdForUsers200>({ url: `/users/${id}/revoke-read-only`, method: 'PUT' }, options);
  };

  /**
   * Activate user
   * @summary /users/{id}/activate
   */
  const putActivateByIdForUsers = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutActivateByIdForUsers200>({ url: `/users/${id}/activate`, method: 'PUT' }, options);
  };

  /**
   * Deactivate user
   * @summary /users/{id}/deactivate
   */
  const putDeactivateByIdForUsers = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutDeactivateByIdForUsers200>({ url: `/users/${id}/deactivate`, method: 'PUT' }, options);
  };

  /**
   * Delete user
   * @summary /users/{id}/remove
   */
  const deleteRemoveByIdForUsers = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteRemoveByIdForUsers200>({ url: `/users/${id}/remove`, method: 'DELETE' }, options);
  };

  /**
   * Get external-account
   * @summary /users/external-accounts
   */
  const getExternalAccountsForUsers = (params?: GetExternalAccountsForUsersParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalAccountsForUsers200>({ url: `/users/external-accounts`, method: 'GET', params }, options);
  };

  /**
   * Delete ExternalAccount
   * @summary /users/external-accounts/{id}/remove
   */
  const deleteRemoveByIdForUsersExternalAccounts = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteRemoveByIdForUsersExternalAccounts200>({ url: `/users/external-accounts/${id}/remove`, method: 'DELETE' }, options);
  };

  /**
   * update imageUrlCache
   * @summary /users/update.imageUrlCache
   */
  const putUpdateImageUrlCacheForUsers = (
    putUpdateImageUrlCacheForUsersBody: PutUpdateImageUrlCacheForUsersBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutUpdateImageUrlCacheForUsers200>(
      { url: `/users/update.imageUrlCache`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putUpdateImageUrlCacheForUsersBody },
      options,
    );
  };

  /**
   * update imageUrlCache
   * @summary /users/reset-password
   */
  const putResetPasswordForUsers = (putResetPasswordForUsersBody: PutResetPasswordForUsersBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutResetPasswordForUsers200>(
      { url: `/users/reset-password`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putResetPasswordForUsersBody },
      options,
    );
  };

  /**
   * send new password email
   * @summary /users/reset-password-email
   */
  const putResetPasswordEmailForUsers = (
    putResetPasswordEmailForUsersBody: PutResetPasswordEmailForUsersBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      { url: `/users/reset-password-email`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putResetPasswordEmailForUsersBody },
      options,
    );
  };

  /**
   * send invitation email
   * @summary /users/send-invitation-email
   */
  const putSendInvitationEmailForUsers = (
    putSendInvitationEmailForUsersBody: PutSendInvitationEmailForUsersBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutSendInvitationEmailForUsers200>(
      { url: `/users/send-invitation-email`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putSendInvitationEmailForUsersBody },
      options,
    );
  };

  /**
   * Get list of users
   * @summary /users/list
   */
  const getListForUsers = (params?: GetListForUsersParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetListForUsers200>({ url: `/users/list`, method: 'GET', params }, options);
  };

  /**
   * Get list of usernames
   * @summary /users/usernames
   */
  const getUsernamesForUsers = (params?: GetUsernamesForUsersParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUsernamesForUsers200>({ url: `/users/usernames`, method: 'GET', params }, options);
  };

  /**
   * @summary /login
   */
  const postLogin = (postLoginBody: PostLoginBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostLogin200>({ url: `/login`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postLoginBody }, options);
  };

  /**
   * @summary /register
   */
  const postRegister = (postRegisterBody: PostRegisterBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostRegister200>(
      { url: `/register`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postRegisterBody },
      options,
    );
  };

  return {
    getExternalUserGroupRelations,
    getExternalUserGroups,
    getAncestorsForExternalUserGroups,
    getChildrenForExternalUserGroups,
    getExternalUserGroupsById,
    deleteExternalUserGroupsById,
    putExternalUserGroupsById,
    getExternalUserGroupRelationsByIdForExternalUserGroups,
    getSyncSettingsForExternalUserGroupsLdap,
    putSyncSettingsForExternalUserGroupsLdap,
    getSyncSettingsForExternalUserGroupsKeycloak,
    putSyncSettingsForExternalUserGroupsKeycloak,
    putSyncForExternalUserGroupsLdap,
    putSyncForExternalUserGroupsKeycloak,
    getSyncStatusForExternalUserGroupsLdap,
    getOrdersForQuestionnaire,
    getIsEnabledForQuestionnaire,
    postAnswerForQuestionnaireProactive,
    putAnswerForQuestionnaire,
    putSkipForQuestionnaire,
    putDenyForQuestionnaire,
    getTemplates,
    getPresetTemplatesByLocaleByTemplateIdForTemplates,
    getPluginTemplatesByLocaleByTemplateIdByReposIdByOrganizationIdForTemplates,
    postPlugins,
    putActivateByIdForPlugins,
    deleteRemoveByIdForPlugins,
    getActivity,
    getAdminHome,
    getAppSettings,
    putAppSettingForAppSettings,
    putSiteUrlSettingForAppSettings,
    putSmtpSettingForAppSettings,
    postSmtpTestForAppSettings,
    putSesSettingForAppSettings,
    putFileUploadSettingsForAppSettings,
    putQuestionnaireSettingsForAppSettings,
    postV5SchemaMigrationForAppSettings,
    postMaintenanceModeForAppSettings,
    getListForAttachment,
    getLimitForAttachment,
    postAttachment,
    getAttachmentById,
    postBookmarkFolder,
    putBookmarkFolder,
    getListByUserIdForBookmarkFolder,
    deleteBookmarkFolderById,
    postAddBookmarkToFolderForBookmarkFolder,
    putUpdateBookmarkForBookmarkFolder,
    getInfoForBookmarks,
    getBookmarksByUserId,
    putBookmarks,
    getCustomizeSetting,
    getLayoutForCustomizeSetting,
    putLayoutForCustomizeSetting,
    getThemeForCustomizeSetting,
    putThemeForCustomizeSetting,
    getSidebarForCustomizeSetting,
    putSidebarForCustomizeSetting,
    putFunctionForCustomizeSetting,
    putPresentationForCustomizeSetting,
    putHighlightForCustomizeSetting,
    putCustomizeTitleForCustomizeSetting,
    putCustomizeNoscriptForCustomizeSetting,
    putCustomizeCssForCustomizeSetting,
    putCustomizeScriptForCustomizeSetting,
    putCustomizeLogoForCustomizeSetting,
    putUploadBrandLogoForCustomizeSetting,
    deleteDeleteBrandLogoForCustomizeSetting,
    getStatusForExport,
    postExport,
    deleteExportByFileName,
    postForgotPassword,
    putForgotPassword,
    getFilesForG2gTransfer,
    postG2gTransfer,
    postAttachmentForG2gTransfer,
    getGrowiInfoForG2gTransfer,
    postGenerateKeyForG2gTransfer,
    postTransferForG2gTransfer,
    getHealthcheck,
    getImport,
    postImport,
    getStatusForImport,
    postUploadForImport,
    deleteAllForImport,
    getListForInAppNotification,
    getStatusForInAppNotification,
    postOpenForInAppNotification,
    putAllStatusesOpenForInAppNotification,
    postInstaller,
    postInvited,
    postLogout,
    getMarkdownSetting,
    putLineBreakForMarkdownSetting,
    putIndentForMarkdownSetting,
    putXssForMarkdownSetting,
    getCollectionsForMongo,
    getNotificationSetting,
    postUserNotificationForNotificationSetting,
    deleteUserNotificationByIdForNotificationSetting,
    getGlobalNotificationByIdForNotificationSetting,
    putGlobalNotificationByIdForNotificationSetting,
    deleteGlobalNotificationByIdForNotificationSetting,
    postGlobalNotificationForNotificationSetting,
    putNotifyForPageGrantForNotificationSetting,
    putEnabledByIdForNotificationSettingGlobalNotification,
    getRootForPageListing,
    getAncestorsChildrenForPageListing,
    getChildrenForPageListing,
    getInfoForPageListing,
    getPage,
    postPage,
    putPage,
    getExistForPage,
    putLikesForPage,
    getInfoForPage,
    getGrantDataForPage,
    getNonUserRelatedGroupsGrantedForPage,
    getApplicableGrantForPage,
    putGrantByPageId,
    getExportByPageIdForPage,
    getExistPathsForPage,
    putSubscribeForPage,
    putContentWidthByPageId,
    putPublishByPageId,
    putUnpublishByPageId,
    getYjsDataByPageId,
    putSyncLatestRevisionBodyToYjsDraftByPageId,
    getRecentForPages,
    postRenameForPages,
    postResumeRenameForPages,
    deleteEmptyTrashForPages,
    getListForPages,
    postDuplicateForPages,
    getSubordinatedListForPages,
    postDeleteForPages,
    postConvertPagesByPathForPages,
    postLegacyPagesMigrationForPages,
    getV5MigrationStatusForPages,
    getPersonalSetting,
    putPersonalSetting,
    getIsPasswordSetForPersonalSetting,
    putImageTypeForPersonalSetting,
    getExternalAccountsForPersonalSetting,
    putPasswordForPersonalSetting,
    putApiTokenForPersonalSetting,
    putAssociateLdapForPersonalSetting,
    putDisassociateLdapForPersonalSetting,
    putEditorSettingsForPersonalSetting,
    getEditorSettingsForPersonalSetting,
    putInAppNotificationSettingsForPersonalSetting,
    getInAppNotificationSettingsForPersonalSetting,
    putQuestionnaireSettingsForPersonalSetting,
    getListForRevisions,
    getRevisionsById,
    getIndicesForSearch,
    putIndicesForSearch,
    postConnectionForSearch,
    getSecuritySetting,
    putEnabledForSecuritySettingAuthentication,
    getAuthenticationForSecuritySetting,
    putGeneralSettingForSecuritySetting,
    putShareLinkSettingForSecuritySetting,
    getAllShareLinksForSecuritySetting,
    deleteAllShareLinksForSecuritySetting,
    putLocalSettingForSecuritySetting,
    putLdapForSecuritySetting,
    putSamlForSecuritySetting,
    putOidcForSecuritySetting,
    putGoogleOauthForSecuritySetting,
    putGithubOauthForSecuritySetting,
    getShareLinks,
    postShareLinks,
    deleteShareLinks,
    deleteAllForShareLinks,
    deleteShareLinksById,
    getSlackIntegrationLegacySetting,
    putSlackIntegrationLegacySetting,
    getSlackIntegrationSettings,
    putBotTypeForSlackIntegrationSettings,
    deleteBotTypeForSlackIntegration,
    putUpdateSettingsForSlackIntegrationSettingsWithoutProxy,
    putUpdatePermissionsForSlackIntegrationSettingsWithoutProxy,
    postSlackAppIntegrationsForSlackIntegrationSettings,
    deleteSlackAppIntegrationsByIdForSlackIntegrationSettings,
    putProxyUriForSlackIntegrationSettings,
    putMakeprimaryByIdForSlackIntegrationSettingsSlackAppIntegrations,
    putRegenerateTokensByIdForSlackIntegrationSettingsSlackAppIntegrations,
    putPermissionsByIdForSlackIntegrationSettingsSlackAppIntegrations,
    postRelationTestByIdForSlackIntegrationSettingsSlackAppIntegrations,
    postTestForSlackIntegrationSettingsWithoutProxy,
    postCommandsForSlackIntegration,
    postVerifyForSlackIntegrationProxied,
    postCommandsForSlackIntegrationProxied,
    postInteractionsForSlackIntegration,
    postInteractionsForSlackIntegrationProxied,
    getSupportedCommandsForSlackIntegration,
    postEventsForSlackIntegration,
    postEventsForSlackIntegrationProxied,
    getUserForStatistics,
    postCompleteRegistration,
    getUserGroupRelations,
    getUserGroups,
    postUserGroups,
    getAncestorsForUserGroups,
    getChildrenForUserGroups,
    getSelectableParentGroups,
    getSelectableChildGroups,
    getUserGroupsById,
    deleteUserGroupsById,
    putUserGroupsById,
    getUsersByIdForUserGroups,
    getUnrelatedUsersByIdForUserGroups,
    postUsersByUsernameByIdForUserGroups,
    deleteUsersByUsernameByIdForUserGroups,
    getUserGroupRelationsByIdForUserGroups,
    getPagesByIdForUserGroups,
    putUserUiSettings,
    getUsers,
    getRecentById,
    postInviteForUsers,
    putGrantAdminByIdForUsers,
    putRevokeAdminByIdForUsers,
    putGrantReadOnlyByIdForUsers,
    putRevokeReadOnlyByIdForUsers,
    putActivateByIdForUsers,
    putDeactivateByIdForUsers,
    deleteRemoveByIdForUsers,
    getExternalAccountsForUsers,
    deleteRemoveByIdForUsersExternalAccounts,
    putUpdateImageUrlCacheForUsers,
    putResetPasswordForUsers,
    putResetPasswordEmailForUsers,
    putSendInvitationEmailForUsers,
    getListForUsers,
    getUsernamesForUsers,
    postLogin,
    postRegister,
  };
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type GetExternalUserGroupRelationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroupRelations']>>>;
export type GetExternalUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroups']>>>;
export type GetAncestorsForExternalUserGroupsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAncestorsForExternalUserGroups']>>
>;
export type GetChildrenForExternalUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getChildrenForExternalUserGroups']>>>;
export type GetExternalUserGroupsByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroupsById']>>>;
export type DeleteExternalUserGroupsByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteExternalUserGroupsById']>>>;
export type PutExternalUserGroupsByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putExternalUserGroupsById']>>>;
export type GetExternalUserGroupRelationsByIdForExternalUserGroupsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroupRelationsByIdForExternalUserGroups']>>
>;
export type GetSyncSettingsForExternalUserGroupsLdapResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSyncSettingsForExternalUserGroupsLdap']>>
>;
export type PutSyncSettingsForExternalUserGroupsLdapResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSyncSettingsForExternalUserGroupsLdap']>>
>;
export type GetSyncSettingsForExternalUserGroupsKeycloakResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSyncSettingsForExternalUserGroupsKeycloak']>>
>;
export type PutSyncSettingsForExternalUserGroupsKeycloakResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSyncSettingsForExternalUserGroupsKeycloak']>>
>;
export type PutSyncForExternalUserGroupsLdapResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSyncForExternalUserGroupsLdap']>>>;
export type PutSyncForExternalUserGroupsKeycloakResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSyncForExternalUserGroupsKeycloak']>>
>;
export type GetSyncStatusForExternalUserGroupsLdapResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSyncStatusForExternalUserGroupsLdap']>>
>;
export type GetOrdersForQuestionnaireResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getOrdersForQuestionnaire']>>>;
export type GetIsEnabledForQuestionnaireResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getIsEnabledForQuestionnaire']>>>;
export type PostAnswerForQuestionnaireProactiveResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postAnswerForQuestionnaireProactive']>>
>;
export type PutAnswerForQuestionnaireResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putAnswerForQuestionnaire']>>>;
export type PutSkipForQuestionnaireResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSkipForQuestionnaire']>>>;
export type PutDenyForQuestionnaireResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putDenyForQuestionnaire']>>>;
export type GetTemplatesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getTemplates']>>>;
export type GetPresetTemplatesByLocaleByTemplateIdForTemplatesResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPresetTemplatesByLocaleByTemplateIdForTemplates']>>
>;
export type GetPluginTemplatesByLocaleByTemplateIdByReposIdByOrganizationIdForTemplatesResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPluginTemplatesByLocaleByTemplateIdByReposIdByOrganizationIdForTemplates']>>
>;
export type PostPluginsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postPlugins']>>>;
export type PutActivateByIdForPluginsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putActivateByIdForPlugins']>>>;
export type DeleteRemoveByIdForPluginsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteRemoveByIdForPlugins']>>>;
export type GetActivityResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getActivity']>>>;
export type GetAdminHomeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAdminHome']>>>;
export type GetAppSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAppSettings']>>>;
export type PutAppSettingForAppSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putAppSettingForAppSettings']>>>;
export type PutSiteUrlSettingForAppSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSiteUrlSettingForAppSettings']>>>;
export type PutSmtpSettingForAppSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSmtpSettingForAppSettings']>>>;
export type PostSmtpTestForAppSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSmtpTestForAppSettings']>>>;
export type PutSesSettingForAppSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSesSettingForAppSettings']>>>;
export type PutFileUploadSettingsForAppSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putFileUploadSettingsForAppSettings']>>
>;
export type PutQuestionnaireSettingsForAppSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putQuestionnaireSettingsForAppSettings']>>
>;
export type PostV5SchemaMigrationForAppSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postV5SchemaMigrationForAppSettings']>>
>;
export type PostMaintenanceModeForAppSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postMaintenanceModeForAppSettings']>>
>;
export type GetListForAttachmentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getListForAttachment']>>>;
export type GetLimitForAttachmentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getLimitForAttachment']>>>;
export type PostAttachmentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postAttachment']>>>;
export type GetAttachmentByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAttachmentById']>>>;
export type PostBookmarkFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postBookmarkFolder']>>>;
export type PutBookmarkFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putBookmarkFolder']>>>;
export type GetListByUserIdForBookmarkFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getListByUserIdForBookmarkFolder']>>>;
export type DeleteBookmarkFolderByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteBookmarkFolderById']>>>;
export type PostAddBookmarkToFolderForBookmarkFolderResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postAddBookmarkToFolderForBookmarkFolder']>>
>;
export type PutUpdateBookmarkForBookmarkFolderResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUpdateBookmarkForBookmarkFolder']>>
>;
export type GetInfoForBookmarksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getInfoForBookmarks']>>>;
export type GetBookmarksByUserIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getBookmarksByUserId']>>>;
export type PutBookmarksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putBookmarks']>>>;
export type GetCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getCustomizeSetting']>>>;
export type GetLayoutForCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getLayoutForCustomizeSetting']>>>;
export type PutLayoutForCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putLayoutForCustomizeSetting']>>>;
export type GetThemeForCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getThemeForCustomizeSetting']>>>;
export type PutThemeForCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putThemeForCustomizeSetting']>>>;
export type GetSidebarForCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSidebarForCustomizeSetting']>>>;
export type PutSidebarForCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSidebarForCustomizeSetting']>>>;
export type PutFunctionForCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putFunctionForCustomizeSetting']>>>;
export type PutPresentationForCustomizeSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPresentationForCustomizeSetting']>>
>;
export type PutHighlightForCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putHighlightForCustomizeSetting']>>>;
export type PutCustomizeTitleForCustomizeSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeTitleForCustomizeSetting']>>
>;
export type PutCustomizeNoscriptForCustomizeSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeNoscriptForCustomizeSetting']>>
>;
export type PutCustomizeCssForCustomizeSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeCssForCustomizeSetting']>>
>;
export type PutCustomizeScriptForCustomizeSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeScriptForCustomizeSetting']>>
>;
export type PutCustomizeLogoForCustomizeSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeLogoForCustomizeSetting']>>
>;
export type PutUploadBrandLogoForCustomizeSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUploadBrandLogoForCustomizeSetting']>>
>;
export type DeleteDeleteBrandLogoForCustomizeSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteDeleteBrandLogoForCustomizeSetting']>>
>;
export type GetStatusForExportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getStatusForExport']>>>;
export type PostExportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postExport']>>>;
export type DeleteExportByFileNameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteExportByFileName']>>>;
export type PostForgotPasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postForgotPassword']>>>;
export type PutForgotPasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putForgotPassword']>>>;
export type GetFilesForG2gTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getFilesForG2gTransfer']>>>;
export type PostG2gTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postG2gTransfer']>>>;
export type PostAttachmentForG2gTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postAttachmentForG2gTransfer']>>>;
export type GetGrowiInfoForG2gTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getGrowiInfoForG2gTransfer']>>>;
export type PostGenerateKeyForG2gTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postGenerateKeyForG2gTransfer']>>>;
export type PostTransferForG2gTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postTransferForG2gTransfer']>>>;
export type GetHealthcheckResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getHealthcheck']>>>;
export type GetImportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getImport']>>>;
export type PostImportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postImport']>>>;
export type GetStatusForImportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getStatusForImport']>>>;
export type PostUploadForImportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postUploadForImport']>>>;
export type DeleteAllForImportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteAllForImport']>>>;
export type GetListForInAppNotificationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getListForInAppNotification']>>>;
export type GetStatusForInAppNotificationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getStatusForInAppNotification']>>>;
export type PostOpenForInAppNotificationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postOpenForInAppNotification']>>>;
export type PutAllStatusesOpenForInAppNotificationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putAllStatusesOpenForInAppNotification']>>
>;
export type PostInstallerResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postInstaller']>>>;
export type PostInvitedResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postInvited']>>>;
export type PostLogoutResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postLogout']>>>;
export type GetMarkdownSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getMarkdownSetting']>>>;
export type PutLineBreakForMarkdownSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putLineBreakForMarkdownSetting']>>>;
export type PutIndentForMarkdownSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putIndentForMarkdownSetting']>>>;
export type PutXssForMarkdownSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putXssForMarkdownSetting']>>>;
export type GetCollectionsForMongoResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getCollectionsForMongo']>>>;
export type GetNotificationSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getNotificationSetting']>>>;
export type PostUserNotificationForNotificationSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postUserNotificationForNotificationSetting']>>
>;
export type DeleteUserNotificationByIdForNotificationSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteUserNotificationByIdForNotificationSetting']>>
>;
export type GetGlobalNotificationByIdForNotificationSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getGlobalNotificationByIdForNotificationSetting']>>
>;
export type PutGlobalNotificationByIdForNotificationSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putGlobalNotificationByIdForNotificationSetting']>>
>;
export type DeleteGlobalNotificationByIdForNotificationSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteGlobalNotificationByIdForNotificationSetting']>>
>;
export type PostGlobalNotificationForNotificationSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postGlobalNotificationForNotificationSetting']>>
>;
export type PutNotifyForPageGrantForNotificationSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putNotifyForPageGrantForNotificationSetting']>>
>;
export type PutEnabledByIdForNotificationSettingGlobalNotificationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putEnabledByIdForNotificationSettingGlobalNotification']>>
>;
export type GetRootForPageListingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getRootForPageListing']>>>;
export type GetAncestorsChildrenForPageListingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAncestorsChildrenForPageListing']>>
>;
export type GetChildrenForPageListingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getChildrenForPageListing']>>>;
export type GetInfoForPageListingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getInfoForPageListing']>>>;
export type GetPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPage']>>>;
export type PostPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postPage']>>>;
export type PutPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPage']>>>;
export type GetExistForPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExistForPage']>>>;
export type PutLikesForPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putLikesForPage']>>>;
export type GetInfoForPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getInfoForPage']>>>;
export type GetGrantDataForPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getGrantDataForPage']>>>;
export type GetNonUserRelatedGroupsGrantedForPageResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getNonUserRelatedGroupsGrantedForPage']>>
>;
export type GetApplicableGrantForPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getApplicableGrantForPage']>>>;
export type PutGrantByPageIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putGrantByPageId']>>>;
export type GetExportByPageIdForPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExportByPageIdForPage']>>>;
export type GetExistPathsForPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExistPathsForPage']>>>;
export type PutSubscribeForPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSubscribeForPage']>>>;
export type PutContentWidthByPageIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putContentWidthByPageId']>>>;
export type PutPublishByPageIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPublishByPageId']>>>;
export type PutUnpublishByPageIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUnpublishByPageId']>>>;
export type GetYjsDataByPageIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getYjsDataByPageId']>>>;
export type PutSyncLatestRevisionBodyToYjsDraftByPageIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSyncLatestRevisionBodyToYjsDraftByPageId']>>
>;
export type GetRecentForPagesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getRecentForPages']>>>;
export type PostRenameForPagesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postRenameForPages']>>>;
export type PostResumeRenameForPagesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postResumeRenameForPages']>>>;
export type DeleteEmptyTrashForPagesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteEmptyTrashForPages']>>>;
export type GetListForPagesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getListForPages']>>>;
export type PostDuplicateForPagesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postDuplicateForPages']>>>;
export type GetSubordinatedListForPagesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSubordinatedListForPages']>>>;
export type PostDeleteForPagesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postDeleteForPages']>>>;
export type PostConvertPagesByPathForPagesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postConvertPagesByPathForPages']>>>;
export type PostLegacyPagesMigrationForPagesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postLegacyPagesMigrationForPages']>>>;
export type GetV5MigrationStatusForPagesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getV5MigrationStatusForPages']>>>;
export type GetPersonalSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPersonalSetting']>>>;
export type PutPersonalSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPersonalSetting']>>>;
export type GetIsPasswordSetForPersonalSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getIsPasswordSetForPersonalSetting']>>
>;
export type PutImageTypeForPersonalSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putImageTypeForPersonalSetting']>>>;
export type GetExternalAccountsForPersonalSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalAccountsForPersonalSetting']>>
>;
export type PutPasswordForPersonalSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPasswordForPersonalSetting']>>>;
export type PutApiTokenForPersonalSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putApiTokenForPersonalSetting']>>>;
export type PutAssociateLdapForPersonalSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putAssociateLdapForPersonalSetting']>>
>;
export type PutDisassociateLdapForPersonalSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putDisassociateLdapForPersonalSetting']>>
>;
export type PutEditorSettingsForPersonalSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putEditorSettingsForPersonalSetting']>>
>;
export type GetEditorSettingsForPersonalSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getEditorSettingsForPersonalSetting']>>
>;
export type PutInAppNotificationSettingsForPersonalSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putInAppNotificationSettingsForPersonalSetting']>>
>;
export type GetInAppNotificationSettingsForPersonalSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getInAppNotificationSettingsForPersonalSetting']>>
>;
export type PutQuestionnaireSettingsForPersonalSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putQuestionnaireSettingsForPersonalSetting']>>
>;
export type GetListForRevisionsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getListForRevisions']>>>;
export type GetRevisionsByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getRevisionsById']>>>;
export type GetIndicesForSearchResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getIndicesForSearch']>>>;
export type PutIndicesForSearchResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putIndicesForSearch']>>>;
export type PostConnectionForSearchResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postConnectionForSearch']>>>;
export type GetSecuritySettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSecuritySetting']>>>;
export type PutEnabledForSecuritySettingAuthenticationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putEnabledForSecuritySettingAuthentication']>>
>;
export type GetAuthenticationForSecuritySettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAuthenticationForSecuritySetting']>>
>;
export type PutGeneralSettingForSecuritySettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putGeneralSettingForSecuritySetting']>>
>;
export type PutShareLinkSettingForSecuritySettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putShareLinkSettingForSecuritySetting']>>
>;
export type GetAllShareLinksForSecuritySettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAllShareLinksForSecuritySetting']>>
>;
export type DeleteAllShareLinksForSecuritySettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteAllShareLinksForSecuritySetting']>>
>;
export type PutLocalSettingForSecuritySettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putLocalSettingForSecuritySetting']>>
>;
export type PutLdapForSecuritySettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putLdapForSecuritySetting']>>>;
export type PutSamlForSecuritySettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSamlForSecuritySetting']>>>;
export type PutOidcForSecuritySettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putOidcForSecuritySetting']>>>;
export type PutGoogleOauthForSecuritySettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putGoogleOauthForSecuritySetting']>>>;
export type PutGithubOauthForSecuritySettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putGithubOauthForSecuritySetting']>>>;
export type GetShareLinksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getShareLinks']>>>;
export type PostShareLinksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postShareLinks']>>>;
export type DeleteShareLinksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteShareLinks']>>>;
export type DeleteAllForShareLinksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteAllForShareLinks']>>>;
export type DeleteShareLinksByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteShareLinksById']>>>;
export type GetSlackIntegrationLegacySettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSlackIntegrationLegacySetting']>>>;
export type PutSlackIntegrationLegacySettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSlackIntegrationLegacySetting']>>>;
export type GetSlackIntegrationSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSlackIntegrationSettings']>>>;
export type PutBotTypeForSlackIntegrationSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putBotTypeForSlackIntegrationSettings']>>
>;
export type DeleteBotTypeForSlackIntegrationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteBotTypeForSlackIntegration']>>>;
export type PutUpdateSettingsForSlackIntegrationSettingsWithoutProxyResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUpdateSettingsForSlackIntegrationSettingsWithoutProxy']>>
>;
export type PutUpdatePermissionsForSlackIntegrationSettingsWithoutProxyResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUpdatePermissionsForSlackIntegrationSettingsWithoutProxy']>>
>;
export type PostSlackAppIntegrationsForSlackIntegrationSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackAppIntegrationsForSlackIntegrationSettings']>>
>;
export type DeleteSlackAppIntegrationsByIdForSlackIntegrationSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteSlackAppIntegrationsByIdForSlackIntegrationSettings']>>
>;
export type PutProxyUriForSlackIntegrationSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putProxyUriForSlackIntegrationSettings']>>
>;
export type PutMakeprimaryByIdForSlackIntegrationSettingsSlackAppIntegrationsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putMakeprimaryByIdForSlackIntegrationSettingsSlackAppIntegrations']>>
>;
export type PutRegenerateTokensByIdForSlackIntegrationSettingsSlackAppIntegrationsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putRegenerateTokensByIdForSlackIntegrationSettingsSlackAppIntegrations']>>
>;
export type PutPermissionsByIdForSlackIntegrationSettingsSlackAppIntegrationsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPermissionsByIdForSlackIntegrationSettingsSlackAppIntegrations']>>
>;
export type PostRelationTestByIdForSlackIntegrationSettingsSlackAppIntegrationsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postRelationTestByIdForSlackIntegrationSettingsSlackAppIntegrations']>>
>;
export type PostTestForSlackIntegrationSettingsWithoutProxyResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postTestForSlackIntegrationSettingsWithoutProxy']>>
>;
export type PostCommandsForSlackIntegrationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postCommandsForSlackIntegration']>>>;
export type PostVerifyForSlackIntegrationProxiedResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postVerifyForSlackIntegrationProxied']>>
>;
export type PostCommandsForSlackIntegrationProxiedResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postCommandsForSlackIntegrationProxied']>>
>;
export type PostInteractionsForSlackIntegrationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postInteractionsForSlackIntegration']>>
>;
export type PostInteractionsForSlackIntegrationProxiedResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postInteractionsForSlackIntegrationProxied']>>
>;
export type GetSupportedCommandsForSlackIntegrationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSupportedCommandsForSlackIntegration']>>
>;
export type PostEventsForSlackIntegrationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postEventsForSlackIntegration']>>>;
export type PostEventsForSlackIntegrationProxiedResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postEventsForSlackIntegrationProxied']>>
>;
export type GetUserForStatisticsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserForStatistics']>>>;
export type PostCompleteRegistrationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postCompleteRegistration']>>>;
export type GetUserGroupRelationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroupRelations']>>>;
export type GetUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroups']>>>;
export type PostUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postUserGroups']>>>;
export type GetAncestorsForUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAncestorsForUserGroups']>>>;
export type GetChildrenForUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getChildrenForUserGroups']>>>;
export type GetSelectableParentGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSelectableParentGroups']>>>;
export type GetSelectableChildGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSelectableChildGroups']>>>;
export type GetUserGroupsByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroupsById']>>>;
export type DeleteUserGroupsByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteUserGroupsById']>>>;
export type PutUserGroupsByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUserGroupsById']>>>;
export type GetUsersByIdForUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUsersByIdForUserGroups']>>>;
export type GetUnrelatedUsersByIdForUserGroupsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUnrelatedUsersByIdForUserGroups']>>
>;
export type PostUsersByUsernameByIdForUserGroupsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postUsersByUsernameByIdForUserGroups']>>
>;
export type DeleteUsersByUsernameByIdForUserGroupsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteUsersByUsernameByIdForUserGroups']>>
>;
export type GetUserGroupRelationsByIdForUserGroupsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroupRelationsByIdForUserGroups']>>
>;
export type GetPagesByIdForUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPagesByIdForUserGroups']>>>;
export type PutUserUiSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUserUiSettings']>>>;
export type GetUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUsers']>>>;
export type GetRecentByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getRecentById']>>>;
export type PostInviteForUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postInviteForUsers']>>>;
export type PutGrantAdminByIdForUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putGrantAdminByIdForUsers']>>>;
export type PutRevokeAdminByIdForUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putRevokeAdminByIdForUsers']>>>;
export type PutGrantReadOnlyByIdForUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putGrantReadOnlyByIdForUsers']>>>;
export type PutRevokeReadOnlyByIdForUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putRevokeReadOnlyByIdForUsers']>>>;
export type PutActivateByIdForUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putActivateByIdForUsers']>>>;
export type PutDeactivateByIdForUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putDeactivateByIdForUsers']>>>;
export type DeleteRemoveByIdForUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteRemoveByIdForUsers']>>>;
export type GetExternalAccountsForUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalAccountsForUsers']>>>;
export type DeleteRemoveByIdForUsersExternalAccountsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteRemoveByIdForUsersExternalAccounts']>>
>;
export type PutUpdateImageUrlCacheForUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUpdateImageUrlCacheForUsers']>>>;
export type PutResetPasswordForUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putResetPasswordForUsers']>>>;
export type PutResetPasswordEmailForUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putResetPasswordEmailForUsers']>>>;
export type PutSendInvitationEmailForUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSendInvitationEmailForUsers']>>>;
export type GetListForUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getListForUsers']>>>;
export type GetUsernamesForUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUsernamesForUsers']>>>;
export type PostLoginResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postLogin']>>>;
export type PostRegisterResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postRegister']>>>;
