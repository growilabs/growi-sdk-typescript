/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * GROWI REST API v3
 * OpenAPI spec version: 7.2.6-RC.0
 */
import type {
  ActivityResponse,
  AppSettingPutParams,
  AttachmentPaginateResult,
  BookmarkInfo,
  BookmarkParams,
  Bookmarks,
  BotType,
  CustomizeCss,
  CustomizeFunction,
  CustomizeHighlight,
  CustomizeLayout,
  CustomizeLogo,
  CustomizeNoscript,
  CustomizePresentation,
  CustomizeScript,
  CustomizeSidebar,
  CustomizeTheme,
  CustomizeTitle,
  DeleteBookmarkFolderId200,
  DeleteExportFileName200,
  DeleteExternalUserGroupsId200,
  DeleteExternalUserGroupsIdParams,
  DeletePagesEmptyTrash200,
  DeletePluginsIdRemove200,
  DeleteSecuritySettingAllShareLinks200,
  DeleteShareLinksAll200,
  DeleteShareLinksParams,
  DeleteSlackIntegrationSettingsSlackAppIntegrationsId200,
  DeleteUserGroupsId200,
  DeleteUserGroupsIdParams,
  DeleteUserGroupsIdUsersUsername200,
  DeleteUsersExternalAccountsIdRemove200,
  DeleteUsersIdRemove200,
  DisassociateUser,
  FileImportResponse,
  FileUploadSettingParams,
  GeneralSetting,
  GetActivityParams,
  GetAdminHome200,
  GetAppSettings200,
  GetAttachmentId200,
  GetAttachmentLimit200,
  GetAttachmentLimitParams,
  GetAttachmentListParams,
  GetBookmarkFolderListUserId200,
  GetBookmarksInfoParams,
  GetCustomizeSetting200,
  GetCustomizeSettingTheme200,
  GetExportStatus200,
  GetExternalUserGroupRelations200,
  GetExternalUserGroupRelationsParams,
  GetExternalUserGroups200,
  GetExternalUserGroupsAncestors200,
  GetExternalUserGroupsAncestorsParams,
  GetExternalUserGroupsChildren200,
  GetExternalUserGroupsChildrenParams,
  GetExternalUserGroupsId200,
  GetExternalUserGroupsIdExternalUserGroupRelations200,
  GetExternalUserGroupsKeycloakSyncSettings200,
  GetExternalUserGroupsLdapSyncSettings200,
  GetExternalUserGroupsParams,
  GetG2gTransferFiles200,
  GetG2gTransferGrowiInfo200,
  GetHealthcheck200,
  GetHealthcheckParams,
  GetIdRecent200,
  GetImport200,
  GetImportStatus200,
  GetInAppNotificationListParams,
  GetInAppNotificationStatus200,
  GetMarkdownSetting200,
  GetMongoCollections200,
  GetNotificationSetting200,
  GetNotificationSettingGlobalNotificationId200,
  GetPageApplicableGrant200,
  GetPageApplicableGrantParams,
  GetPageExist200,
  GetPageExistParams,
  GetPageExistPaths200,
  GetPageExistPathsParams,
  GetPageGrantData200,
  GetPageGrantDataParams,
  GetPageIdYjsData200,
  GetPageListingAncestorsChildren200,
  GetPageListingAncestorsChildrenParams,
  GetPageListingChildren200,
  GetPageListingChildrenParams,
  GetPageListingInfo200,
  GetPageListingInfoParams,
  GetPageListingRoot200,
  GetPageNonUserRelatedGroupsGranted200,
  GetPageNonUserRelatedGroupsGrantedParams,
  GetPageParams,
  GetPagesList200,
  GetPagesListParams,
  GetPagesRecentParams,
  GetPagesSubordinatedList200,
  GetPagesSubordinatedListParams,
  GetPagesV5MigrationStatus200,
  GetPersonalSetting200,
  GetPersonalSettingEditorSettings200,
  GetPersonalSettingExternalAccounts200,
  GetPersonalSettingInAppNotificationSettings200,
  GetPersonalSettingIsPasswordSet200,
  GetQuestionnaireIsEnabled200,
  GetQuestionnaireOrders200,
  GetRevisionsId200,
  GetRevisionsIdParams,
  GetRevisionsList200,
  GetRevisionsListParams,
  GetSearchIndices200,
  GetSecuritySetting200,
  GetSecuritySettingAllShareLinks200,
  GetSecuritySettingAuthentication200,
  GetSelectableChildGroups200,
  GetSelectableChildGroupsParams,
  GetSelectableParentGroups200,
  GetSelectableParentGroupsParams,
  GetShareLinks200,
  GetShareLinksParams,
  GetSlackIntegrationLegacySetting200,
  GetSlackIntegrationSettings200,
  GetSlackIntegrationSupportedCommands200,
  GetTemplates200,
  GetTemplatesParams,
  GetTemplatesPluginTemplatesOrganizationIdReposIdTemplateIdLocale200,
  GetTemplatesPresetTemplatesTemplateIdLocale200,
  GetUserGroupRelations200,
  GetUserGroups200,
  GetUserGroupsAncestors200,
  GetUserGroupsAncestorsParams,
  GetUserGroupsChildren200,
  GetUserGroupsChildrenParams,
  GetUserGroupsId200,
  GetUserGroupsIdPages200,
  GetUserGroupsIdUnrelatedUsers200,
  GetUserGroupsIdUnrelatedUsersParams,
  GetUserGroupsIdUserGroupRelations200,
  GetUserGroupsIdUsers200,
  GetUserGroupsParams,
  GetUsers200,
  GetUsersExternalAccounts200,
  GetUsersExternalAccountsParams,
  GetUsersList200,
  GetUsersListParams,
  GetUsersParams,
  GetUsersUsernames200,
  GetUsersUsernamesParams,
  GitHubOAuthSetting,
  GlobalNotification,
  GlobalNotificationParams,
  GoogleOAuthSetting,
  InAppNotificationListResponse,
  IndentParams,
  LdapAuthSetting,
  LikeParams,
  LineBreakParams,
  LocalSetting,
  NotifyForPageGrant,
  OidcAuthSetting,
  Page,
  PageInfo,
  PageParams,
  PersonalSettings,
  PostAppSettingsMaintenanceMode200,
  PostAppSettingsMaintenanceModeBody,
  PostAppSettingsSmtpTest200,
  PostAppSettingsV5SchemaMigration200,
  PostAttachment200,
  PostAttachmentBodyOne,
  PostAttachmentBodyTwo,
  PostBookmarkFolder200,
  PostBookmarkFolderAddBookmarkToFolder200,
  PostBookmarkFolderAddBookmarkToFolderBody,
  PostBookmarkFolderBody,
  PostCompleteRegistration200,
  PostCompleteRegistrationBody,
  PostExport200,
  PostExportBody,
  PostForgotPassword200,
  PostForgotPasswordBody,
  PostG2gTransfer200,
  PostG2gTransferAttachment200,
  PostG2gTransferAttachmentBody,
  PostG2gTransferBody,
  PostG2gTransferGenerateKey200,
  PostG2gTransferGenerateKeyBody,
  PostG2gTransferTransfer200,
  PostG2gTransferTransferBody,
  PostImportBody,
  PostImportUploadBody,
  PostInAppNotificationOpen200,
  PostInAppNotificationOpenBody,
  PostInstaller200,
  PostInstallerBody,
  PostInvited200,
  PostInvitedBody,
  PostLogin200,
  PostLoginBody,
  PostNotificationSettingGlobalNotification200,
  PostNotificationSettingUserNotification200,
  PostPage201,
  PostPageBody,
  PostPagesConvertPagesByPath200,
  PostPagesConvertPagesByPathBody,
  PostPagesDelete200,
  PostPagesDeleteBody,
  PostPagesDuplicate200,
  PostPagesDuplicateBody,
  PostPagesLegacyPagesMigration200,
  PostPagesLegacyPagesMigrationBody,
  PostPagesRename200,
  PostPagesRenameBody,
  PostPagesResumeRename200,
  PostPagesResumeRenameBody,
  PostPlugins200,
  PostPluginsBody,
  PostQuestionnaireProactiveAnswer200,
  PostQuestionnaireProactiveAnswerBody,
  PostRegister200,
  PostRegisterBody,
  PostShareLinksParams,
  PostSlackIntegrationCommandsBody,
  PostSlackIntegrationEvents200,
  PostSlackIntegrationEventsBody,
  PostSlackIntegrationInteractionsBody,
  PostSlackIntegrationProxiedCommandsBody,
  PostSlackIntegrationProxiedEvents200,
  PostSlackIntegrationProxiedEventsBody,
  PostSlackIntegrationProxiedInteractionsBody,
  PostSlackIntegrationProxiedVerify200,
  PostSlackIntegrationProxiedVerifyBody,
  PostSlackIntegrationSettingsSlackAppIntegrations200,
  PostSlackIntegrationSettingsSlackAppIntegrationsIdRelationTestBody,
  PostSlackIntegrationSettingsWithoutProxyTestBody,
  PostUserGroups200,
  PostUserGroupsBody,
  PostUserGroupsIdUsersUsername200,
  PostUsersInvite200,
  PostUsersInviteParams,
  PutAppSettingsAppSetting200,
  PutAppSettingsFileUploadSettings200,
  PutAppSettingsQuestionnaireSettings200,
  PutAppSettingsSiteUrlSetting200,
  PutAppSettingsSmtpSetting200,
  PutBookmarkFolder200,
  PutBookmarkFolderBody,
  PutBookmarkFolderUpdateBookmark200,
  PutBookmarkFolderUpdateBookmarkBody,
  PutBookmarks200,
  PutCustomizeSettingCustomizeCss200,
  PutCustomizeSettingCustomizeLogo200,
  PutCustomizeSettingCustomizeNoscript200,
  PutCustomizeSettingCustomizeScript200,
  PutCustomizeSettingCustomizeTitle200,
  PutCustomizeSettingFunction200,
  PutCustomizeSettingHighlight200,
  PutCustomizeSettingLayout200,
  PutCustomizeSettingPresentation200,
  PutCustomizeSettingSidebar200,
  PutCustomizeSettingTheme200,
  PutCustomizeSettingUploadBrandLogo200,
  PutCustomizeSettingUploadBrandLogoBody,
  PutExternalUserGroupsId200,
  PutExternalUserGroupsIdBody,
  PutExternalUserGroupsKeycloakSync202,
  PutExternalUserGroupsKeycloakSyncSettings204,
  PutExternalUserGroupsKeycloakSyncSettingsBody,
  PutExternalUserGroupsLdapSync202,
  PutExternalUserGroupsLdapSyncSettings204,
  PutExternalUserGroupsLdapSyncSettingsBody,
  PutForgotPassword200,
  PutForgotPasswordBody,
  PutMarkdownSettingIndent200,
  PutMarkdownSettingLineBreak200,
  PutNotificationSettingGlobalNotificationId200,
  PutNotificationSettingGlobalNotificationIdEnabled200,
  PutNotificationSettingGlobalNotificationIdEnabledBody,
  PutPage200,
  PutPageBody,
  PutPageIdContentWidth200,
  PutPageIdContentWidthBody,
  PutPageIdGrantBody,
  PutPageIdSyncLatestRevisionBodyToYjsDraft200,
  PutPageIdSyncLatestRevisionBodyToYjsDraftBody,
  PutPageSubscribeBody,
  PutPersonalSetting200,
  PutPersonalSettingApiToken200,
  PutPersonalSettingAssociateLdap200,
  PutPersonalSettingAssociateLdapBody,
  PutPersonalSettingDisassociateLdap200,
  PutPersonalSettingEditorSettings200,
  PutPersonalSettingEditorSettingsBody,
  PutPersonalSettingImageType200,
  PutPersonalSettingImageTypeBody,
  PutPersonalSettingInAppNotificationSettings200,
  PutPersonalSettingInAppNotificationSettingsBody,
  PutPersonalSettingPassword200,
  PutPersonalSettingPasswordBody,
  PutPersonalSettingQuestionnaireSettings200,
  PutPersonalSettingQuestionnaireSettingsBody,
  PutPluginsIdActivate200,
  PutQuestionnaireAnswer201,
  PutQuestionnaireAnswer204,
  PutQuestionnaireAnswerBody,
  PutQuestionnaireDeny201,
  PutQuestionnaireDeny204,
  PutQuestionnaireDenyBody,
  PutQuestionnaireSkip201,
  PutQuestionnaireSkip204,
  PutQuestionnaireSkipBody,
  PutSearchIndices200,
  PutSearchIndicesBody,
  PutSecuritySettingAuthenticationEnabled200,
  PutSecuritySettingAuthenticationEnabledBody,
  PutSecuritySettingGithubOauth200,
  PutSecuritySettingGoogleOauth200,
  PutSecuritySettingLdap200,
  PutSecuritySettingLocalSetting200,
  PutSecuritySettingOidc200,
  PutSecuritySettingSaml200,
  PutSecuritySettingShareLinkSetting200,
  PutSlackIntegrationLegacySetting200,
  PutSlackIntegrationLegacySettingBody,
  PutSlackIntegrationSettingsProxyUri200,
  PutSlackIntegrationSettingsProxyUriBody,
  PutSlackIntegrationSettingsSlackAppIntegrationsIdPermissions200,
  PutSlackIntegrationSettingsSlackAppIntegrationsIdPermissionsBody,
  PutSlackIntegrationSettingsSlackAppIntegrationsIdRegenerateTokens200,
  PutSlackIntegrationSettingsWithoutProxyUpdatePermissionsBody,
  PutSlackIntegrationSettingsWithoutProxyUpdateSettingsBody,
  PutUserGroupsId200,
  PutUserGroupsIdBody,
  PutUserUiSettings200,
  PutUserUiSettingsBody,
  PutUsersIdActivate200,
  PutUsersIdDeactivate200,
  PutUsersIdGrantAdmin200,
  PutUsersIdGrantReadOnly200,
  PutUsersIdRevokeAdmin200,
  PutUsersIdRevokeReadOnly200,
  PutUsersResetPassword200,
  PutUsersResetPasswordBody,
  PutUsersResetPasswordEmailBody,
  PutUsersSendInvitationEmail200,
  PutUsersSendInvitationEmailBody,
  PutUsersUpdateImageUrlCache200,
  PutUsersUpdateImageUrlCacheBody,
  QuestionnaireSettingParams,
  SamlAuthSetting,
  SesSettingParams,
  SesSettingResponseParams,
  ShareLinkSetting,
  ShareLinkSimple,
  SiteUrlSettingParams,
  SmtpSettingParams,
  StatisticsUserResponse,
  SyncStatus,
  UserNotification,
  UserNotificationParams,
  XssParams,
} from './index.schemas';

import { customInstance } from '../../utils/axios-instance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getGrowirestapiv3 = () => {
  /**
   * Get user group relations
   * @summary /external-user-group-relations
   */
  const getExternalUserGroupRelations = (params?: GetExternalUserGroupRelationsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalUserGroupRelations200>({ url: `/external-user-group-relations`, method: 'GET', params }, options);
  };

  /**
   * @summary /external-user-groups
   */
  const getExternalUserGroups = (params?: GetExternalUserGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalUserGroups200>({ url: `/external-user-groups`, method: 'GET', params }, options);
  };

  /**
   * @summary /external-user-groups/ancestors
   */
  const getExternalUserGroupsAncestors = (params: GetExternalUserGroupsAncestorsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalUserGroupsAncestors200>({ url: `/external-user-groups/ancestors`, method: 'GET', params }, options);
  };

  /**
   * @summary /external-user-groups/children
   */
  const getExternalUserGroupsChildren = (params?: GetExternalUserGroupsChildrenParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalUserGroupsChildren200>({ url: `/external-user-groups/children`, method: 'GET', params }, options);
  };

  /**
   * @summary /external-user-groups/{id}
   */
  const getExternalUserGroupsId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalUserGroupsId200>({ url: `/external-user-groups/${id}`, method: 'GET' }, options);
  };

  /**
   * @summary /external-user-groups/{id}
   */
  const deleteExternalUserGroupsId = (id: string, params: DeleteExternalUserGroupsIdParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteExternalUserGroupsId200>({ url: `/external-user-groups/${id}`, method: 'DELETE', params }, options);
  };

  /**
   * @summary /external-user-groups/{id}
   */
  const putExternalUserGroupsId = (id: string, putExternalUserGroupsIdBody: PutExternalUserGroupsIdBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutExternalUserGroupsId200>(
      { url: `/external-user-groups/${id}`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putExternalUserGroupsIdBody },
      options,
    );
  };

  /**
   * @summary /external-user-groups/{id}/external-user-group-relations
   */
  const getExternalUserGroupsIdExternalUserGroupRelations = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalUserGroupsIdExternalUserGroupRelations200>(
      { url: `/external-user-groups/${id}/external-user-group-relations`, method: 'GET' },
      options,
    );
  };

  /**
   * @summary Get LDAP sync settings
   */
  const getExternalUserGroupsLdapSyncSettings = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalUserGroupsLdapSyncSettings200>({ url: `/external-user-groups/ldap/sync-settings`, method: 'GET' }, options);
  };

  /**
   * @summary Update LDAP sync settings
   */
  const putExternalUserGroupsLdapSyncSettings = (
    putExternalUserGroupsLdapSyncSettingsBody: PutExternalUserGroupsLdapSyncSettingsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutExternalUserGroupsLdapSyncSettings204>(
      {
        url: `/external-user-groups/ldap/sync-settings`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putExternalUserGroupsLdapSyncSettingsBody,
      },
      options,
    );
  };

  /**
   * @summary Get Keycloak sync settings
   */
  const getExternalUserGroupsKeycloakSyncSettings = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalUserGroupsKeycloakSyncSettings200>({ url: `/external-user-groups/keycloak/sync-settings`, method: 'GET' }, options);
  };

  /**
   * @summary /external-user-groups/keycloak/sync-settings
   */
  const putExternalUserGroupsKeycloakSyncSettings = (
    putExternalUserGroupsKeycloakSyncSettingsBody: PutExternalUserGroupsKeycloakSyncSettingsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutExternalUserGroupsKeycloakSyncSettings204>(
      {
        url: `/external-user-groups/keycloak/sync-settings`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putExternalUserGroupsKeycloakSyncSettingsBody,
      },
      options,
    );
  };

  /**
   * @summary Start LDAP sync process
   */
  const putExternalUserGroupsLdapSync = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutExternalUserGroupsLdapSync202>({ url: `/external-user-groups/ldap/sync`, method: 'PUT' }, options);
  };

  /**
   * @summary /external-user-groups/keycloak/sync
   */
  const putExternalUserGroupsKeycloakSync = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutExternalUserGroupsKeycloakSync202>({ url: `/external-user-groups/keycloak/sync`, method: 'PUT' }, options);
  };

  /**
   * @summary /external-user-groups/ldap/sync-status
   */
  const getExternalUserGroupsLdapSyncStatus = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<SyncStatus>({ url: `/external-user-groups/ldap/sync-status`, method: 'GET' }, options);
  };

  /**
   * Get questionnaire orders
   * @summary /questionnaire/orders
   */
  const getQuestionnaireOrders = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetQuestionnaireOrders200>({ url: `/questionnaire/orders`, method: 'GET' }, options);
  };

  /**
   * Get questionnaire is enabled
   * @summary /questionnaire/is-enabled
   */
  const getQuestionnaireIsEnabled = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetQuestionnaireIsEnabled200>({ url: `/questionnaire/is-enabled`, method: 'GET' }, options);
  };

  /**
   * Post proactive questionnaire answer
   * @summary /questionnaire/proactive/answer
   */
  const postQuestionnaireProactiveAnswer = (
    postQuestionnaireProactiveAnswerBody: PostQuestionnaireProactiveAnswerBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostQuestionnaireProactiveAnswer200>(
      { url: `/questionnaire/proactive/answer`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postQuestionnaireProactiveAnswerBody },
      options,
    );
  };

  /**
   * Post questionnaire answer
   * @summary /questionnaire/answer
   */
  const putQuestionnaireAnswer = (putQuestionnaireAnswerBody: PutQuestionnaireAnswerBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutQuestionnaireAnswer201 | PutQuestionnaireAnswer204>(
      { url: `/questionnaire/answer`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putQuestionnaireAnswerBody },
      options,
    );
  };

  /**
   * Skip questionnaire
   * @summary /questionnaire/skip
   */
  const putQuestionnaireSkip = (putQuestionnaireSkipBody: PutQuestionnaireSkipBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutQuestionnaireSkip201 | PutQuestionnaireSkip204>(
      { url: `/questionnaire/skip`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putQuestionnaireSkipBody },
      options,
    );
  };

  /**
   * Deny questionnaire
   * @summary /questionnaire/deny
   */
  const putQuestionnaireDeny = (putQuestionnaireDenyBody: PutQuestionnaireDenyBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutQuestionnaireDeny201 | PutQuestionnaireDeny204>(
      { url: `/questionnaire/deny`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putQuestionnaireDenyBody },
      options,
    );
  };

  /**
   * Get all templates
   * @summary /templates
   */
  const getTemplates = (params?: GetTemplatesParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetTemplates200>({ url: `/templates`, method: 'GET', params }, options);
  };

  /**
   * Get a preset template
   * @summary /templates/preset-templates/{templateId}/{locale}
   */
  const getTemplatesPresetTemplatesTemplateIdLocale = (templateId: string, locale: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetTemplatesPresetTemplatesTemplateIdLocale200>(
      { url: `/templates/preset-templates/${templateId}/${locale}`, method: 'GET' },
      options,
    );
  };

  /**
   * Get a plugin template
   * @summary /templates/plugin-templates/{organizationId}/{reposId}/{templateId}/{locale}
   */
  const getTemplatesPluginTemplatesOrganizationIdReposIdTemplateIdLocale = (
    organizationId: string,
    reposId: string,
    templateId: string,
    locale: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<GetTemplatesPluginTemplatesOrganizationIdReposIdTemplateIdLocale200>(
      { url: `/templates/plugin-templates/${organizationId}/${reposId}/${templateId}/${locale}`, method: 'GET' },
      options,
    );
  };

  /**
   * Install a plugin
   * @summary /plugins
   */
  const postPlugins = (postPluginsBody: PostPluginsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostPlugins200>({ url: `/plugins`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postPluginsBody }, options);
  };

  /**
   * Activate a plugin
   * @summary /plugins/{id}/activate
   */
  const putPluginsIdActivate = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutPluginsIdActivate200>({ url: `/plugins/${id}/activate`, method: 'PUT' }, options);
  };

  /**
   * Remove a plugin
   * @summary /plugins/{id}/remove
   */
  const deletePluginsIdRemove = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeletePluginsIdRemove200>({ url: `/plugins/${id}/remove`, method: 'DELETE' }, options);
  };

  /**
   * @summary /activity
   */
  const getActivity = (params?: GetActivityParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ActivityResponse>({ url: `/activity`, method: 'GET', params }, options);
  };

  /**
   * Get adminHome parameters
   * @summary /admin-home
   */
  const getAdminHome = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAdminHome200>({ url: `/admin-home/`, method: 'GET' }, options);
  };

  /**
   * get app setting params
   * @summary /app-settings
   */
  const getAppSettings = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAppSettings200>({ url: `/app-settings`, method: 'GET' }, options);
  };

  /**
   * Update app setting
   * @summary /app-settings/app-setting
   */
  const putAppSettingsAppSetting = (appSettingPutParams: AppSettingPutParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutAppSettingsAppSetting200>(
      { url: `/app-settings/app-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: appSettingPutParams },
      options,
    );
  };

  /**
   * Update site url setting
   * @summary /app-settings/site-url-setting
   */
  const putAppSettingsSiteUrlSetting = (siteUrlSettingParams: SiteUrlSettingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutAppSettingsSiteUrlSetting200>(
      { url: `/app-settings/site-url-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: siteUrlSettingParams },
      options,
    );
  };

  /**
   * Update smtp setting
   * @summary /app-settings/smtp-setting
   */
  const putAppSettingsSmtpSetting = (smtpSettingParams: SmtpSettingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutAppSettingsSmtpSetting200>(
      { url: `/app-settings/smtp-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: smtpSettingParams },
      options,
    );
  };

  /**
   * Send test mail for smtp
   * @summary /app-settings/smtp-setting
   */
  const postAppSettingsSmtpTest = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostAppSettingsSmtpTest200>({ url: `/app-settings/smtp-test`, method: 'POST' }, options);
  };

  /**
   * Update ses setting
   * @summary /app-settings/ses-setting
   */
  const putAppSettingsSesSetting = (sesSettingParams: SesSettingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<SesSettingResponseParams>(
      { url: `/app-settings/ses-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: sesSettingParams },
      options,
    );
  };

  /**
   * Update fileUploadSetting
   * @summary /app-settings/file-upload-setting
   */
  const putAppSettingsFileUploadSettings = (fileUploadSettingParams: FileUploadSettingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutAppSettingsFileUploadSettings200>(
      { url: `/app-settings/file-upload-settings`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: fileUploadSettingParams },
      options,
    );
  };

  /**
   * Update QuestionnaireSetting
   * @summary /app-settings/questionnaire-settings
   */
  const putAppSettingsQuestionnaireSettings = (questionnaireSettingParams: QuestionnaireSettingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutAppSettingsQuestionnaireSettings200>(
      { url: `/app-settings/questionnaire-settings`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: questionnaireSettingParams },
      options,
    );
  };

  /**
   * Update V5SchemaMigration
   * @summary AccessToken supported.
   */
  const postAppSettingsV5SchemaMigration = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostAppSettingsV5SchemaMigration200>({ url: `/app-settings/v5-schema-migration`, method: 'POST' }, options);
  };

  /**
   * Update MaintenanceMode
   * @summary AccessToken supported.
   */
  const postAppSettingsMaintenanceMode = (
    postAppSettingsMaintenanceModeBody: PostAppSettingsMaintenanceModeBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostAppSettingsMaintenanceMode200>(
      { url: `/app-settings/maintenance-mode`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postAppSettingsMaintenanceModeBody },
      options,
    );
  };

  /**
   * Get attachment list
   */
  const getAttachmentList = (params: GetAttachmentListParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<AttachmentPaginateResult>({ url: `/attachment/list`, method: 'GET', params }, options);
  };

  /**
   * Get available capacity of uploaded file with GridFS
   * @summary /attachment/limit
   */
  const getAttachmentLimit = (params: GetAttachmentLimitParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAttachmentLimit200>({ url: `/attachment/limit`, method: 'GET', params }, options);
  };

  /**
   * Add attachment to the page
   * @summary /attachment
   */
  const postAttachment = (postAttachmentBody: PostAttachmentBodyOne | PostAttachmentBodyTwo, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostAttachment200>({ url: `/attachment`, method: 'POST', data: postAttachmentBody }, options);
  };

  /**
   * Get attachment
   */
  const getAttachmentId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAttachmentId200>({ url: `/attachment/${id}`, method: 'GET' }, options);
  };

  /**
   * Create a new bookmark folder
   * @summary Create bookmark folder
   */
  const postBookmarkFolder = (postBookmarkFolderBody: PostBookmarkFolderBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostBookmarkFolder200>(
      { url: `/bookmark-folder`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postBookmarkFolderBody },
      options,
    );
  };

  /**
   * Update a bookmark folder
   * @summary Update bookmark folder
   */
  const putBookmarkFolder = (putBookmarkFolderBody: PutBookmarkFolderBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutBookmarkFolder200>(
      { url: `/bookmark-folder`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putBookmarkFolderBody },
      options,
    );
  };

  /**
   * List bookmark folders of a user
   * @summary List bookmark folders of a user
   */
  const getBookmarkFolderListUserId = (userId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetBookmarkFolderListUserId200>({ url: `/bookmark-folder/list/${userId}`, method: 'GET' }, options);
  };

  /**
   * Delete a bookmark folder and its children
   * @summary Delete bookmark folder
   */
  const deleteBookmarkFolderId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteBookmarkFolderId200>({ url: `/bookmark-folder/${id}`, method: 'DELETE' }, options);
  };

  /**
   * Update a bookmark folder
   * @summary Update bookmark folder
   */
  const postBookmarkFolderAddBookmarkToFolder = (
    postBookmarkFolderAddBookmarkToFolderBody: PostBookmarkFolderAddBookmarkToFolderBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostBookmarkFolderAddBookmarkToFolder200>(
      {
        url: `/bookmark-folder/add-bookmark-to-folder`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postBookmarkFolderAddBookmarkToFolderBody,
      },
      options,
    );
  };

  /**
   * Update a bookmark in a folder
   * @summary Update bookmark in folder
   */
  const putBookmarkFolderUpdateBookmark = (
    putBookmarkFolderUpdateBookmarkBody: PutBookmarkFolderUpdateBookmarkBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutBookmarkFolderUpdateBookmark200>(
      { url: `/bookmark-folder/update-bookmark`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putBookmarkFolderUpdateBookmarkBody },
      options,
    );
  };

  /**
   * Get bookmarked info
   * @summary /bookmarks/info
   */
  const getBookmarksInfo = (params?: GetBookmarksInfoParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<BookmarkInfo>({ url: `/bookmarks/info`, method: 'GET', params }, options);
  };

  /**
   * Get my bookmarked status
   * @summary /bookmarks/{userId}
   */
  const getBookmarksUserId = (userId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Bookmarks>({ url: `/bookmarks/${userId}`, method: 'GET' }, options);
  };

  /**
   * Update bookmarked status
   * @summary /bookmarks
   */
  const putBookmarks = (bookmarkParams: BookmarkParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutBookmarks200>(
      { url: `/bookmarks`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: bookmarkParams },
      options,
    );
  };

  /**
   * Get customize parameters
   * @summary /customize-setting
   */
  const getCustomizeSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetCustomizeSetting200>({ url: `/customize-setting`, method: 'GET' }, options);
  };

  /**
   * Get layout
   * @summary /customize-setting/layout
   */
  const getCustomizeSettingLayout = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CustomizeLayout>({ url: `/customize-setting/layout`, method: 'GET' }, options);
  };

  /**
   * Update layout
   * @summary /customize-setting/layout
   */
  const putCustomizeSettingLayout = (customizeLayout: CustomizeLayout, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutCustomizeSettingLayout200>(
      { url: `/customize-setting/layout`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeLayout },
      options,
    );
  };

  /**
   * Get theme
   * @summary /customize-setting/theme
   */
  const getCustomizeSettingTheme = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetCustomizeSettingTheme200>({ url: `/customize-setting/theme`, method: 'GET' }, options);
  };

  /**
   * Update theme
   * @summary /customize-setting/theme
   */
  const putCustomizeSettingTheme = (customizeTheme: CustomizeTheme, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutCustomizeSettingTheme200>(
      { url: `/customize-setting/theme`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeTheme },
      options,
    );
  };

  /**
   * Get sidebar
   * @summary /customize-setting/sidebar
   */
  const getCustomizeSettingSidebar = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CustomizeSidebar>({ url: `/customize-setting/sidebar`, method: 'GET' }, options);
  };

  /**
   * Update sidebar
   * @summary /customize-setting/sidebar
   */
  const putCustomizeSettingSidebar = (customizeSidebar: CustomizeSidebar, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutCustomizeSettingSidebar200>(
      { url: `/customize-setting/sidebar`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeSidebar },
      options,
    );
  };

  /**
   * Update function
   * @summary /customize-setting/function
   */
  const putCustomizeSettingFunction = (customizeFunction: CustomizeFunction, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutCustomizeSettingFunction200>(
      { url: `/customize-setting/function`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeFunction },
      options,
    );
  };

  /**
   * Update presentation
   * @summary /customize-setting/presentation
   */
  const putCustomizeSettingPresentation = (customizePresentation: CustomizePresentation, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutCustomizeSettingPresentation200>(
      { url: `/customize-setting/presentation`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizePresentation },
      options,
    );
  };

  /**
   * Update highlight
   * @summary /customize-setting/highlight
   */
  const putCustomizeSettingHighlight = (customizeHighlight: CustomizeHighlight, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutCustomizeSettingHighlight200>(
      { url: `/customize-setting/highlight`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeHighlight },
      options,
    );
  };

  /**
   * Update title
   * @summary /customize-setting/customizeTitle
   */
  const putCustomizeSettingCustomizeTitle = (customizeTitle: CustomizeTitle, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutCustomizeSettingCustomizeTitle200>(
      { url: `/customize-setting/customizeTitle`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeTitle },
      options,
    );
  };

  /**
   * Update noscript
   * @summary /customize-setting/customize-noscript
   */
  const putCustomizeSettingCustomizeNoscript = (customizeNoscript: CustomizeNoscript, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutCustomizeSettingCustomizeNoscript200>(
      { url: `/customize-setting/customize-noscript`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeNoscript },
      options,
    );
  };

  /**
   * Update customize css
   * @summary /customize-setting/customize-css
   */
  const putCustomizeSettingCustomizeCss = (customizeCss: CustomizeCss, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutCustomizeSettingCustomizeCss200>(
      { url: `/customize-setting/customize-css`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeCss },
      options,
    );
  };

  /**
   * Update customize script
   * @summary /customize-setting/customize-script
   */
  const putCustomizeSettingCustomizeScript = (customizeScript: CustomizeScript, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutCustomizeSettingCustomizeScript200>(
      { url: `/customize-setting/customize-script`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeScript },
      options,
    );
  };

  /**
   * Update customize logo
   * @summary /customize-setting/customize-logo
   */
  const putCustomizeSettingCustomizeLogo = (customizeLogo: CustomizeLogo, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutCustomizeSettingCustomizeLogo200>(
      { url: `/customize-setting/customize-logo`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeLogo },
      options,
    );
  };

  /**
   * Upload brand logo
   * @summary /customize-setting/upload-brand-logo
   */
  const putCustomizeSettingUploadBrandLogo = (
    putCustomizeSettingUploadBrandLogoBody: PutCustomizeSettingUploadBrandLogoBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    const formData = new FormData();
    if (putCustomizeSettingUploadBrandLogoBody.file !== undefined) {
      formData.append(`file`, putCustomizeSettingUploadBrandLogoBody.file);
    }

    return customInstance<PutCustomizeSettingUploadBrandLogo200>(
      { url: `/customize-setting/upload-brand-logo`, method: 'PUT', headers: { 'Content-Type': 'multipart/form-data' }, data: formData },
      options,
    );
  };

  /**
   * Delete brand logo
   * @summary /customize-setting/delete-brand-logo
   */
  const deleteCustomizeSettingDeleteBrandLogo = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<unknown>({ url: `/customize-setting/delete-brand-logo`, method: 'DELETE' }, options);
  };

  /**
   * get properties of stored zip files for export
   * @summary /export/status
   */
  const getExportStatus = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExportStatus200>({ url: `/export/status`, method: 'GET' }, options);
  };

  /**
   * generate zipped jsons for collections
   * @summary /export
   */
  const postExport = (postExportBody: PostExportBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostExport200>({ url: `/export`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postExportBody }, options);
  };

  /**
   * delete the file
   * @summary /export/{fileName}
   */
  const deleteExportFileName = (fileName: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteExportFileName200>({ url: `/export/${fileName}`, method: 'DELETE' }, options);
  };

  /**
   * @summary Request password reset
   */
  const postForgotPassword = (postForgotPasswordBody: PostForgotPasswordBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostForgotPassword200>(
      { url: `/forgot-password`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postForgotPasswordBody },
      options,
    );
  };

  /**
   * @summary Reset password
   */
  const putForgotPassword = (putForgotPasswordBody: PutForgotPasswordBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutForgotPassword200>(
      { url: `/forgot-password`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putForgotPasswordBody },
      options,
    );
  };

  /**
   * @summary /g2g-transfer/files
   */
  const getG2gTransferFiles = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetG2gTransferFiles200>({ url: `/g2g-transfer/files`, method: 'GET' }, options);
  };

  /**
   * @summary /g2g-transfer
   */
  const postG2gTransfer = (postG2gTransferBody: PostG2gTransferBody, options?: SecondParameter<typeof customInstance>) => {
    const formData = new FormData();
    if (postG2gTransferBody.file !== undefined) {
      formData.append(`file`, postG2gTransferBody.file);
    }
    if (postG2gTransferBody.collections !== undefined) {
      postG2gTransferBody.collections.forEach((value) => formData.append(`collections`, value));
    }
    if (postG2gTransferBody.optionsMap !== undefined) {
      formData.append(`optionsMap`, JSON.stringify(postG2gTransferBody.optionsMap));
    }
    if (postG2gTransferBody.operatorUserId !== undefined) {
      formData.append(`operatorUserId`, postG2gTransferBody.operatorUserId);
    }
    if (postG2gTransferBody.uploadConfigs !== undefined) {
      formData.append(`uploadConfigs`, JSON.stringify(postG2gTransferBody.uploadConfigs));
    }

    return customInstance<PostG2gTransfer200>(
      { url: `/g2g-transfer`, method: 'POST', headers: { 'Content-Type': 'multipart/form-data' }, data: formData },
      options,
    );
  };

  /**
   * @summary /g2g-transfer/attachment
   */
  const postG2gTransferAttachment = (postG2gTransferAttachmentBody: PostG2gTransferAttachmentBody, options?: SecondParameter<typeof customInstance>) => {
    const formData = new FormData();
    if (postG2gTransferAttachmentBody.file !== undefined) {
      formData.append(`file`, postG2gTransferAttachmentBody.file);
    }
    if (postG2gTransferAttachmentBody.attachmentMetadata !== undefined) {
      formData.append(`attachmentMetadata`, JSON.stringify(postG2gTransferAttachmentBody.attachmentMetadata));
    }

    return customInstance<PostG2gTransferAttachment200>(
      { url: `/g2g-transfer/attachment`, method: 'POST', headers: { 'Content-Type': 'multipart/form-data' }, data: formData },
      options,
    );
  };

  /**
   * @summary /g2g-transfer/growi-info
   */
  const getG2gTransferGrowiInfo = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetG2gTransferGrowiInfo200>({ url: `/g2g-transfer/growi-info`, method: 'GET' }, options);
  };

  /**
   * @summary /g2g-transfer/generate-key
   */
  const postG2gTransferGenerateKey = (postG2gTransferGenerateKeyBody: PostG2gTransferGenerateKeyBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostG2gTransferGenerateKey200>(
      { url: `/g2g-transfer/generate-key`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postG2gTransferGenerateKeyBody },
      options,
    );
  };

  /**
   * @summary /g2g-transfer/transfer
   */
  const postG2gTransferTransfer = (postG2gTransferTransferBody: PostG2gTransferTransferBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostG2gTransferTransfer200>(
      { url: `/g2g-transfer/transfer`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postG2gTransferTransferBody },
      options,
    );
  };

  /**
   * Check whether the server is healthy or not
   * @summary /healthcheck
   */
  const getHealthcheck = (params?: GetHealthcheckParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetHealthcheck200>({ url: `/healthcheck`, method: 'GET', params }, options);
  };

  /**
   * Get import settings params
   * @summary /import
   */
  const getImport = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetImport200>({ url: `/import`, method: 'GET' }, options);
  };

  /**
   * import a collection from a zipped json
   * @summary /import
   */
  const postImport = (postImportBody: PostImportBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/import`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postImportBody }, options);
  };

  /**
   * Get properties of stored zip files for import
   * @summary /import/status
   */
  const getImportStatus = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetImportStatus200>({ url: `/import/status`, method: 'GET' }, options);
  };

  /**
   * upload a zip file
   * @summary /import/upload
   */
  const postImportUpload = (postImportUploadBody: PostImportUploadBody, options?: SecondParameter<typeof customInstance>) => {
    const formData = new FormData();
    if (postImportUploadBody.file !== undefined) {
      formData.append(`file`, postImportUploadBody.file);
    }

    return customInstance<FileImportResponse>(
      { url: `/import/upload`, method: 'POST', headers: { 'Content-Type': 'multipart/form-data' }, data: formData },
      options,
    );
  };

  /**
   * Delete all zip files
   * @summary /import/all
   */
  const deleteImportAll = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/import/all`, method: 'DELETE' }, options);
  };

  /**
   * Get the list of in-app notifications
   * @summary /in-app-notification/list
   */
  const getInAppNotificationList = (params?: GetInAppNotificationListParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<InAppNotificationListResponse>({ url: `/in-app-notification/list`, method: 'GET', params }, options);
  };

  /**
   * Get the status of in-app notifications
   * @summary /in-app-notification/status
   */
  const getInAppNotificationStatus = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetInAppNotificationStatus200>({ url: `/in-app-notification/status`, method: 'GET' }, options);
  };

  /**
   * Open the in-app notification
   * @summary /in-app-notification/open
   */
  const postInAppNotificationOpen = (postInAppNotificationOpenBody: PostInAppNotificationOpenBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostInAppNotificationOpen200>(
      { url: `/in-app-notification/open`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postInAppNotificationOpenBody },
      options,
    );
  };

  /**
   * Open all in-app notifications
   * @summary /in-app-notification/all-statuses-open
   */
  const putInAppNotificationAllStatusesOpen = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/in-app-notification/all-statuses-open`, method: 'PUT' }, options);
  };

  /**
   * Install GROWI
   * @summary /installer
   */
  const postInstaller = (postInstallerBody: PostInstallerBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostInstaller200>(
      { url: `/installer`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postInstallerBody },
      options,
    );
  };

  /**
   * Activate invited user
   * @summary /invited
   */
  const postInvited = (postInvitedBody: PostInvitedBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostInvited200>({ url: `/invited`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postInvitedBody }, options);
  };

  /**
   * Logout the currently authenticated user
   * @summary Logout user
   */
  const postLogout = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/logout`, method: 'POST' }, options);
  };

  /**
   * @summary Get markdown parameters
   */
  const getMarkdownSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetMarkdownSetting200>({ url: `/markdown-setting`, method: 'GET' }, options);
  };

  /**
   * @summary Update lineBreak setting
   */
  const putMarkdownSettingLineBreak = (lineBreakParams: LineBreakParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutMarkdownSettingLineBreak200>(
      { url: `/markdown-setting/lineBreak`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: lineBreakParams },
      options,
    );
  };

  /**
   * @summary Update indent setting
   */
  const putMarkdownSettingIndent = (indentParams: IndentParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutMarkdownSettingIndent200>(
      { url: `/markdown-setting/indent`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: indentParams },
      options,
    );
  };

  /**
   * Update xss
   * @summary Update XSS setting
   */
  const putMarkdownSettingXss = (xssParams: XssParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<XssParams>(
      { url: `/markdown-setting/xss`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: xssParams },
      options,
    );
  };

  /**
   * get mongodb collections names
   * @summary /mongo/collections
   */
  const getMongoCollections = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetMongoCollections200>({ url: `/mongo/collections`, method: 'GET' }, options);
  };

  /**
   * Get notification paramators
   */
  const getNotificationSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetNotificationSetting200>({ url: `/notification-setting/`, method: 'GET' }, options);
  };

  /**
   * add user notification setting
   */
  const postNotificationSettingUserNotification = (userNotificationParams: UserNotificationParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostNotificationSettingUserNotification200>(
      { url: `/notification-setting/user-notification`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: userNotificationParams },
      options,
    );
  };

  /**
   * delete user trigger notification pattern
   */
  const deleteNotificationSettingUserNotificationId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UserNotification>({ url: `/notification-setting/user-notification/${id}`, method: 'DELETE' }, options);
  };

  /**
   * get global notification setting
   */
  const getNotificationSettingGlobalNotificationId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetNotificationSettingGlobalNotificationId200>({ url: `/notification-setting/global-notification/${id}`, method: 'GET' }, options);
  };

  /**
   * update global notification
   */
  const putNotificationSettingGlobalNotificationId = (
    id: string,
    globalNotificationParams: GlobalNotificationParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutNotificationSettingGlobalNotificationId200>(
      {
        url: `/notification-setting/global-notification/${id}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: globalNotificationParams,
      },
      options,
    );
  };

  /**
   * delete global notification pattern
   */
  const deleteNotificationSettingGlobalNotificationId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GlobalNotification>({ url: `/notification-setting/global-notification/${id}`, method: 'DELETE' }, options);
  };

  /**
   * add global notification
   */
  const postNotificationSettingGlobalNotification = (globalNotificationParams: GlobalNotificationParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostNotificationSettingGlobalNotification200>(
      { url: `/notification-setting/global-notification`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: globalNotificationParams },
      options,
    );
  };

  /**
   * Update settings for notify for page grant
   */
  const putNotificationSettingNotifyForPageGrant = (notifyForPageGrant: NotifyForPageGrant, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<NotifyForPageGrant>(
      { url: `/notification-setting/notify-for-page-grant`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: notifyForPageGrant },
      options,
    );
  };

  /**
   * toggle enabled global notification
   */
  const putNotificationSettingGlobalNotificationIdEnabled = (
    id: string,
    putNotificationSettingGlobalNotificationIdEnabledBody: PutNotificationSettingGlobalNotificationIdEnabledBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutNotificationSettingGlobalNotificationIdEnabled200>(
      {
        url: `/notification-setting/global-notification/${id}/enabled`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putNotificationSettingGlobalNotificationIdEnabledBody,
      },
      options,
    );
  };

  /**
   * Get the root page
   * @summary /page-listing/root
   */
  const getPageListingRoot = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageListingRoot200>({ url: `/page-listing/root`, method: 'GET' }, options);
  };

  /**
   * Get the ancestors and children of a page
   * @summary /page-listing/ancestors-children
   */
  const getPageListingAncestorsChildren = (params: GetPageListingAncestorsChildrenParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageListingAncestorsChildren200>({ url: `/page-listing/ancestors-children`, method: 'GET', params }, options);
  };

  /**
   * Get the children of a page
   * @summary /page-listing/children
   */
  const getPageListingChildren = (params?: GetPageListingChildrenParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageListingChildren200>({ url: `/page-listing/children`, method: 'GET', params }, options);
  };

  /**
   * Get the information of a page
   * @summary /page-listing/info
   */
  const getPageListingInfo = (params?: GetPageListingInfoParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageListingInfo200>({ url: `/page-listing/info`, method: 'GET', params }, options);
  };

  /**
   * get page by pagePath or pageId
   * @summary Get page
   */
  const getPage = (params?: GetPageParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>({ url: `/page`, method: 'GET', params }, options);
  };

  /**
   * Create page
   * @summary Create page
   */
  const postPage = (postPageBody: PostPageBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostPage201>({ url: `/page`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postPageBody }, options);
  };

  /**
   * Update page
   */
  const putPage = (putPageBody: PutPageBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutPage200>({ url: `/page`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putPageBody }, options);
  };

  /**
   * Check if a page exists at the specified path
   * @summary Check if page exists
   */
  const getPageExist = (params: GetPageExistParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageExist200>({ url: `/page/exist`, method: 'GET', params }, options);
  };

  /**
   * Update liked status
   * @summary Get page likes
   */
  const putPageLikes = (likeParams: LikeParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>({ url: `/page/likes`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: likeParams }, options);
  };

  /**
   * Retrieve current page info
   * @summary Get page info
   */
  const getPageInfo = (pageParams: PageParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PageInfo>({ url: `/page/info`, method: 'GET', headers: { 'Content-Type': 'application/json' } }, options);
  };

  /**
   * Retrieve current page's grant data
   * @summary Get page grant data
   */
  const getPageGrantData = (params?: GetPageGrantDataParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageGrantData200>({ url: `/page/grant-data`, method: 'GET', params }, options);
  };

  /**
   * Check if non-user related groups are granted access to a specific page or its closest ancestor
   * @summary Check if non-user related groups are granted page access
   */
  const getPageNonUserRelatedGroupsGranted = (params: GetPageNonUserRelatedGroupsGrantedParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageNonUserRelatedGroupsGranted200>({ url: `/page/non-user-related-groups-granted`, method: 'GET', params }, options);
  };

  /**
   * Retrieve applicable grant data for a specific page
   * @summary Get applicable grant data
   */
  const getPageApplicableGrant = (params: GetPageApplicableGrantParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageApplicableGrant200>({ url: `/page/applicable-grant`, method: 'GET', params }, options);
  };

  /**
   * Update the grant of a specific page
   * @summary Update page grant
   */
  const putPageIdGrant = (pageId: string, putPageIdGrantBody: PutPageIdGrantBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>({ url: `/${pageId}/grant`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putPageIdGrantBody }, options);
  };

  /**
   * return page's markdown
   */
  const getPageExportPageId = (pageId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/page/export/${pageId}`, method: 'GET' }, options);
  };

  /**
   * Get already exist paths
   * @summary Get already exist paths
   */
  const getPageExistPaths = (params?: GetPageExistPathsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageExistPaths200>({ url: `/page/exist-paths`, method: 'GET', params }, options);
  };

  /**
   * Update subscription status
   * @summary Update subscription status
   */
  const putPageSubscribe = (putPageSubscribeBody: PutPageSubscribeBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>(
      { url: `/page/subscribe`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putPageSubscribeBody },
      options,
    );
  };

  /**
   * Update the content width setting for a specific page
   * @summary Update content width
   */
  const putPageIdContentWidth = (pageId: string, putPageIdContentWidthBody: PutPageIdContentWidthBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutPageIdContentWidth200>(
      { url: `/${pageId}/content-width`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putPageIdContentWidthBody },
      options,
    );
  };

  /**
   * Publish a specific page
   * @summary Publish page
   */
  const putPageIdPublish = (pageId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>({ url: `/${pageId}/publish`, method: 'PUT' }, options);
  };

  /**
   * Unpublish a specific page
   * @summary Unpublish page
   */
  const putPageIdUnpublish = (pageId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>({ url: `/${pageId}/unpublish`, method: 'PUT' }, options);
  };

  /**
   * Retrieve Yjs data for a specific page
   * @summary Get Yjs data
   */
  const getPageIdYjsData = (pageId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageIdYjsData200>({ url: `/${pageId}/yjs-data`, method: 'GET' }, options);
  };

  /**
   * Sync the latest revision body to the Yjs draft for a specific page
   * @summary Sync latest revision body to Yjs draft
   */
  const putPageIdSyncLatestRevisionBodyToYjsDraft = (
    pageId: string,
    putPageIdSyncLatestRevisionBodyToYjsDraftBody: PutPageIdSyncLatestRevisionBodyToYjsDraftBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutPageIdSyncLatestRevisionBodyToYjsDraft200>(
      {
        url: `/${pageId}/sync-latest-revision-body-to-yjs-draft`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putPageIdSyncLatestRevisionBodyToYjsDraftBody,
      },
      options,
    );
  };

  /**
   * Get recently updated pages
   */
  const getPagesRecent = (params?: GetPagesRecentParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/pages/recent`, method: 'GET', params }, options);
  };

  /**
   * Rename page
   */
  const postPagesRename = (postPagesRenameBody: PostPagesRenameBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostPagesRename200>(
      { url: `/pages/rename`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postPagesRenameBody },
      options,
    );
  };

  /**
   * Resume rename page operation
   */
  const postPagesResumeRename = (postPagesResumeRenameBody: PostPagesResumeRenameBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostPagesResumeRename200>(
      { url: `/pages/resume-rename`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postPagesResumeRenameBody },
      options,
    );
  };

  /**
   * empty trash
   */
  const deletePagesEmptyTrash = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeletePagesEmptyTrash200>({ url: `/pages/empty-trash`, method: 'DELETE' }, options);
  };

  /**
   * Get list of pages
   */
  const getPagesList = (params?: GetPagesListParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPagesList200>({ url: `/pages/list`, method: 'GET', params }, options);
  };

  /**
   * Duplicate page
   */
  const postPagesDuplicate = (postPagesDuplicateBody: PostPagesDuplicateBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostPagesDuplicate200>(
      { url: `/pages/duplicate`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postPagesDuplicateBody },
      options,
    );
  };

  /**
   * Get subordinated pages
   */
  const getPagesSubordinatedList = (params?: GetPagesSubordinatedListParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPagesSubordinatedList200>({ url: `/pages/subordinated-list`, method: 'GET', params }, options);
  };

  /**
   * Delete pages
   */
  const postPagesDelete = (postPagesDeleteBody: PostPagesDeleteBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostPagesDelete200>(
      { url: `/pages/delete`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postPagesDeleteBody },
      options,
    );
  };

  /**
   * Convert pages by path
   */
  const postPagesConvertPagesByPath = (postPagesConvertPagesByPathBody: PostPagesConvertPagesByPathBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostPagesConvertPagesByPath200>(
      { url: `/pages/convert-pages-by-path`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postPagesConvertPagesByPathBody },
      options,
    );
  };

  /**
   * Migrate legacy pages
   */
  const postPagesLegacyPagesMigration = (
    postPagesLegacyPagesMigrationBody: PostPagesLegacyPagesMigrationBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostPagesLegacyPagesMigration200>(
      { url: `/pages/legacy-pages-migration`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postPagesLegacyPagesMigrationBody },
      options,
    );
  };

  /**
   * Get V5 migration status
   */
  const getPagesV5MigrationStatus = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPagesV5MigrationStatus200>({ url: `/pages/v5-migration-status`, method: 'GET' }, options);
  };

  /**
   * Get personal parameters
   * @summary /personal-setting
   */
  const getPersonalSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPersonalSetting200>({ url: `/personal-setting`, method: 'GET' }, options);
  };

  /**
   * Update personal setting
   * @summary /personal-setting
   */
  const putPersonalSetting = (personalSettings: PersonalSettings, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutPersonalSetting200>(
      { url: `/personal-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: personalSettings },
      options,
    );
  };

  /**
   * Get whether a password has been set
   * @summary /personal-setting
   */
  const getPersonalSettingIsPasswordSet = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPersonalSettingIsPasswordSet200>({ url: `/personal-setting/is-password-set`, method: 'GET' }, options);
  };

  /**
   * Update user image type
   * @summary /personal-setting/image-type
   */
  const putPersonalSettingImageType = (putPersonalSettingImageTypeBody: PutPersonalSettingImageTypeBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutPersonalSettingImageType200>(
      { url: `/personal-setting/image-type`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putPersonalSettingImageTypeBody },
      options,
    );
  };

  /**
   * Get external accounts that linked current user
   * @summary /personal-setting/external-accounts
   */
  const getPersonalSettingExternalAccounts = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPersonalSettingExternalAccounts200>({ url: `/personal-setting/external-accounts`, method: 'GET' }, options);
  };

  /**
   * Update user password
   * @summary /personal-setting/password
   */
  const putPersonalSettingPassword = (putPersonalSettingPasswordBody: PutPersonalSettingPasswordBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutPersonalSettingPassword200>(
      { url: `/personal-setting/password`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putPersonalSettingPasswordBody },
      options,
    );
  };

  /**
   * Update user api token
   * @summary /personal-setting/api-token
   */
  const putPersonalSettingApiToken = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutPersonalSettingApiToken200>({ url: `/personal-setting/api-token`, method: 'PUT' }, options);
  };

  /**
   * associate Ldap account
   * @summary /personal-setting/associate-ldap
   */
  const putPersonalSettingAssociateLdap = (
    putPersonalSettingAssociateLdapBody: PutPersonalSettingAssociateLdapBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutPersonalSettingAssociateLdap200>(
      { url: `/personal-setting/associate-ldap`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putPersonalSettingAssociateLdapBody },
      options,
    );
  };

  /**
   * disassociate Ldap account
   * @summary /personal-setting/disassociate-ldap
   */
  const putPersonalSettingDisassociateLdap = (disassociateUser: DisassociateUser, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutPersonalSettingDisassociateLdap200>(
      { url: `/personal-setting/disassociate-ldap`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: disassociateUser },
      options,
    );
  };

  /**
   * Put editor preferences
   * @summary /personal-setting/editor-settings
   */
  const putPersonalSettingEditorSettings = (
    putPersonalSettingEditorSettingsBody: PutPersonalSettingEditorSettingsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutPersonalSettingEditorSettings200>(
      { url: `/personal-setting/editor-settings`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putPersonalSettingEditorSettingsBody },
      options,
    );
  };

  /**
   * Get editor preferences
   * @summary /personal-setting/editor-settings
   */
  const getPersonalSettingEditorSettings = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPersonalSettingEditorSettings200>({ url: `/personal-setting/editor-settings`, method: 'GET' }, options);
  };

  /**
   * Put InAppNotificationSettings
   * @summary /personal-setting/in-app-notification-settings
   */
  const putPersonalSettingInAppNotificationSettings = (
    putPersonalSettingInAppNotificationSettingsBody: PutPersonalSettingInAppNotificationSettingsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutPersonalSettingInAppNotificationSettings200>(
      {
        url: `/personal-setting/in-app-notification-settings`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putPersonalSettingInAppNotificationSettingsBody,
      },
      options,
    );
  };

  /**
   * Get InAppNotificationSettings
   * @summary personal-setting/in-app-notification-settings
   */
  const getPersonalSettingInAppNotificationSettings = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPersonalSettingInAppNotificationSettings200>({ url: `/personal-setting/in-app-notification-settings`, method: 'GET' }, options);
  };

  /**
   * Update the questionnaire settings for the current user
   * @summary /personal-setting/questionnaire-settings
   */
  const putPersonalSettingQuestionnaireSettings = (
    putPersonalSettingQuestionnaireSettingsBody: PutPersonalSettingQuestionnaireSettingsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutPersonalSettingQuestionnaireSettings200>(
      {
        url: `/personal-setting/questionnaire-settings`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putPersonalSettingQuestionnaireSettingsBody,
      },
      options,
    );
  };

  /**
   * Get revisions by page id
   */
  const getRevisionsList = (params?: GetRevisionsListParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetRevisionsList200>({ url: `/revisions/list`, method: 'GET', params }, options);
  };

  /**
   * Get one revision by id
   */
  const getRevisionsId = (id: string, params: GetRevisionsIdParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetRevisionsId200>({ url: `/revisions/${id}`, method: 'GET', params }, options);
  };

  /**
   * Get current status of indices
   * @summary /search/indices
   */
  const getSearchIndices = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSearchIndices200>({ url: `/search/indices`, method: 'GET' }, options);
  };

  /**
   * Operate indices
   * @summary /search/indices
   */
  const putSearchIndices = (putSearchIndicesBody: PutSearchIndicesBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSearchIndices200>(
      { url: `/search/indices`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putSearchIndicesBody },
      options,
    );
  };

  /**
   * Reconnect to Elasticsearch
   * @summary /search/connection
   */
  const postSearchConnection = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/search/connection`, method: 'POST' }, options);
  };

  /**
   * Get security paramators
   */
  const getSecuritySetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSecuritySetting200>({ url: `/security-setting/`, method: 'GET' }, options);
  };

  /**
   * Update authentication isEnabled
   */
  const putSecuritySettingAuthenticationEnabled = (
    putSecuritySettingAuthenticationEnabledBody: PutSecuritySettingAuthenticationEnabledBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutSecuritySettingAuthenticationEnabled200>(
      {
        url: `/security-setting/authentication/enabled`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putSecuritySettingAuthenticationEnabledBody,
      },
      options,
    );
  };

  /**
   * Get setup strategies for passport
   * @summary /security-setting/authentication
   */
  const getSecuritySettingAuthentication = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSecuritySettingAuthentication200>({ url: `/security-setting/authentication`, method: 'GET' }, options);
  };

  /**
   * Update GeneralSetting
   * @summary /security-setting/general-setting
   */
  const putSecuritySettingGeneralSetting = (generalSetting: GeneralSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GeneralSetting>(
      { url: `/security-setting/general-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: generalSetting },
      options,
    );
  };

  /**
   * Update ShareLink Setting
   * @summary /security-setting/share-link-setting
   */
  const putSecuritySettingShareLinkSetting = (shareLinkSetting: ShareLinkSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSecuritySettingShareLinkSetting200>(
      { url: `/security-setting/share-link-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: shareLinkSetting },
      options,
    );
  };

  /**
   * Get All ShareLinks at Share Link Setting
   * @summary /security-setting/all-share-links
   */
  const getSecuritySettingAllShareLinks = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSecuritySettingAllShareLinks200>({ url: `/security-setting/all-share-links`, method: 'GET' }, options);
  };

  /**
   * Delete All ShareLinks at Share Link Setting
   * @summary /security-setting/all-share-links
   */
  const deleteSecuritySettingAllShareLinks = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteSecuritySettingAllShareLinks200>({ url: `/security-setting/all-share-links`, method: 'DELETE' }, options);
  };

  /**
   * Update LocalSetting
   * @summary /security-setting/local-setting
   */
  const putSecuritySettingLocalSetting = (localSetting: LocalSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSecuritySettingLocalSetting200>(
      { url: `/security-setting/local-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: localSetting },
      options,
    );
  };

  /**
   * Update LDAP setting
   * @summary /security-setting/ldap
   */
  const putSecuritySettingLdap = (ldapAuthSetting: LdapAuthSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSecuritySettingLdap200>(
      { url: `/security-setting/ldap`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: ldapAuthSetting },
      options,
    );
  };

  /**
   * Update SAML setting
   * @summary /security-setting/saml
   */
  const putSecuritySettingSaml = (samlAuthSetting: SamlAuthSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSecuritySettingSaml200>(
      { url: `/security-setting/saml`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: samlAuthSetting },
      options,
    );
  };

  /**
   * Update OpenID Connect setting
   * @summary /security-setting/oidc
   */
  const putSecuritySettingOidc = (oidcAuthSetting: OidcAuthSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSecuritySettingOidc200>(
      { url: `/security-setting/oidc`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: oidcAuthSetting },
      options,
    );
  };

  /**
   * Update google OAuth
   * @summary /security-setting/google-oauth
   */
  const putSecuritySettingGoogleOauth = (googleOAuthSetting: GoogleOAuthSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSecuritySettingGoogleOauth200>(
      { url: `/security-setting/google-oauth`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: googleOAuthSetting },
      options,
    );
  };

  /**
   * Update github OAuth
   * @summary /security-setting/github-oauth
   */
  const putSecuritySettingGithubOauth = (gitHubOAuthSetting: GitHubOAuthSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSecuritySettingGithubOauth200>(
      { url: `/security-setting/github-oauth`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: gitHubOAuthSetting },
      options,
    );
  };

  /**
   * get share links
   */
  const getShareLinks = (params: GetShareLinksParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetShareLinks200>({ url: `/share-links/`, method: 'GET', params }, options);
  };

  /**
   * Create new share link
   */
  const postShareLinks = (params: PostShareLinksParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ShareLinkSimple>({ url: `/share-links/`, method: 'POST', params }, options);
  };

  /**
   * delete all share links related one page
   * @summary delete all share links related one page
   */
  const deleteShareLinks = (params: DeleteShareLinksParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ShareLinkSimple>({ url: `/share-links/`, method: 'DELETE', params }, options);
  };

  /**
   * delete all share links
   * @summary delete all share links
   */
  const deleteShareLinksAll = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteShareLinksAll200>({ url: `/share-links/all`, method: 'DELETE' }, options);
  };

  /**
   * delete one share link related one page
   */
  const deleteShareLinksId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/share-links/${id}`, method: 'DELETE' }, options);
  };

  /**
   * Get slack configuration setting
   */
  const getSlackIntegrationLegacySetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSlackIntegrationLegacySetting200>({ url: `/slack-integration-legacy-setting/`, method: 'GET' }, options);
  };

  /**
   * Update slack configuration setting
   */
  const putSlackIntegrationLegacySetting = (
    putSlackIntegrationLegacySettingBody: PutSlackIntegrationLegacySettingBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutSlackIntegrationLegacySetting200>(
      { url: `/slack-integration-legacy-setting/`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putSlackIntegrationLegacySettingBody },
      options,
    );
  };

  /**
   * Get current settings and connection statuses.
   * @summary /slack-integration-settings
   */
  const getSlackIntegrationSettings = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSlackIntegrationSettings200>({ url: `/slack-integration-settings/`, method: 'GET' }, options);
  };

  /**
   * Put botType setting.
   * @summary /slack-integration/bot-type
   */
  const putSlackIntegrationSettingsBotType = (botType: BotType, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>(
      { url: `/slack-integration-settings/bot-type/`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: botType },
      options,
    );
  };

  /**
   * Delete botType setting.
   * @summary /slack-integration/bot-type
   */
  const deleteSlackIntegrationBotType = (botType: BotType, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>(
      { url: `/slack-integration/bot-type/`, method: 'DELETE', headers: { 'Content-Type': 'application/json' }, data: botType },
      options,
    );
  };

  /**
   * Update customBotWithoutProxy setting.
   * @summary /slack-integration-settings/without-proxy/update-settings
   */
  const putSlackIntegrationSettingsWithoutProxyUpdateSettings = (
    putSlackIntegrationSettingsWithoutProxyUpdateSettingsBody: PutSlackIntegrationSettingsWithoutProxyUpdateSettingsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/slack-integration-settings/without-proxy/update-settings/`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putSlackIntegrationSettingsWithoutProxyUpdateSettingsBody,
      },
      options,
    );
  };

  /**
   * Update customBotWithoutProxy permissions.
   * @summary /slack-integration-settings/without-proxy/update-permissions
   */
  const putSlackIntegrationSettingsWithoutProxyUpdatePermissions = (
    putSlackIntegrationSettingsWithoutProxyUpdatePermissionsBody: PutSlackIntegrationSettingsWithoutProxyUpdatePermissionsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/slack-integration-settings/without-proxy/update-permissions/`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putSlackIntegrationSettingsWithoutProxyUpdatePermissionsBody,
      },
      options,
    );
  };

  /**
   * Generate SlackAppIntegrations
   * @summary /slack-integration-settings/slack-app-integrations
   */
  const postSlackIntegrationSettingsSlackAppIntegrations = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostSlackIntegrationSettingsSlackAppIntegrations200>(
      { url: `/slack-integration-settings/slack-app-integrations`, method: 'POST' },
      options,
    );
  };

  /**
   * Delete accessTokens
   * @summary /slack-integration-settings/slack-app-integrations/:id
   */
  const deleteSlackIntegrationSettingsSlackAppIntegrationsId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteSlackIntegrationSettingsSlackAppIntegrationsId200>(
      { url: `/slack-integration-settings/slack-app-integrations/${id}`, method: 'DELETE' },
      options,
    );
  };

  /**
   * Update proxy uri
   * @summary /slack-integration-settings/proxy-uri
   */
  const putSlackIntegrationSettingsProxyUri = (
    putSlackIntegrationSettingsProxyUriBody: PutSlackIntegrationSettingsProxyUriBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutSlackIntegrationSettingsProxyUri200>(
      {
        url: `/slack-integration-settings/proxy-uri`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putSlackIntegrationSettingsProxyUriBody,
      },
      options,
    );
  };

  /**
   * Make SlackAppTokens primary
   * @summary /slack-integration-settings/slack-app-integrations/:id/makeprimary
   */
  const putSlackIntegrationSettingsSlackAppIntegrationsIdMakeprimary = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/slack-integration-settings/slack-app-integrations/${id}/makeprimary`, method: 'PUT' }, options);
  };

  /**
   * Regenerate SlackAppTokens
   * @summary /slack-integration-settings/slack-app-integrations/:id/regenerate-tokens
   */
  const putSlackIntegrationSettingsSlackAppIntegrationsIdRegenerateTokens = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSlackIntegrationSettingsSlackAppIntegrationsIdRegenerateTokens200>(
      { url: `/slack-integration-settings/slack-app-integrations/${id}/regenerate-tokens`, method: 'PUT' },
      options,
    );
  };

  /**
   * update supported commands
   * @summary /slack-integration-settings/slack-app-integrations/:id/permissions
   */
  const putSlackIntegrationSettingsSlackAppIntegrationsIdPermissions = (
    id: string,
    putSlackIntegrationSettingsSlackAppIntegrationsIdPermissionsBody: PutSlackIntegrationSettingsSlackAppIntegrationsIdPermissionsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutSlackIntegrationSettingsSlackAppIntegrationsIdPermissions200>(
      {
        url: `/slack-integration-settings/slack-app-integrations/${id}/permissions`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putSlackIntegrationSettingsSlackAppIntegrationsIdPermissionsBody,
      },
      options,
    );
  };

  /**
   * Delete botType setting.
   * @summary /slack-integration-settings/slack-app-integrations/:id/relation-test
   */
  const postSlackIntegrationSettingsSlackAppIntegrationsIdRelationTest = (
    id: string,
    postSlackIntegrationSettingsSlackAppIntegrationsIdRelationTestBody: PostSlackIntegrationSettingsSlackAppIntegrationsIdRelationTestBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/slack-integration-settings/slack-app-integrations/${id}/relation-test`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postSlackIntegrationSettingsSlackAppIntegrationsIdRelationTestBody,
      },
      options,
    );
  };

  /**
   * Test the connection with slack work space.
   * @summary /slack-integration-settings/without-proxy/test
   */
  const postSlackIntegrationSettingsWithoutProxyTest = (
    postSlackIntegrationSettingsWithoutProxyTestBody: PostSlackIntegrationSettingsWithoutProxyTestBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/slack-integration-settings/without-proxy/test`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postSlackIntegrationSettingsWithoutProxyTestBody,
      },
      options,
    );
  };

  /**
   * Handle Slack commands
   * @summary /slack-integration/commands
   */
  const postSlackIntegrationCommands = (
    postSlackIntegrationCommandsBody: PostSlackIntegrationCommandsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<string>(
      { url: `/slack-integration/commands`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postSlackIntegrationCommandsBody },
      options,
    );
  };

  /**
   * Verify the access token
   * @summary /slack-integration/proxied/verify
   */
  const postSlackIntegrationProxiedVerify = (
    postSlackIntegrationProxiedVerifyBody: PostSlackIntegrationProxiedVerifyBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostSlackIntegrationProxiedVerify200>(
      {
        url: `/slack-integration/proxied/verify`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postSlackIntegrationProxiedVerifyBody,
      },
      options,
    );
  };

  /**
   * Handle Slack commands
   * @summary /slack-integration/proxied/commands
   */
  const postSlackIntegrationProxiedCommands = (
    postSlackIntegrationProxiedCommandsBody: PostSlackIntegrationProxiedCommandsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<string>(
      {
        url: `/slack-integration/proxied/commands`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postSlackIntegrationProxiedCommandsBody,
      },
      options,
    );
  };

  /**
   * Handle Slack interactions
   * @summary /slack-integration/interactions
   */
  const postSlackIntegrationInteractions = (
    postSlackIntegrationInteractionsBody: PostSlackIntegrationInteractionsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      { url: `/slack-integration/interactions`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postSlackIntegrationInteractionsBody },
      options,
    );
  };

  /**
   * Handle Slack interactions
   * @summary /slack-integration/proxied/interactions
   */
  const postSlackIntegrationProxiedInteractions = (
    postSlackIntegrationProxiedInteractionsBody: PostSlackIntegrationProxiedInteractionsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/slack-integration/proxied/interactions`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postSlackIntegrationProxiedInteractionsBody,
      },
      options,
    );
  };

  /**
   * Get supported commands
   * @summary /slack-integration/supported-commands
   */
  const getSlackIntegrationSupportedCommands = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSlackIntegrationSupportedCommands200>({ url: `/slack-integration/supported-commands`, method: 'GET' }, options);
  };

  /**
   * Handle Slack events
   * @summary /slack-integration/events
   */
  const postSlackIntegrationEvents = (postSlackIntegrationEventsBody: PostSlackIntegrationEventsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostSlackIntegrationEvents200>(
      { url: `/slack-integration/events`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postSlackIntegrationEventsBody },
      options,
    );
  };

  /**
   * Handle Slack events
   * @summary /slack-integration/proxied/events
   */
  const postSlackIntegrationProxiedEvents = (
    postSlackIntegrationProxiedEventsBody: PostSlackIntegrationProxiedEventsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostSlackIntegrationProxiedEvents200>(
      {
        url: `/slack-integration/proxied/events`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postSlackIntegrationProxiedEventsBody,
      },
      options,
    );
  };

  /**
   * Get statistics for user
   * @summary /statistics/user
   */
  const getStatisticsUser = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<StatisticsUserResponse>({ url: `/statistics/user`, method: 'GET' }, options);
  };

  /**
   * @summary /complete-registration
   */
  const postCompleteRegistration = (postCompleteRegistrationBody: PostCompleteRegistrationBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostCompleteRegistration200>(
      { url: `/complete-registration`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postCompleteRegistrationBody },
      options,
    );
  };

  /**
   * Gets the user group relations
   * @summary /user-group-relations
   */
  const getUserGroupRelations = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroupRelations200>({ url: `/user-group-relations`, method: 'GET' }, options);
  };

  /**
   * Get usergroups
   * @summary /user-groups
   */
  const getUserGroups = (params?: GetUserGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroups200>({ url: `/user-groups`, method: 'GET', params }, options);
  };

  /**
   * Adds userGroup
   * @summary /user-groups
   */
  const postUserGroups = (postUserGroupsBody: PostUserGroupsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostUserGroups200>(
      { url: `/user-groups`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postUserGroupsBody },
      options,
    );
  };

  /**
   * Get ancestor user groups.
   * @summary /user-groups/ancestors
   */
  const getUserGroupsAncestors = (params: GetUserGroupsAncestorsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroupsAncestors200>({ url: `/user-groups/ancestors`, method: 'GET', params }, options);
  };

  /**
   * Get child user groups
   * @summary /user-groups/children
   */
  const getUserGroupsChildren = (params?: GetUserGroupsChildrenParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroupsChildren200>({ url: `/user-groups/children`, method: 'GET', params }, options);
  };

  /**
   * Get selectable parent UserGroups
   * @summary /selectable-parent-groups
   */
  const getSelectableParentGroups = (params: GetSelectableParentGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSelectableParentGroups200>({ url: `/selectable-parent-groups`, method: 'GET', params }, options);
  };

  /**
   * Get selectable child UserGroups
   * @summary /selectable-child-groups
   */
  const getSelectableChildGroups = (params: GetSelectableChildGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSelectableChildGroups200>({ url: `/selectable-child-groups`, method: 'GET', params }, options);
  };

  /**
   * Get UserGroup from Group ID
   * @summary /user-groups/{id}
   */
  const getUserGroupsId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroupsId200>({ url: `/user-groups/${id}`, method: 'GET' }, options);
  };

  /**
   * Deletes userGroup
   * @summary /user-groups/{id}
   */
  const deleteUserGroupsId = (id: string, params?: DeleteUserGroupsIdParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteUserGroupsId200>({ url: `/user-groups/${id}`, method: 'DELETE', params }, options);
  };

  /**
   * Update userGroup
   * @summary /user-groups/{id}
   */
  const putUserGroupsId = (id: string, putUserGroupsIdBody: PutUserGroupsIdBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUserGroupsId200>(
      { url: `/user-groups/${id}`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putUserGroupsIdBody },
      options,
    );
  };

  /**
   * Get users related to the userGroup
   * @summary /user-groups/{id}/users
   */
  const getUserGroupsIdUsers = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroupsIdUsers200>({ url: `/user-groups/${id}/users`, method: 'GET' }, options);
  };

  /**
   * Get users unrelated to the userGroup
   * @summary /user-groups/{id}/unrelated-users
   */
  const getUserGroupsIdUnrelatedUsers = (id: string, params?: GetUserGroupsIdUnrelatedUsersParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroupsIdUnrelatedUsers200>({ url: `/user-groups/${id}/unrelated-users`, method: 'GET', params }, options);
  };

  /**
   * Add a user to the userGroup
   * @summary /user-groups/{id}/users/{username}
   */
  const postUserGroupsIdUsersUsername = (id: string, username: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostUserGroupsIdUsersUsername200>({ url: `/user-groups/${id}/users/${username}`, method: 'POST' }, options);
  };

  /**
   * remove a user from the userGroup
   * @summary /user-groups/{id}/users/{username}
   */
  const deleteUserGroupsIdUsersUsername = (id: string, username: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteUserGroupsIdUsersUsername200>({ url: `/user-groups/${id}/users/${username}`, method: 'DELETE' }, options);
  };

  /**
   * Get the user group relations for the userGroup
   * @summary /user-groups/{id}/user-group-relations
   */
  const getUserGroupsIdUserGroupRelations = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroupsIdUserGroupRelations200>({ url: `/user-groups/${id}/user-group-relations`, method: 'GET' }, options);
  };

  /**
   * Get closed pages for the userGroup
   * @summary /user-groups/{id}/pages
   */
  const getUserGroupsIdPages = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroupsIdPages200>({ url: `/user-groups/${id}/pages`, method: 'GET' }, options);
  };

  /**
   * Update the user's UI settings
   * @summary /user-ui-settings
   */
  const putUserUiSettings = (putUserUiSettingsBody: PutUserUiSettingsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUserUiSettings200>(
      { url: `/user-ui-settings`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putUserUiSettingsBody },
      options,
    );
  };

  /**
   * Select selected columns from users order by asc or desc
   * @summary /users
   */
  const getUsers = (params?: GetUsersParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUsers200>({ url: `/users`, method: 'GET', params }, options);
  };

  /**
   * @summary /usersIdReacent
   */
  const getIdRecent = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetIdRecent200>({ url: `/${id}/recent`, method: 'GET' }, options);
  };

  /**
   * Create new users and send Emails
   * @summary /users/invite
   */
  const postUsersInvite = (params?: PostUsersInviteParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostUsersInvite200>({ url: `/users/invite`, method: 'POST', params }, options);
  };

  /**
   * Grant user admin
   * @summary /users/{id}/grant-admin
   */
  const putUsersIdGrantAdmin = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUsersIdGrantAdmin200>({ url: `/users/${id}/grant-admin`, method: 'PUT' }, options);
  };

  /**
   * Revoke user admin
   * @summary /users/{id}/revoke-admin
   */
  const putUsersIdRevokeAdmin = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUsersIdRevokeAdmin200>({ url: `/users/${id}/revoke-admin`, method: 'PUT' }, options);
  };

  /**
   * Grant user read only access
   * @summary /users/{id}/grant-read-only
   */
  const putUsersIdGrantReadOnly = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUsersIdGrantReadOnly200>({ url: `/users/${id}/grant-read-only`, method: 'PUT' }, options);
  };

  /**
   * Revoke user read only access
   * @summary /users/{id}/revoke-read-only
   */
  const putUsersIdRevokeReadOnly = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUsersIdRevokeReadOnly200>({ url: `/users/${id}/revoke-read-only`, method: 'PUT' }, options);
  };

  /**
   * Activate user
   * @summary /users/{id}/activate
   */
  const putUsersIdActivate = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUsersIdActivate200>({ url: `/users/${id}/activate`, method: 'PUT' }, options);
  };

  /**
   * Deactivate user
   * @summary /users/{id}/deactivate
   */
  const putUsersIdDeactivate = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUsersIdDeactivate200>({ url: `/users/${id}/deactivate`, method: 'PUT' }, options);
  };

  /**
   * Delete user
   * @summary /users/{id}/remove
   */
  const deleteUsersIdRemove = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteUsersIdRemove200>({ url: `/users/${id}/remove`, method: 'DELETE' }, options);
  };

  /**
   * Get external-account
   * @summary /users/external-accounts
   */
  const getUsersExternalAccounts = (params?: GetUsersExternalAccountsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUsersExternalAccounts200>({ url: `/users/external-accounts`, method: 'GET', params }, options);
  };

  /**
   * Delete ExternalAccount
   * @summary /users/external-accounts/{id}/remove
   */
  const deleteUsersExternalAccountsIdRemove = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteUsersExternalAccountsIdRemove200>({ url: `/users/external-accounts/${id}/remove`, method: 'DELETE' }, options);
  };

  /**
   * update imageUrlCache
   * @summary /users/update.imageUrlCache
   */
  const putUsersUpdateImageUrlCache = (putUsersUpdateImageUrlCacheBody: PutUsersUpdateImageUrlCacheBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUsersUpdateImageUrlCache200>(
      { url: `/users/update.imageUrlCache`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putUsersUpdateImageUrlCacheBody },
      options,
    );
  };

  /**
   * update imageUrlCache
   * @summary /users/reset-password
   */
  const putUsersResetPassword = (putUsersResetPasswordBody: PutUsersResetPasswordBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUsersResetPassword200>(
      { url: `/users/reset-password`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putUsersResetPasswordBody },
      options,
    );
  };

  /**
   * send new password email
   * @summary /users/reset-password-email
   */
  const putUsersResetPasswordEmail = (putUsersResetPasswordEmailBody: PutUsersResetPasswordEmailBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>(
      { url: `/users/reset-password-email`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putUsersResetPasswordEmailBody },
      options,
    );
  };

  /**
   * send invitation email
   * @summary /users/send-invitation-email
   */
  const putUsersSendInvitationEmail = (putUsersSendInvitationEmailBody: PutUsersSendInvitationEmailBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUsersSendInvitationEmail200>(
      { url: `/users/send-invitation-email`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putUsersSendInvitationEmailBody },
      options,
    );
  };

  /**
   * Get list of users
   * @summary /users/list
   */
  const getUsersList = (params?: GetUsersListParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUsersList200>({ url: `/users/list`, method: 'GET', params }, options);
  };

  /**
   * Get list of usernames
   * @summary /users/usernames
   */
  const getUsersUsernames = (params?: GetUsersUsernamesParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUsersUsernames200>({ url: `/users/usernames`, method: 'GET', params }, options);
  };

  /**
   * @summary /login
   */
  const postLogin = (postLoginBody: PostLoginBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostLogin200>({ url: `/login`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postLoginBody }, options);
  };

  /**
   * @summary /register
   */
  const postRegister = (postRegisterBody: PostRegisterBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostRegister200>(
      { url: `/register`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postRegisterBody },
      options,
    );
  };

  return {
    getExternalUserGroupRelations,
    getExternalUserGroups,
    getExternalUserGroupsAncestors,
    getExternalUserGroupsChildren,
    getExternalUserGroupsId,
    deleteExternalUserGroupsId,
    putExternalUserGroupsId,
    getExternalUserGroupsIdExternalUserGroupRelations,
    getExternalUserGroupsLdapSyncSettings,
    putExternalUserGroupsLdapSyncSettings,
    getExternalUserGroupsKeycloakSyncSettings,
    putExternalUserGroupsKeycloakSyncSettings,
    putExternalUserGroupsLdapSync,
    putExternalUserGroupsKeycloakSync,
    getExternalUserGroupsLdapSyncStatus,
    getQuestionnaireOrders,
    getQuestionnaireIsEnabled,
    postQuestionnaireProactiveAnswer,
    putQuestionnaireAnswer,
    putQuestionnaireSkip,
    putQuestionnaireDeny,
    getTemplates,
    getTemplatesPresetTemplatesTemplateIdLocale,
    getTemplatesPluginTemplatesOrganizationIdReposIdTemplateIdLocale,
    postPlugins,
    putPluginsIdActivate,
    deletePluginsIdRemove,
    getActivity,
    getAdminHome,
    getAppSettings,
    putAppSettingsAppSetting,
    putAppSettingsSiteUrlSetting,
    putAppSettingsSmtpSetting,
    postAppSettingsSmtpTest,
    putAppSettingsSesSetting,
    putAppSettingsFileUploadSettings,
    putAppSettingsQuestionnaireSettings,
    postAppSettingsV5SchemaMigration,
    postAppSettingsMaintenanceMode,
    getAttachmentList,
    getAttachmentLimit,
    postAttachment,
    getAttachmentId,
    postBookmarkFolder,
    putBookmarkFolder,
    getBookmarkFolderListUserId,
    deleteBookmarkFolderId,
    postBookmarkFolderAddBookmarkToFolder,
    putBookmarkFolderUpdateBookmark,
    getBookmarksInfo,
    getBookmarksUserId,
    putBookmarks,
    getCustomizeSetting,
    getCustomizeSettingLayout,
    putCustomizeSettingLayout,
    getCustomizeSettingTheme,
    putCustomizeSettingTheme,
    getCustomizeSettingSidebar,
    putCustomizeSettingSidebar,
    putCustomizeSettingFunction,
    putCustomizeSettingPresentation,
    putCustomizeSettingHighlight,
    putCustomizeSettingCustomizeTitle,
    putCustomizeSettingCustomizeNoscript,
    putCustomizeSettingCustomizeCss,
    putCustomizeSettingCustomizeScript,
    putCustomizeSettingCustomizeLogo,
    putCustomizeSettingUploadBrandLogo,
    deleteCustomizeSettingDeleteBrandLogo,
    getExportStatus,
    postExport,
    deleteExportFileName,
    postForgotPassword,
    putForgotPassword,
    getG2gTransferFiles,
    postG2gTransfer,
    postG2gTransferAttachment,
    getG2gTransferGrowiInfo,
    postG2gTransferGenerateKey,
    postG2gTransferTransfer,
    getHealthcheck,
    getImport,
    postImport,
    getImportStatus,
    postImportUpload,
    deleteImportAll,
    getInAppNotificationList,
    getInAppNotificationStatus,
    postInAppNotificationOpen,
    putInAppNotificationAllStatusesOpen,
    postInstaller,
    postInvited,
    postLogout,
    getMarkdownSetting,
    putMarkdownSettingLineBreak,
    putMarkdownSettingIndent,
    putMarkdownSettingXss,
    getMongoCollections,
    getNotificationSetting,
    postNotificationSettingUserNotification,
    deleteNotificationSettingUserNotificationId,
    getNotificationSettingGlobalNotificationId,
    putNotificationSettingGlobalNotificationId,
    deleteNotificationSettingGlobalNotificationId,
    postNotificationSettingGlobalNotification,
    putNotificationSettingNotifyForPageGrant,
    putNotificationSettingGlobalNotificationIdEnabled,
    getPageListingRoot,
    getPageListingAncestorsChildren,
    getPageListingChildren,
    getPageListingInfo,
    getPage,
    postPage,
    putPage,
    getPageExist,
    putPageLikes,
    getPageInfo,
    getPageGrantData,
    getPageNonUserRelatedGroupsGranted,
    getPageApplicableGrant,
    putPageIdGrant,
    getPageExportPageId,
    getPageExistPaths,
    putPageSubscribe,
    putPageIdContentWidth,
    putPageIdPublish,
    putPageIdUnpublish,
    getPageIdYjsData,
    putPageIdSyncLatestRevisionBodyToYjsDraft,
    getPagesRecent,
    postPagesRename,
    postPagesResumeRename,
    deletePagesEmptyTrash,
    getPagesList,
    postPagesDuplicate,
    getPagesSubordinatedList,
    postPagesDelete,
    postPagesConvertPagesByPath,
    postPagesLegacyPagesMigration,
    getPagesV5MigrationStatus,
    getPersonalSetting,
    putPersonalSetting,
    getPersonalSettingIsPasswordSet,
    putPersonalSettingImageType,
    getPersonalSettingExternalAccounts,
    putPersonalSettingPassword,
    putPersonalSettingApiToken,
    putPersonalSettingAssociateLdap,
    putPersonalSettingDisassociateLdap,
    putPersonalSettingEditorSettings,
    getPersonalSettingEditorSettings,
    putPersonalSettingInAppNotificationSettings,
    getPersonalSettingInAppNotificationSettings,
    putPersonalSettingQuestionnaireSettings,
    getRevisionsList,
    getRevisionsId,
    getSearchIndices,
    putSearchIndices,
    postSearchConnection,
    getSecuritySetting,
    putSecuritySettingAuthenticationEnabled,
    getSecuritySettingAuthentication,
    putSecuritySettingGeneralSetting,
    putSecuritySettingShareLinkSetting,
    getSecuritySettingAllShareLinks,
    deleteSecuritySettingAllShareLinks,
    putSecuritySettingLocalSetting,
    putSecuritySettingLdap,
    putSecuritySettingSaml,
    putSecuritySettingOidc,
    putSecuritySettingGoogleOauth,
    putSecuritySettingGithubOauth,
    getShareLinks,
    postShareLinks,
    deleteShareLinks,
    deleteShareLinksAll,
    deleteShareLinksId,
    getSlackIntegrationLegacySetting,
    putSlackIntegrationLegacySetting,
    getSlackIntegrationSettings,
    putSlackIntegrationSettingsBotType,
    deleteSlackIntegrationBotType,
    putSlackIntegrationSettingsWithoutProxyUpdateSettings,
    putSlackIntegrationSettingsWithoutProxyUpdatePermissions,
    postSlackIntegrationSettingsSlackAppIntegrations,
    deleteSlackIntegrationSettingsSlackAppIntegrationsId,
    putSlackIntegrationSettingsProxyUri,
    putSlackIntegrationSettingsSlackAppIntegrationsIdMakeprimary,
    putSlackIntegrationSettingsSlackAppIntegrationsIdRegenerateTokens,
    putSlackIntegrationSettingsSlackAppIntegrationsIdPermissions,
    postSlackIntegrationSettingsSlackAppIntegrationsIdRelationTest,
    postSlackIntegrationSettingsWithoutProxyTest,
    postSlackIntegrationCommands,
    postSlackIntegrationProxiedVerify,
    postSlackIntegrationProxiedCommands,
    postSlackIntegrationInteractions,
    postSlackIntegrationProxiedInteractions,
    getSlackIntegrationSupportedCommands,
    postSlackIntegrationEvents,
    postSlackIntegrationProxiedEvents,
    getStatisticsUser,
    postCompleteRegistration,
    getUserGroupRelations,
    getUserGroups,
    postUserGroups,
    getUserGroupsAncestors,
    getUserGroupsChildren,
    getSelectableParentGroups,
    getSelectableChildGroups,
    getUserGroupsId,
    deleteUserGroupsId,
    putUserGroupsId,
    getUserGroupsIdUsers,
    getUserGroupsIdUnrelatedUsers,
    postUserGroupsIdUsersUsername,
    deleteUserGroupsIdUsersUsername,
    getUserGroupsIdUserGroupRelations,
    getUserGroupsIdPages,
    putUserUiSettings,
    getUsers,
    getIdRecent,
    postUsersInvite,
    putUsersIdGrantAdmin,
    putUsersIdRevokeAdmin,
    putUsersIdGrantReadOnly,
    putUsersIdRevokeReadOnly,
    putUsersIdActivate,
    putUsersIdDeactivate,
    deleteUsersIdRemove,
    getUsersExternalAccounts,
    deleteUsersExternalAccountsIdRemove,
    putUsersUpdateImageUrlCache,
    putUsersResetPassword,
    putUsersResetPasswordEmail,
    putUsersSendInvitationEmail,
    getUsersList,
    getUsersUsernames,
    postLogin,
    postRegister,
  };
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type GetExternalUserGroupRelationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroupRelations']>>>;
export type GetExternalUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroups']>>>;
export type GetExternalUserGroupsAncestorsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroupsAncestors']>>>;
export type GetExternalUserGroupsChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroupsChildren']>>>;
export type GetExternalUserGroupsIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroupsId']>>>;
export type DeleteExternalUserGroupsIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteExternalUserGroupsId']>>>;
export type PutExternalUserGroupsIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putExternalUserGroupsId']>>>;
export type GetExternalUserGroupsIdExternalUserGroupRelationsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroupsIdExternalUserGroupRelations']>>
>;
export type GetExternalUserGroupsLdapSyncSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroupsLdapSyncSettings']>>
>;
export type PutExternalUserGroupsLdapSyncSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putExternalUserGroupsLdapSyncSettings']>>
>;
export type GetExternalUserGroupsKeycloakSyncSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroupsKeycloakSyncSettings']>>
>;
export type PutExternalUserGroupsKeycloakSyncSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putExternalUserGroupsKeycloakSyncSettings']>>
>;
export type PutExternalUserGroupsLdapSyncResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putExternalUserGroupsLdapSync']>>>;
export type PutExternalUserGroupsKeycloakSyncResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putExternalUserGroupsKeycloakSync']>>
>;
export type GetExternalUserGroupsLdapSyncStatusResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroupsLdapSyncStatus']>>
>;
export type GetQuestionnaireOrdersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getQuestionnaireOrders']>>>;
export type GetQuestionnaireIsEnabledResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getQuestionnaireIsEnabled']>>>;
export type PostQuestionnaireProactiveAnswerResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postQuestionnaireProactiveAnswer']>>>;
export type PutQuestionnaireAnswerResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putQuestionnaireAnswer']>>>;
export type PutQuestionnaireSkipResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putQuestionnaireSkip']>>>;
export type PutQuestionnaireDenyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putQuestionnaireDeny']>>>;
export type GetTemplatesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getTemplates']>>>;
export type GetTemplatesPresetTemplatesTemplateIdLocaleResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getTemplatesPresetTemplatesTemplateIdLocale']>>
>;
export type GetTemplatesPluginTemplatesOrganizationIdReposIdTemplateIdLocaleResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getTemplatesPluginTemplatesOrganizationIdReposIdTemplateIdLocale']>>
>;
export type PostPluginsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postPlugins']>>>;
export type PutPluginsIdActivateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPluginsIdActivate']>>>;
export type DeletePluginsIdRemoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deletePluginsIdRemove']>>>;
export type GetActivityResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getActivity']>>>;
export type GetAdminHomeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAdminHome']>>>;
export type GetAppSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAppSettings']>>>;
export type PutAppSettingsAppSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putAppSettingsAppSetting']>>>;
export type PutAppSettingsSiteUrlSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putAppSettingsSiteUrlSetting']>>>;
export type PutAppSettingsSmtpSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putAppSettingsSmtpSetting']>>>;
export type PostAppSettingsSmtpTestResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postAppSettingsSmtpTest']>>>;
export type PutAppSettingsSesSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putAppSettingsSesSetting']>>>;
export type PutAppSettingsFileUploadSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putAppSettingsFileUploadSettings']>>>;
export type PutAppSettingsQuestionnaireSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putAppSettingsQuestionnaireSettings']>>
>;
export type PostAppSettingsV5SchemaMigrationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postAppSettingsV5SchemaMigration']>>>;
export type PostAppSettingsMaintenanceModeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postAppSettingsMaintenanceMode']>>>;
export type GetAttachmentListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAttachmentList']>>>;
export type GetAttachmentLimitResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAttachmentLimit']>>>;
export type PostAttachmentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postAttachment']>>>;
export type GetAttachmentIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAttachmentId']>>>;
export type PostBookmarkFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postBookmarkFolder']>>>;
export type PutBookmarkFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putBookmarkFolder']>>>;
export type GetBookmarkFolderListUserIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getBookmarkFolderListUserId']>>>;
export type DeleteBookmarkFolderIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteBookmarkFolderId']>>>;
export type PostBookmarkFolderAddBookmarkToFolderResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postBookmarkFolderAddBookmarkToFolder']>>
>;
export type PutBookmarkFolderUpdateBookmarkResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putBookmarkFolderUpdateBookmark']>>>;
export type GetBookmarksInfoResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getBookmarksInfo']>>>;
export type GetBookmarksUserIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getBookmarksUserId']>>>;
export type PutBookmarksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putBookmarks']>>>;
export type GetCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getCustomizeSetting']>>>;
export type GetCustomizeSettingLayoutResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getCustomizeSettingLayout']>>>;
export type PutCustomizeSettingLayoutResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeSettingLayout']>>>;
export type GetCustomizeSettingThemeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getCustomizeSettingTheme']>>>;
export type PutCustomizeSettingThemeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeSettingTheme']>>>;
export type GetCustomizeSettingSidebarResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getCustomizeSettingSidebar']>>>;
export type PutCustomizeSettingSidebarResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeSettingSidebar']>>>;
export type PutCustomizeSettingFunctionResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeSettingFunction']>>>;
export type PutCustomizeSettingPresentationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeSettingPresentation']>>>;
export type PutCustomizeSettingHighlightResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeSettingHighlight']>>>;
export type PutCustomizeSettingCustomizeTitleResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeSettingCustomizeTitle']>>
>;
export type PutCustomizeSettingCustomizeNoscriptResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeSettingCustomizeNoscript']>>
>;
export type PutCustomizeSettingCustomizeCssResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeSettingCustomizeCss']>>>;
export type PutCustomizeSettingCustomizeScriptResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeSettingCustomizeScript']>>
>;
export type PutCustomizeSettingCustomizeLogoResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeSettingCustomizeLogo']>>>;
export type PutCustomizeSettingUploadBrandLogoResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putCustomizeSettingUploadBrandLogo']>>
>;
export type DeleteCustomizeSettingDeleteBrandLogoResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteCustomizeSettingDeleteBrandLogo']>>
>;
export type GetExportStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExportStatus']>>>;
export type PostExportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postExport']>>>;
export type DeleteExportFileNameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteExportFileName']>>>;
export type PostForgotPasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postForgotPassword']>>>;
export type PutForgotPasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putForgotPassword']>>>;
export type GetG2gTransferFilesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getG2gTransferFiles']>>>;
export type PostG2gTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postG2gTransfer']>>>;
export type PostG2gTransferAttachmentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postG2gTransferAttachment']>>>;
export type GetG2gTransferGrowiInfoResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getG2gTransferGrowiInfo']>>>;
export type PostG2gTransferGenerateKeyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postG2gTransferGenerateKey']>>>;
export type PostG2gTransferTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postG2gTransferTransfer']>>>;
export type GetHealthcheckResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getHealthcheck']>>>;
export type GetImportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getImport']>>>;
export type PostImportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postImport']>>>;
export type GetImportStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getImportStatus']>>>;
export type PostImportUploadResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postImportUpload']>>>;
export type DeleteImportAllResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteImportAll']>>>;
export type GetInAppNotificationListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getInAppNotificationList']>>>;
export type GetInAppNotificationStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getInAppNotificationStatus']>>>;
export type PostInAppNotificationOpenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postInAppNotificationOpen']>>>;
export type PutInAppNotificationAllStatusesOpenResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putInAppNotificationAllStatusesOpen']>>
>;
export type PostInstallerResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postInstaller']>>>;
export type PostInvitedResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postInvited']>>>;
export type PostLogoutResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postLogout']>>>;
export type GetMarkdownSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getMarkdownSetting']>>>;
export type PutMarkdownSettingLineBreakResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putMarkdownSettingLineBreak']>>>;
export type PutMarkdownSettingIndentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putMarkdownSettingIndent']>>>;
export type PutMarkdownSettingXssResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putMarkdownSettingXss']>>>;
export type GetMongoCollectionsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getMongoCollections']>>>;
export type GetNotificationSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getNotificationSetting']>>>;
export type PostNotificationSettingUserNotificationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postNotificationSettingUserNotification']>>
>;
export type DeleteNotificationSettingUserNotificationIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteNotificationSettingUserNotificationId']>>
>;
export type GetNotificationSettingGlobalNotificationIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getNotificationSettingGlobalNotificationId']>>
>;
export type PutNotificationSettingGlobalNotificationIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putNotificationSettingGlobalNotificationId']>>
>;
export type DeleteNotificationSettingGlobalNotificationIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteNotificationSettingGlobalNotificationId']>>
>;
export type PostNotificationSettingGlobalNotificationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postNotificationSettingGlobalNotification']>>
>;
export type PutNotificationSettingNotifyForPageGrantResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putNotificationSettingNotifyForPageGrant']>>
>;
export type PutNotificationSettingGlobalNotificationIdEnabledResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putNotificationSettingGlobalNotificationIdEnabled']>>
>;
export type GetPageListingRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageListingRoot']>>>;
export type GetPageListingAncestorsChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageListingAncestorsChildren']>>>;
export type GetPageListingChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageListingChildren']>>>;
export type GetPageListingInfoResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageListingInfo']>>>;
export type GetPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPage']>>>;
export type PostPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postPage']>>>;
export type PutPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPage']>>>;
export type GetPageExistResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageExist']>>>;
export type PutPageLikesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPageLikes']>>>;
export type GetPageInfoResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageInfo']>>>;
export type GetPageGrantDataResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageGrantData']>>>;
export type GetPageNonUserRelatedGroupsGrantedResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageNonUserRelatedGroupsGranted']>>
>;
export type GetPageApplicableGrantResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageApplicableGrant']>>>;
export type PutPageIdGrantResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPageIdGrant']>>>;
export type GetPageExportPageIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageExportPageId']>>>;
export type GetPageExistPathsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageExistPaths']>>>;
export type PutPageSubscribeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPageSubscribe']>>>;
export type PutPageIdContentWidthResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPageIdContentWidth']>>>;
export type PutPageIdPublishResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPageIdPublish']>>>;
export type PutPageIdUnpublishResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPageIdUnpublish']>>>;
export type GetPageIdYjsDataResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageIdYjsData']>>>;
export type PutPageIdSyncLatestRevisionBodyToYjsDraftResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPageIdSyncLatestRevisionBodyToYjsDraft']>>
>;
export type GetPagesRecentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPagesRecent']>>>;
export type PostPagesRenameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postPagesRename']>>>;
export type PostPagesResumeRenameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postPagesResumeRename']>>>;
export type DeletePagesEmptyTrashResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deletePagesEmptyTrash']>>>;
export type GetPagesListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPagesList']>>>;
export type PostPagesDuplicateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postPagesDuplicate']>>>;
export type GetPagesSubordinatedListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPagesSubordinatedList']>>>;
export type PostPagesDeleteResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postPagesDelete']>>>;
export type PostPagesConvertPagesByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postPagesConvertPagesByPath']>>>;
export type PostPagesLegacyPagesMigrationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postPagesLegacyPagesMigration']>>>;
export type GetPagesV5MigrationStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPagesV5MigrationStatus']>>>;
export type GetPersonalSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPersonalSetting']>>>;
export type PutPersonalSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPersonalSetting']>>>;
export type GetPersonalSettingIsPasswordSetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPersonalSettingIsPasswordSet']>>>;
export type PutPersonalSettingImageTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPersonalSettingImageType']>>>;
export type GetPersonalSettingExternalAccountsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPersonalSettingExternalAccounts']>>
>;
export type PutPersonalSettingPasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPersonalSettingPassword']>>>;
export type PutPersonalSettingApiTokenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPersonalSettingApiToken']>>>;
export type PutPersonalSettingAssociateLdapResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPersonalSettingAssociateLdap']>>>;
export type PutPersonalSettingDisassociateLdapResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPersonalSettingDisassociateLdap']>>
>;
export type PutPersonalSettingEditorSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPersonalSettingEditorSettings']>>>;
export type GetPersonalSettingEditorSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPersonalSettingEditorSettings']>>>;
export type PutPersonalSettingInAppNotificationSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPersonalSettingInAppNotificationSettings']>>
>;
export type GetPersonalSettingInAppNotificationSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPersonalSettingInAppNotificationSettings']>>
>;
export type PutPersonalSettingQuestionnaireSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPersonalSettingQuestionnaireSettings']>>
>;
export type GetRevisionsListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getRevisionsList']>>>;
export type GetRevisionsIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getRevisionsId']>>>;
export type GetSearchIndicesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSearchIndices']>>>;
export type PutSearchIndicesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSearchIndices']>>>;
export type PostSearchConnectionResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSearchConnection']>>>;
export type GetSecuritySettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSecuritySetting']>>>;
export type PutSecuritySettingAuthenticationEnabledResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingAuthenticationEnabled']>>
>;
export type GetSecuritySettingAuthenticationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSecuritySettingAuthentication']>>>;
export type PutSecuritySettingGeneralSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingGeneralSetting']>>>;
export type PutSecuritySettingShareLinkSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingShareLinkSetting']>>
>;
export type GetSecuritySettingAllShareLinksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSecuritySettingAllShareLinks']>>>;
export type DeleteSecuritySettingAllShareLinksResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteSecuritySettingAllShareLinks']>>
>;
export type PutSecuritySettingLocalSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingLocalSetting']>>>;
export type PutSecuritySettingLdapResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingLdap']>>>;
export type PutSecuritySettingSamlResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingSaml']>>>;
export type PutSecuritySettingOidcResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingOidc']>>>;
export type PutSecuritySettingGoogleOauthResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingGoogleOauth']>>>;
export type PutSecuritySettingGithubOauthResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingGithubOauth']>>>;
export type GetShareLinksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getShareLinks']>>>;
export type PostShareLinksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postShareLinks']>>>;
export type DeleteShareLinksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteShareLinks']>>>;
export type DeleteShareLinksAllResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteShareLinksAll']>>>;
export type DeleteShareLinksIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteShareLinksId']>>>;
export type GetSlackIntegrationLegacySettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSlackIntegrationLegacySetting']>>>;
export type PutSlackIntegrationLegacySettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSlackIntegrationLegacySetting']>>>;
export type GetSlackIntegrationSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSlackIntegrationSettings']>>>;
export type PutSlackIntegrationSettingsBotTypeResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSlackIntegrationSettingsBotType']>>
>;
export type DeleteSlackIntegrationBotTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteSlackIntegrationBotType']>>>;
export type PutSlackIntegrationSettingsWithoutProxyUpdateSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSlackIntegrationSettingsWithoutProxyUpdateSettings']>>
>;
export type PutSlackIntegrationSettingsWithoutProxyUpdatePermissionsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSlackIntegrationSettingsWithoutProxyUpdatePermissions']>>
>;
export type PostSlackIntegrationSettingsSlackAppIntegrationsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationSettingsSlackAppIntegrations']>>
>;
export type DeleteSlackIntegrationSettingsSlackAppIntegrationsIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteSlackIntegrationSettingsSlackAppIntegrationsId']>>
>;
export type PutSlackIntegrationSettingsProxyUriResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSlackIntegrationSettingsProxyUri']>>
>;
export type PutSlackIntegrationSettingsSlackAppIntegrationsIdMakeprimaryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSlackIntegrationSettingsSlackAppIntegrationsIdMakeprimary']>>
>;
export type PutSlackIntegrationSettingsSlackAppIntegrationsIdRegenerateTokensResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSlackIntegrationSettingsSlackAppIntegrationsIdRegenerateTokens']>>
>;
export type PutSlackIntegrationSettingsSlackAppIntegrationsIdPermissionsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSlackIntegrationSettingsSlackAppIntegrationsIdPermissions']>>
>;
export type PostSlackIntegrationSettingsSlackAppIntegrationsIdRelationTestResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationSettingsSlackAppIntegrationsIdRelationTest']>>
>;
export type PostSlackIntegrationSettingsWithoutProxyTestResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationSettingsWithoutProxyTest']>>
>;
export type PostSlackIntegrationCommandsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationCommands']>>>;
export type PostSlackIntegrationProxiedVerifyResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationProxiedVerify']>>
>;
export type PostSlackIntegrationProxiedCommandsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationProxiedCommands']>>
>;
export type PostSlackIntegrationInteractionsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationInteractions']>>>;
export type PostSlackIntegrationProxiedInteractionsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationProxiedInteractions']>>
>;
export type GetSlackIntegrationSupportedCommandsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSlackIntegrationSupportedCommands']>>
>;
export type PostSlackIntegrationEventsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationEvents']>>>;
export type PostSlackIntegrationProxiedEventsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationProxiedEvents']>>
>;
export type GetStatisticsUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getStatisticsUser']>>>;
export type PostCompleteRegistrationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postCompleteRegistration']>>>;
export type GetUserGroupRelationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroupRelations']>>>;
export type GetUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroups']>>>;
export type PostUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postUserGroups']>>>;
export type GetUserGroupsAncestorsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroupsAncestors']>>>;
export type GetUserGroupsChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroupsChildren']>>>;
export type GetSelectableParentGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSelectableParentGroups']>>>;
export type GetSelectableChildGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSelectableChildGroups']>>>;
export type GetUserGroupsIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroupsId']>>>;
export type DeleteUserGroupsIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteUserGroupsId']>>>;
export type PutUserGroupsIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUserGroupsId']>>>;
export type GetUserGroupsIdUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroupsIdUsers']>>>;
export type GetUserGroupsIdUnrelatedUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroupsIdUnrelatedUsers']>>>;
export type PostUserGroupsIdUsersUsernameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postUserGroupsIdUsersUsername']>>>;
export type DeleteUserGroupsIdUsersUsernameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteUserGroupsIdUsersUsername']>>>;
export type GetUserGroupsIdUserGroupRelationsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroupsIdUserGroupRelations']>>
>;
export type GetUserGroupsIdPagesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroupsIdPages']>>>;
export type PutUserUiSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUserUiSettings']>>>;
export type GetUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUsers']>>>;
export type GetIdRecentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getIdRecent']>>>;
export type PostUsersInviteResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postUsersInvite']>>>;
export type PutUsersIdGrantAdminResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUsersIdGrantAdmin']>>>;
export type PutUsersIdRevokeAdminResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUsersIdRevokeAdmin']>>>;
export type PutUsersIdGrantReadOnlyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUsersIdGrantReadOnly']>>>;
export type PutUsersIdRevokeReadOnlyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUsersIdRevokeReadOnly']>>>;
export type PutUsersIdActivateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUsersIdActivate']>>>;
export type PutUsersIdDeactivateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUsersIdDeactivate']>>>;
export type DeleteUsersIdRemoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteUsersIdRemove']>>>;
export type GetUsersExternalAccountsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUsersExternalAccounts']>>>;
export type DeleteUsersExternalAccountsIdRemoveResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteUsersExternalAccountsIdRemove']>>
>;
export type PutUsersUpdateImageUrlCacheResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUsersUpdateImageUrlCache']>>>;
export type PutUsersResetPasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUsersResetPassword']>>>;
export type PutUsersResetPasswordEmailResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUsersResetPasswordEmail']>>>;
export type PutUsersSendInvitationEmailResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUsersSendInvitationEmail']>>>;
export type GetUsersListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUsersList']>>>;
export type GetUsersUsernamesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUsersUsernames']>>>;
export type PostLoginResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postLogin']>>>;
export type PostRegisterResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postRegister']>>>;
