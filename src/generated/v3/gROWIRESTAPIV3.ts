/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * GROWI REST API v3
 * OpenAPI spec version: 7.2.6-RC.0
 */
import type {
  ActivateInvitedUser200,
  ActivateInvitedUserBody,
  ActivateUser200,
  ActivityResponse,
  AddAttachment200,
  AddAttachmentBodyOne,
  AddAttachmentBodyTwo,
  AddBookmarkToFolder200,
  AddBookmarkToFolderBody,
  AddUserUserGroups200,
  AppSettingPutParams,
  AssociateLdapAccount200,
  AssociateLdapAccountBody,
  AttachmentPaginateResult,
  BookmarkInfo,
  BookmarkParams,
  Bookmarks,
  BotType,
  CompleteRegistration200,
  CompleteRegistrationBody,
  ConvertPagesByPath200,
  ConvertPagesByPathBody,
  CreateBookmarkFolder200,
  CreateBookmarkFolderBody,
  CreateExport200,
  CreateExportBody,
  CreatePage201,
  CreatePageBody,
  CreateUserGroup200,
  CreateUserGroupBody,
  CustomizeCss,
  CustomizeFunction,
  CustomizeHighlight,
  CustomizeLayout,
  CustomizeLogo,
  CustomizeNoscript,
  CustomizePresentation,
  CustomizeScript,
  CustomizeSidebar,
  CustomizeTheme,
  CustomizeTitle,
  DeactivateUser200,
  DeleteAccessTokens200,
  DeleteBookmarkFolder200,
  DeleteExport200,
  DeleteExternalUserGroup200,
  DeleteExternalUserGroupParams,
  DeletePages200,
  DeletePagesBody,
  DeletePagesEmptyTrash200,
  DeletePluginsIdRemove200,
  DeleteSecuritySettingAllShareLinks200,
  DeleteShareLinksAll200,
  DeleteShareLinksParams,
  DeleteUserGroup200,
  DeleteUserGroupParams,
  DeleteUsersUserGroups200,
  DisassociateLdapAccount200,
  DisassociateUser,
  DuplicatePage200,
  DuplicatePageBody,
  ExecuteImportBody,
  FileImportResponse,
  FileUploadSettingParams,
  GeneralSetting,
  GetActivityParams,
  GetAdminHome200,
  GetAlreadyExistPaths200,
  GetAlreadyExistPathsParams,
  GetAncestorUserGroups200,
  GetAncestorUserGroupsParams,
  GetAncestors200,
  GetAncestorsParams,
  GetAppSettings200,
  GetAttachmentId200,
  GetAttachmentLimit200,
  GetAttachmentLimitParams,
  GetAttachmentListParams,
  GetBookmarkedInfoParams,
  GetCustomizeSetting200,
  GetEditorSettings200,
  GetExportStatus200,
  GetExternalAccounts200,
  GetExternalUserGroup200,
  GetExternalUserGroupRelations200,
  GetExternalUserGroupRelationsParams,
  GetG2gTransferFiles200,
  GetG2gTransferGrowiInfo200,
  GetHealthcheck200,
  GetHealthcheckParams,
  GetImportSettingsParams200,
  GetImportStatus200,
  GetInAppNotificationListParams,
  GetInAppNotificationSettings200,
  GetInAppNotificationStatus200,
  GetIsPasswordSet200,
  GetKeycloakSyncSettings200,
  GetLdapSyncSettings200,
  GetList200,
  GetListParams,
  GetMarkdownSetting200,
  GetMongoCollections200,
  GetNotificationSetting200,
  GetNotificationSettingGlobalNotificationId200,
  GetPageApplicableGrant200,
  GetPageApplicableGrantParams,
  GetPageExist200,
  GetPageExistParams,
  GetPageGrantData200,
  GetPageGrantDataParams,
  GetPageIdYjsData200,
  GetPageListingAncestorsChildren200,
  GetPageListingAncestorsChildrenParams,
  GetPageListingChildren200,
  GetPageListingChildrenParams,
  GetPageListingInfo200,
  GetPageListingInfoParams,
  GetPageListingRoot200,
  GetPageNonUserRelatedGroupsGranted200,
  GetPageNonUserRelatedGroupsGrantedParams,
  GetPageParams,
  GetPagesRecentParams,
  GetPagesUserGroups200,
  GetPagesV5MigrationStatus200,
  GetPersonalSetting200,
  GetQuestionnaireIsEnabled200,
  GetQuestionnaireOrders200,
  GetRevisionsId200,
  GetRevisionsIdParams,
  GetRevisionsList200,
  GetRevisionsListParams,
  GetSearchIndices200,
  GetSecuritySetting200,
  GetSecuritySettingAllShareLinks200,
  GetSecuritySettingAuthentication200,
  GetSelectableChildGroups200,
  GetSelectableChildGroupsParams,
  GetSelectableParentGroups200,
  GetSelectableParentGroupsParams,
  GetShareLinks200,
  GetShareLinksParams,
  GetSlackBotSettingParams200,
  GetSlackIntegrationLegacySetting200,
  GetSlackIntegrationSupportedCommands200,
  GetTemplates200,
  GetTemplatesParams,
  GetTemplatesPluginTemplatesOrganizationIdReposIdTemplateIdLocale200,
  GetTemplatesPresetTemplatesTemplateIdLocale200,
  GetThemeCustomizeSetting200,
  GetUnrelatedUsersUserGroups200,
  GetUnrelatedUsersUserGroupsParams,
  GetUserGroup200,
  GetUserGroupChildren200,
  GetUserGroupChildrenParams,
  GetUserGroupFromGroupId200,
  GetUserGroupParams,
  GetUserGroupRelationsUserGroups200,
  GetUsernames200,
  GetUsernamesParams,
  GetUsersList200,
  GetUsersListParams,
  GetUsersUserGroups200,
  GitHubOAuthSetting,
  GlobalNotification,
  GlobalNotificationParams,
  GoogleOAuthSetting,
  GrantAdminUser200,
  InAppNotificationListResponse,
  IndentParams,
  Install200,
  InstallBody,
  InviteUser200,
  InviteUserParams,
  LdapAuthSetting,
  LegacyPagesMigration200,
  LegacyPagesMigrationBody,
  LikeParams,
  LineBreakParams,
  ListBookmarkFolders200,
  ListChildren200,
  ListChildrenParams,
  ListExternalAccountsUsers200,
  ListExternalAccountsUsersParams,
  ListExternalUserGroups200,
  ListExternalUserGroupsParams,
  ListUserGroupRelations200,
  ListUsers200,
  ListUsersParams,
  LocalSetting,
  NotifyForPageGrant,
  OidcAuthSetting,
  OpenInAppNotification200,
  OpenInAppNotificationBody,
  Page,
  PageInfo,
  PageParams,
  PersonalSettings,
  PostForgotPassword200,
  PostForgotPasswordBody,
  PostG2gTransfer200,
  PostG2gTransferAttachment200,
  PostG2gTransferAttachmentBody,
  PostG2gTransferBody,
  PostG2gTransferGenerateKey200,
  PostG2gTransferGenerateKeyBody,
  PostG2gTransferTransfer200,
  PostG2gTransferTransferBody,
  PostLogin200,
  PostLoginBody,
  PostNotificationSettingGlobalNotification200,
  PostNotificationSettingUserNotification200,
  PostPlugins200,
  PostPluginsBody,
  PostQuestionnaireProactiveAnswer200,
  PostQuestionnaireProactiveAnswerBody,
  PostRegister200,
  PostRegisterBody,
  PostRelationTestBody,
  PostShareLinksParams,
  PostSlackIntegrationCommandsBody,
  PostSlackIntegrationEvents200,
  PostSlackIntegrationEventsBody,
  PostSlackIntegrationInteractionsBody,
  PostSlackIntegrationProxiedCommandsBody,
  PostSlackIntegrationProxiedEvents200,
  PostSlackIntegrationProxiedEventsBody,
  PostSlackIntegrationProxiedInteractionsBody,
  PostSlackIntegrationProxiedVerify200,
  PostSlackIntegrationProxiedVerifyBody,
  PostSmtpTest200,
  PostTestBody,
  PutEditorSettings200,
  PutEditorSettingsBody,
  PutForgotPassword200,
  PutForgotPasswordBody,
  PutInAppNotificationSettings200,
  PutInAppNotificationSettingsBody,
  PutNotificationSettingGlobalNotificationId200,
  PutNotificationSettingGlobalNotificationIdEnabled200,
  PutNotificationSettingGlobalNotificationIdEnabledBody,
  PutPageIdContentWidth200,
  PutPageIdContentWidthBody,
  PutPageIdGrantBody,
  PutPageIdSyncLatestRevisionBodyToYjsDraft200,
  PutPageIdSyncLatestRevisionBodyToYjsDraftBody,
  PutPluginsIdActivate200,
  PutProxyUri200,
  PutProxyUriBody,
  PutQuestionnaireAnswer201,
  PutQuestionnaireAnswer204,
  PutQuestionnaireAnswerBody,
  PutQuestionnaireDeny201,
  PutQuestionnaireDeny204,
  PutQuestionnaireDenyBody,
  PutQuestionnaireSetting200,
  PutQuestionnaireSettingBody,
  PutQuestionnaireSkip201,
  PutQuestionnaireSkip204,
  PutQuestionnaireSkipBody,
  PutRegenerateTokens200,
  PutSearchIndices200,
  PutSearchIndicesBody,
  PutSecuritySettingAuthenticationEnabled200,
  PutSecuritySettingAuthenticationEnabledBody,
  PutSecuritySettingGithubOauth200,
  PutSecuritySettingGoogleOauth200,
  PutSecuritySettingLdap200,
  PutSecuritySettingLocalSetting200,
  PutSecuritySettingOidc200,
  PutSecuritySettingSaml200,
  PutSecuritySettingShareLinkSetting200,
  PutSlackAppIntegrations200,
  PutSlackIntegrationLegacySetting200,
  PutSlackIntegrationLegacySettingBody,
  PutSupportedCommands200,
  PutSupportedCommandsBody,
  PutUserApiToken200,
  PutUserImageType200,
  PutUserImageTypeBody,
  PutUserPassword200,
  PutUserPasswordBody,
  PutUserUiSettings200,
  PutUserUiSettingsBody,
  PutWithoutProxyPermissionsBody,
  PutWithoutProxySettingsBody,
  QuestionnaireSettingParams,
  ReadOnly200,
  RecentCreatedPageOfUserId200,
  RemoveExternalAccountUser200,
  RemoveUser200,
  RenamePage200,
  RenamePageBody,
  ResetPassword200,
  ResetPasswordBody,
  ResetPasswordEmailBody,
  ResumeRenamePage200,
  ResumeRenamePageBody,
  RevokeAdminUser200,
  RevokeReadOnly200,
  SamlAuthSetting,
  SendInvitationEmail200,
  SendInvitationEmailBody,
  SesSettingParams,
  SesSettingResponseParams,
  ShareLinkSetting,
  ShareLinkSimple,
  SiteUrlSettingParams,
  SmtpSettingParams,
  StatisticsUserResponse,
  SubordinatedList200,
  SubordinatedListParams,
  SyncExternalUserGroupsKeycloak202,
  SyncExternalUserGroupsLdap202,
  SyncStatus,
  UpdateAppSettingFileUploadSetting200,
  UpdateAppSettingMaintenanceMode200,
  UpdateAppSettingMaintenanceModeBody,
  UpdateAppSettingQuestionnaireSettings200,
  UpdateAppSettingSiteUrlSetting200,
  UpdateAppSettingSmtpSetting200,
  UpdateAppSettingV5SchemaMigration200,
  UpdateAppSettings200,
  UpdateBookmarkFolder200,
  UpdateBookmarkFolderBody,
  UpdateBookmarkInFolder200,
  UpdateBookmarkInFolderBody,
  UpdateBookmarkedStatus200,
  UpdateCustomizeCssCustomizeSetting200,
  UpdateCustomizeLogoCustomizeSetting200,
  UpdateCustomizeNoscriptCustomizeSetting200,
  UpdateCustomizeScriptCustomizeSetting200,
  UpdateCustomizeSettingSidebar200,
  UpdateCustomizeTitleCustomizeSetting200,
  UpdateExternalUserGroup200,
  UpdateExternalUserGroupBody,
  UpdateFunctionCustomizeSetting200,
  UpdateHighlightCustomizeSetting200,
  UpdateImageUrlCache200,
  UpdateImageUrlCacheBody,
  UpdateIndentMarkdownSetting200,
  UpdateKeycloakSyncSettings204,
  UpdateKeycloakSyncSettingsBody,
  UpdateLayoutCustomizeSetting200,
  UpdateLdapSyncSettings204,
  UpdateLdapSyncSettingsBody,
  UpdateLineBreakMarkdownSetting200,
  UpdatePage200,
  UpdatePageBody,
  UpdatePersonalSetting200,
  UpdatePresentationCustomizeSetting200,
  UpdateSubscriptionStatusBody,
  UpdateThemeCustomizeSetting200,
  UpdateUserGroups200,
  UpdateUserGroupsBody,
  UploadBrandLogoCustomizeSetting200,
  UploadBrandLogoCustomizeSettingBody,
  UploadImportBody,
  UserNotification,
  UserNotificationParams,
  XssParams,
} from './gROWIRESTAPIV3.schemas';

import { customInstance } from '../../api/axios-instance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getGrowirestapiv3 = () => {
  /**
   * Get user group relations
   * @summary /external-user-group-relations
   */
  const getExternalUserGroupRelations = (params?: GetExternalUserGroupRelationsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalUserGroupRelations200>({ url: `/external-user-group-relations`, method: 'GET', params }, options);
  };

  /**
   * @summary /external-user-groups
   */
  const listExternalUserGroups = (params?: ListExternalUserGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ListExternalUserGroups200>({ url: `/external-user-groups`, method: 'GET', params }, options);
  };

  /**
   * @summary /external-user-groups/ancestors
   */
  const getAncestors = (params: GetAncestorsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAncestors200>({ url: `/external-user-groups/ancestors`, method: 'GET', params }, options);
  };

  /**
   * @summary /external-user-groups/children
   */
  const listChildren = (params?: ListChildrenParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ListChildren200>({ url: `/external-user-groups/children`, method: 'GET', params }, options);
  };

  /**
   * @summary /external-user-groups/{id}
   */
  const getExternalUserGroup = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalUserGroup200>({ url: `/external-user-groups/${id}`, method: 'GET' }, options);
  };

  /**
   * @summary /external-user-groups/{id}
   */
  const deleteExternalUserGroup = (id: string, params: DeleteExternalUserGroupParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteExternalUserGroup200>({ url: `/external-user-groups/${id}`, method: 'DELETE', params }, options);
  };

  /**
   * @summary /external-user-groups/{id}
   */
  const updateExternalUserGroup = (id: string, updateExternalUserGroupBody: UpdateExternalUserGroupBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateExternalUserGroup200>(
      { url: `/external-user-groups/${id}`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: updateExternalUserGroupBody },
      options,
    );
  };

  /**
   * @summary /external-user-groups/{id}/external-user-group-relations
   */
  const getExternalUserGroupRelations = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalUserGroupRelations200>({ url: `/external-user-groups/${id}/external-user-group-relations`, method: 'GET' }, options);
  };

  /**
   * @summary Get LDAP sync settings
   */
  const getLdapSyncSettings = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetLdapSyncSettings200>({ url: `/external-user-groups/ldap/sync-settings`, method: 'GET' }, options);
  };

  /**
   * @summary Update LDAP sync settings
   */
  const updateLdapSyncSettings = (updateLdapSyncSettingsBody: UpdateLdapSyncSettingsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateLdapSyncSettings204>(
      { url: `/external-user-groups/ldap/sync-settings`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: updateLdapSyncSettingsBody },
      options,
    );
  };

  /**
   * @summary Get Keycloak sync settings
   */
  const getKeycloakSyncSettings = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetKeycloakSyncSettings200>({ url: `/external-user-groups/keycloak/sync-settings`, method: 'GET' }, options);
  };

  /**
   * @summary /external-user-groups/keycloak/sync-settings
   */
  const updateKeycloakSyncSettings = (updateKeycloakSyncSettingsBody: UpdateKeycloakSyncSettingsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateKeycloakSyncSettings204>(
      {
        url: `/external-user-groups/keycloak/sync-settings`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: updateKeycloakSyncSettingsBody,
      },
      options,
    );
  };

  /**
   * @summary Start LDAP sync process
   */
  const syncExternalUserGroupsLdap = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<SyncExternalUserGroupsLdap202>({ url: `/external-user-groups/ldap/sync`, method: 'PUT' }, options);
  };

  /**
   * @summary /external-user-groups/keycloak/sync
   */
  const syncExternalUserGroupsKeycloak = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<SyncExternalUserGroupsKeycloak202>({ url: `/external-user-groups/keycloak/sync`, method: 'PUT' }, options);
  };

  /**
   * @summary /external-user-groups/ldap/sync-status
   */
  const getExternalUserGroupsLdapSyncStatus = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<SyncStatus>({ url: `/external-user-groups/ldap/sync-status`, method: 'GET' }, options);
  };

  /**
   * Get questionnaire orders
   * @summary /questionnaire/orders
   */
  const getQuestionnaireOrders = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetQuestionnaireOrders200>({ url: `/questionnaire/orders`, method: 'GET' }, options);
  };

  /**
   * Get questionnaire is enabled
   * @summary /questionnaire/is-enabled
   */
  const getQuestionnaireIsEnabled = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetQuestionnaireIsEnabled200>({ url: `/questionnaire/is-enabled`, method: 'GET' }, options);
  };

  /**
   * Post proactive questionnaire answer
   * @summary /questionnaire/proactive/answer
   */
  const postQuestionnaireProactiveAnswer = (
    postQuestionnaireProactiveAnswerBody: PostQuestionnaireProactiveAnswerBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostQuestionnaireProactiveAnswer200>(
      { url: `/questionnaire/proactive/answer`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postQuestionnaireProactiveAnswerBody },
      options,
    );
  };

  /**
   * Post questionnaire answer
   * @summary /questionnaire/answer
   */
  const putQuestionnaireAnswer = (putQuestionnaireAnswerBody: PutQuestionnaireAnswerBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutQuestionnaireAnswer201 | PutQuestionnaireAnswer204>(
      { url: `/questionnaire/answer`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putQuestionnaireAnswerBody },
      options,
    );
  };

  /**
   * Skip questionnaire
   * @summary /questionnaire/skip
   */
  const putQuestionnaireSkip = (putQuestionnaireSkipBody: PutQuestionnaireSkipBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutQuestionnaireSkip201 | PutQuestionnaireSkip204>(
      { url: `/questionnaire/skip`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putQuestionnaireSkipBody },
      options,
    );
  };

  /**
   * Deny questionnaire
   * @summary /questionnaire/deny
   */
  const putQuestionnaireDeny = (putQuestionnaireDenyBody: PutQuestionnaireDenyBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutQuestionnaireDeny201 | PutQuestionnaireDeny204>(
      { url: `/questionnaire/deny`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putQuestionnaireDenyBody },
      options,
    );
  };

  /**
   * Get all templates
   * @summary /templates
   */
  const getTemplates = (params?: GetTemplatesParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetTemplates200>({ url: `/templates`, method: 'GET', params }, options);
  };

  /**
   * Get a preset template
   * @summary /templates/preset-templates/{templateId}/{locale}
   */
  const getTemplatesPresetTemplatesTemplateIdLocale = (templateId: string, locale: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetTemplatesPresetTemplatesTemplateIdLocale200>(
      { url: `/templates/preset-templates/${templateId}/${locale}`, method: 'GET' },
      options,
    );
  };

  /**
   * Get a plugin template
   * @summary /templates/plugin-templates/{organizationId}/{reposId}/{templateId}/{locale}
   */
  const getTemplatesPluginTemplatesOrganizationIdReposIdTemplateIdLocale = (
    organizationId: string,
    reposId: string,
    templateId: string,
    locale: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<GetTemplatesPluginTemplatesOrganizationIdReposIdTemplateIdLocale200>(
      { url: `/templates/plugin-templates/${organizationId}/${reposId}/${templateId}/${locale}`, method: 'GET' },
      options,
    );
  };

  /**
   * Install a plugin
   * @summary /plugins
   */
  const postPlugins = (postPluginsBody: PostPluginsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostPlugins200>({ url: `/plugins`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postPluginsBody }, options);
  };

  /**
   * Activate a plugin
   * @summary /plugins/{id}/activate
   */
  const putPluginsIdActivate = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutPluginsIdActivate200>({ url: `/plugins/${id}/activate`, method: 'PUT' }, options);
  };

  /**
   * Remove a plugin
   * @summary /plugins/{id}/remove
   */
  const deletePluginsIdRemove = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeletePluginsIdRemove200>({ url: `/plugins/${id}/remove`, method: 'DELETE' }, options);
  };

  /**
   * @summary /activity
   */
  const getActivity = (params?: GetActivityParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ActivityResponse>({ url: `/activity`, method: 'GET', params }, options);
  };

  /**
   * Get adminHome parameters
   * @summary /admin-home
   */
  const getAdminHome = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAdminHome200>({ url: `/admin-home/`, method: 'GET' }, options);
  };

  /**
   * get app setting params
   * @summary /app-settings
   */
  const getAppSettings = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAppSettings200>({ url: `/app-settings`, method: 'GET' }, options);
  };

  /**
   * Update app setting
   * @summary /app-settings/app-setting
   */
  const updateAppSettings = (appSettingPutParams: AppSettingPutParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateAppSettings200>(
      { url: `/app-settings/app-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: appSettingPutParams },
      options,
    );
  };

  /**
   * Update site url setting
   * @summary /app-settings/site-url-setting
   */
  const updateAppSettingSiteUrlSetting = (siteUrlSettingParams: SiteUrlSettingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateAppSettingSiteUrlSetting200>(
      { url: `/app-settings/site-url-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: siteUrlSettingParams },
      options,
    );
  };

  /**
   * Update smtp setting
   * @summary /app-settings/smtp-setting
   */
  const updateAppSettingSmtpSetting = (smtpSettingParams: SmtpSettingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateAppSettingSmtpSetting200>(
      { url: `/app-settings/smtp-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: smtpSettingParams },
      options,
    );
  };

  /**
   * Send test mail for smtp
   * @summary /app-settings/smtp-setting
   */
  const postSmtpTest = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostSmtpTest200>({ url: `/app-settings/smtp-test`, method: 'POST' }, options);
  };

  /**
   * Update ses setting
   * @summary /app-settings/ses-setting
   */
  const updateAppSettingSesSetting = (sesSettingParams: SesSettingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<SesSettingResponseParams>(
      { url: `/app-settings/ses-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: sesSettingParams },
      options,
    );
  };

  /**
   * Update fileUploadSetting
   * @summary /app-settings/file-upload-setting
   */
  const updateAppSettingFileUploadSetting = (fileUploadSettingParams: FileUploadSettingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateAppSettingFileUploadSetting200>(
      { url: `/app-settings/file-upload-settings`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: fileUploadSettingParams },
      options,
    );
  };

  /**
   * Update QuestionnaireSetting
   * @summary /app-settings/questionnaire-settings
   */
  const updateAppSettingQuestionnaireSettings = (questionnaireSettingParams: QuestionnaireSettingParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateAppSettingQuestionnaireSettings200>(
      { url: `/app-settings/questionnaire-settings`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: questionnaireSettingParams },
      options,
    );
  };

  /**
   * Update V5SchemaMigration
   * @summary AccessToken supported.
   */
  const updateAppSettingV5SchemaMigration = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateAppSettingV5SchemaMigration200>({ url: `/app-settings/v5-schema-migration`, method: 'POST' }, options);
  };

  /**
   * Update MaintenanceMode
   * @summary AccessToken supported.
   */
  const updateAppSettingMaintenanceMode = (
    updateAppSettingMaintenanceModeBody: UpdateAppSettingMaintenanceModeBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<UpdateAppSettingMaintenanceMode200>(
      { url: `/app-settings/maintenance-mode`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: updateAppSettingMaintenanceModeBody },
      options,
    );
  };

  /**
   * Get attachment list
   */
  const getAttachmentList = (params: GetAttachmentListParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<AttachmentPaginateResult>({ url: `/attachment/list`, method: 'GET', params }, options);
  };

  /**
   * Get available capacity of uploaded file with GridFS
   * @summary /attachment/limit
   */
  const getAttachmentLimit = (params: GetAttachmentLimitParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAttachmentLimit200>({ url: `/attachment/limit`, method: 'GET', params }, options);
  };

  /**
   * Add attachment to the page
   * @summary /attachment
   */
  const addAttachment = (addAttachmentBody: AddAttachmentBodyOne | AddAttachmentBodyTwo, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<AddAttachment200>({ url: `/attachment`, method: 'POST', data: addAttachmentBody }, options);
  };

  /**
   * Get attachment
   */
  const getAttachmentId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAttachmentId200>({ url: `/attachment/${id}`, method: 'GET' }, options);
  };

  /**
   * Create a new bookmark folder
   * @summary Create bookmark folder
   */
  const createBookmarkFolder = (createBookmarkFolderBody: CreateBookmarkFolderBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CreateBookmarkFolder200>(
      { url: `/bookmark-folder`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: createBookmarkFolderBody },
      options,
    );
  };

  /**
   * Update a bookmark folder
   * @summary Update bookmark folder
   */
  const updateBookmarkFolder = (updateBookmarkFolderBody: UpdateBookmarkFolderBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateBookmarkFolder200>(
      { url: `/bookmark-folder`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: updateBookmarkFolderBody },
      options,
    );
  };

  /**
   * List bookmark folders of a user
   * @summary List bookmark folders of a user
   */
  const listBookmarkFolders = (userId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ListBookmarkFolders200>({ url: `/bookmark-folder/list/${userId}`, method: 'GET' }, options);
  };

  /**
   * Delete a bookmark folder and its children
   * @summary Delete bookmark folder
   */
  const deleteBookmarkFolder = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteBookmarkFolder200>({ url: `/bookmark-folder/${id}`, method: 'DELETE' }, options);
  };

  /**
   * Update a bookmark folder
   * @summary Update bookmark folder
   */
  const addBookmarkToFolder = (addBookmarkToFolderBody: AddBookmarkToFolderBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<AddBookmarkToFolder200>(
      { url: `/bookmark-folder/add-bookmark-to-folder`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: addBookmarkToFolderBody },
      options,
    );
  };

  /**
   * Update a bookmark in a folder
   * @summary Update bookmark in folder
   */
  const updateBookmarkInFolder = (updateBookmarkInFolderBody: UpdateBookmarkInFolderBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateBookmarkInFolder200>(
      { url: `/bookmark-folder/update-bookmark`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: updateBookmarkInFolderBody },
      options,
    );
  };

  /**
   * Get bookmarked info
   * @summary /bookmarks/info
   */
  const getBookmarkedInfo = (params?: GetBookmarkedInfoParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<BookmarkInfo>({ url: `/bookmarks/info`, method: 'GET', params }, options);
  };

  /**
   * Get my bookmarked status
   * @summary /bookmarks/{userId}
   */
  const getMyBookmarkedStatus = (userId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Bookmarks>({ url: `/bookmarks/${userId}`, method: 'GET' }, options);
  };

  /**
   * Update bookmarked status
   * @summary /bookmarks
   */
  const updateBookmarkedStatus = (bookmarkParams: BookmarkParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateBookmarkedStatus200>(
      { url: `/bookmarks`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: bookmarkParams },
      options,
    );
  };

  /**
   * Get customize parameters
   * @summary /customize-setting
   */
  const getCustomizeSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetCustomizeSetting200>({ url: `/customize-setting`, method: 'GET' }, options);
  };

  /**
   * Get layout
   * @summary /customize-setting/layout
   */
  const getLayoutCustomizeSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CustomizeLayout>({ url: `/customize-setting/layout`, method: 'GET' }, options);
  };

  /**
   * Update layout
   * @summary /customize-setting/layout
   */
  const updateLayoutCustomizeSetting = (customizeLayout: CustomizeLayout, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateLayoutCustomizeSetting200>(
      { url: `/customize-setting/layout`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeLayout },
      options,
    );
  };

  /**
   * Get theme
   * @summary /customize-setting/theme
   */
  const getThemeCustomizeSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetThemeCustomizeSetting200>({ url: `/customize-setting/theme`, method: 'GET' }, options);
  };

  /**
   * Update theme
   * @summary /customize-setting/theme
   */
  const updateThemeCustomizeSetting = (customizeTheme: CustomizeTheme, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateThemeCustomizeSetting200>(
      { url: `/customize-setting/theme`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeTheme },
      options,
    );
  };

  /**
   * Get sidebar
   * @summary /customize-setting/sidebar
   */
  const getCustomeSettingSidebar = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CustomizeSidebar>({ url: `/customize-setting/sidebar`, method: 'GET' }, options);
  };

  /**
   * Update sidebar
   * @summary /customize-setting/sidebar
   */
  const updateCustomizeSettingSidebar = (customizeSidebar: CustomizeSidebar, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateCustomizeSettingSidebar200>(
      { url: `/customize-setting/sidebar`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeSidebar },
      options,
    );
  };

  /**
   * Update function
   * @summary /customize-setting/function
   */
  const updateFunctionCustomizeSetting = (customizeFunction: CustomizeFunction, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateFunctionCustomizeSetting200>(
      { url: `/customize-setting/function`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeFunction },
      options,
    );
  };

  /**
   * Update presentation
   * @summary /customize-setting/presentation
   */
  const updatePresentationCustomizeSetting = (customizePresentation: CustomizePresentation, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdatePresentationCustomizeSetting200>(
      { url: `/customize-setting/presentation`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizePresentation },
      options,
    );
  };

  /**
   * Update highlight
   * @summary /customize-setting/highlight
   */
  const updateHighlightCustomizeSetting = (customizeHighlight: CustomizeHighlight, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateHighlightCustomizeSetting200>(
      { url: `/customize-setting/highlight`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeHighlight },
      options,
    );
  };

  /**
   * Update title
   * @summary /customize-setting/customizeTitle
   */
  const updateCustomizeTitleCustomizeSetting = (customizeTitle: CustomizeTitle, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateCustomizeTitleCustomizeSetting200>(
      { url: `/customize-setting/customizeTitle`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeTitle },
      options,
    );
  };

  /**
   * Update noscript
   * @summary /customize-setting/customize-noscript
   */
  const updateCustomizeNoscriptCustomizeSetting = (customizeNoscript: CustomizeNoscript, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateCustomizeNoscriptCustomizeSetting200>(
      { url: `/customize-setting/customize-noscript`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeNoscript },
      options,
    );
  };

  /**
   * Update customize css
   * @summary /customize-setting/customize-css
   */
  const updateCustomizeCssCustomizeSetting = (customizeCss: CustomizeCss, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateCustomizeCssCustomizeSetting200>(
      { url: `/customize-setting/customize-css`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeCss },
      options,
    );
  };

  /**
   * Update customize script
   * @summary /customize-setting/customize-script
   */
  const updateCustomizeScriptCustomizeSetting = (customizeScript: CustomizeScript, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateCustomizeScriptCustomizeSetting200>(
      { url: `/customize-setting/customize-script`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeScript },
      options,
    );
  };

  /**
   * Update customize logo
   * @summary /customize-setting/customize-logo
   */
  const updateCustomizeLogoCustomizeSetting = (customizeLogo: CustomizeLogo, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateCustomizeLogoCustomizeSetting200>(
      { url: `/customize-setting/customize-logo`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: customizeLogo },
      options,
    );
  };

  /**
   * Upload brand logo
   * @summary /customize-setting/upload-brand-logo
   */
  const uploadBrandLogoCustomizeSetting = (
    uploadBrandLogoCustomizeSettingBody: UploadBrandLogoCustomizeSettingBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    const formData = new FormData();
    if (uploadBrandLogoCustomizeSettingBody.file !== undefined) {
      formData.append(`file`, uploadBrandLogoCustomizeSettingBody.file);
    }

    return customInstance<UploadBrandLogoCustomizeSetting200>(
      { url: `/customize-setting/upload-brand-logo`, method: 'PUT', headers: { 'Content-Type': 'multipart/form-data' }, data: formData },
      options,
    );
  };

  /**
   * Delete brand logo
   * @summary /customize-setting/delete-brand-logo
   */
  const deleteBrandLogoCustomizeSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<unknown>({ url: `/customize-setting/delete-brand-logo`, method: 'DELETE' }, options);
  };

  /**
   * get properties of stored zip files for export
   * @summary /export/status
   */
  const getExportStatus = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExportStatus200>({ url: `/export/status`, method: 'GET' }, options);
  };

  /**
   * generate zipped jsons for collections
   * @summary /export
   */
  const createExport = (createExportBody: CreateExportBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CreateExport200>(
      { url: `/export`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: createExportBody },
      options,
    );
  };

  /**
   * delete the file
   * @summary /export/{fileName}
   */
  const deleteExport = (fileName: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteExport200>({ url: `/export/${fileName}`, method: 'DELETE' }, options);
  };

  /**
   * @summary Request password reset
   */
  const postForgotPassword = (postForgotPasswordBody: PostForgotPasswordBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostForgotPassword200>(
      { url: `/forgot-password`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postForgotPasswordBody },
      options,
    );
  };

  /**
   * @summary Reset password
   */
  const putForgotPassword = (putForgotPasswordBody: PutForgotPasswordBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutForgotPassword200>(
      { url: `/forgot-password`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putForgotPasswordBody },
      options,
    );
  };

  /**
   * @summary /g2g-transfer/files
   */
  const getG2gTransferFiles = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetG2gTransferFiles200>({ url: `/g2g-transfer/files`, method: 'GET' }, options);
  };

  /**
   * @summary /g2g-transfer
   */
  const postG2gTransfer = (postG2gTransferBody: PostG2gTransferBody, options?: SecondParameter<typeof customInstance>) => {
    const formData = new FormData();
    if (postG2gTransferBody.file !== undefined) {
      formData.append(`file`, postG2gTransferBody.file);
    }
    if (postG2gTransferBody.collections !== undefined) {
      postG2gTransferBody.collections.forEach((value) => formData.append(`collections`, value));
    }
    if (postG2gTransferBody.optionsMap !== undefined) {
      formData.append(`optionsMap`, JSON.stringify(postG2gTransferBody.optionsMap));
    }
    if (postG2gTransferBody.operatorUserId !== undefined) {
      formData.append(`operatorUserId`, postG2gTransferBody.operatorUserId);
    }
    if (postG2gTransferBody.uploadConfigs !== undefined) {
      formData.append(`uploadConfigs`, JSON.stringify(postG2gTransferBody.uploadConfigs));
    }

    return customInstance<PostG2gTransfer200>(
      { url: `/g2g-transfer`, method: 'POST', headers: { 'Content-Type': 'multipart/form-data' }, data: formData },
      options,
    );
  };

  /**
   * @summary /g2g-transfer/attachment
   */
  const postG2gTransferAttachment = (postG2gTransferAttachmentBody: PostG2gTransferAttachmentBody, options?: SecondParameter<typeof customInstance>) => {
    const formData = new FormData();
    if (postG2gTransferAttachmentBody.file !== undefined) {
      formData.append(`file`, postG2gTransferAttachmentBody.file);
    }
    if (postG2gTransferAttachmentBody.attachmentMetadata !== undefined) {
      formData.append(`attachmentMetadata`, JSON.stringify(postG2gTransferAttachmentBody.attachmentMetadata));
    }

    return customInstance<PostG2gTransferAttachment200>(
      { url: `/g2g-transfer/attachment`, method: 'POST', headers: { 'Content-Type': 'multipart/form-data' }, data: formData },
      options,
    );
  };

  /**
   * @summary /g2g-transfer/growi-info
   */
  const getG2gTransferGrowiInfo = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetG2gTransferGrowiInfo200>({ url: `/g2g-transfer/growi-info`, method: 'GET' }, options);
  };

  /**
   * @summary /g2g-transfer/generate-key
   */
  const postG2gTransferGenerateKey = (postG2gTransferGenerateKeyBody: PostG2gTransferGenerateKeyBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostG2gTransferGenerateKey200>(
      { url: `/g2g-transfer/generate-key`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postG2gTransferGenerateKeyBody },
      options,
    );
  };

  /**
   * @summary /g2g-transfer/transfer
   */
  const postG2gTransferTransfer = (postG2gTransferTransferBody: PostG2gTransferTransferBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostG2gTransferTransfer200>(
      { url: `/g2g-transfer/transfer`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postG2gTransferTransferBody },
      options,
    );
  };

  /**
   * Check whether the server is healthy or not
   * @summary /healthcheck
   */
  const getHealthcheck = (params?: GetHealthcheckParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetHealthcheck200>({ url: `/healthcheck`, method: 'GET', params }, options);
  };

  /**
   * Get import settings params
   * @summary /import
   */
  const getImportSettingsParams = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetImportSettingsParams200>({ url: `/import`, method: 'GET' }, options);
  };

  /**
   * import a collection from a zipped json
   * @summary /import
   */
  const executeImport = (executeImportBody: ExecuteImportBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/import`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: executeImportBody }, options);
  };

  /**
   * Get properties of stored zip files for import
   * @summary /import/status
   */
  const getImportStatus = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetImportStatus200>({ url: `/import/status`, method: 'GET' }, options);
  };

  /**
   * upload a zip file
   * @summary /import/upload
   */
  const uploadImport = (uploadImportBody: UploadImportBody, options?: SecondParameter<typeof customInstance>) => {
    const formData = new FormData();
    if (uploadImportBody.file !== undefined) {
      formData.append(`file`, uploadImportBody.file);
    }

    return customInstance<FileImportResponse>(
      { url: `/import/upload`, method: 'POST', headers: { 'Content-Type': 'multipart/form-data' }, data: formData },
      options,
    );
  };

  /**
   * Delete all zip files
   * @summary /import/all
   */
  const deleteImportAll = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/import/all`, method: 'DELETE' }, options);
  };

  /**
   * Get the list of in-app notifications
   * @summary /in-app-notification/list
   */
  const getInAppNotificationList = (params?: GetInAppNotificationListParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<InAppNotificationListResponse>({ url: `/in-app-notification/list`, method: 'GET', params }, options);
  };

  /**
   * Get the status of in-app notifications
   * @summary /in-app-notification/status
   */
  const getInAppNotificationStatus = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetInAppNotificationStatus200>({ url: `/in-app-notification/status`, method: 'GET' }, options);
  };

  /**
   * Open the in-app notification
   * @summary /in-app-notification/open
   */
  const openInAppNotification = (openInAppNotificationBody: OpenInAppNotificationBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<OpenInAppNotification200>(
      { url: `/in-app-notification/open`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: openInAppNotificationBody },
      options,
    );
  };

  /**
   * Open all in-app notifications
   * @summary /in-app-notification/all-statuses-open
   */
  const openAllInAppNotification = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/in-app-notification/all-statuses-open`, method: 'PUT' }, options);
  };

  /**
   * Install GROWI
   * @summary /installer
   */
  const install = (installBody: InstallBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Install200>({ url: `/installer`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: installBody }, options);
  };

  /**
   * Activate invited user
   * @summary /invited
   */
  const activateInvitedUser = (activateInvitedUserBody: ActivateInvitedUserBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ActivateInvitedUser200>(
      { url: `/invited`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: activateInvitedUserBody },
      options,
    );
  };

  /**
   * Logout the currently authenticated user
   * @summary Logout user
   */
  const postLogout = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/logout`, method: 'POST' }, options);
  };

  /**
   * @summary Get markdown parameters
   */
  const getMarkdownSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetMarkdownSetting200>({ url: `/markdown-setting`, method: 'GET' }, options);
  };

  /**
   * @summary Update lineBreak setting
   */
  const updateLineBreakMarkdownSetting = (lineBreakParams: LineBreakParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateLineBreakMarkdownSetting200>(
      { url: `/markdown-setting/lineBreak`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: lineBreakParams },
      options,
    );
  };

  /**
   * @summary Update indent setting
   */
  const updateIndentMarkdownSetting = (indentParams: IndentParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateIndentMarkdownSetting200>(
      { url: `/markdown-setting/indent`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: indentParams },
      options,
    );
  };

  /**
   * Update xss
   * @summary Update XSS setting
   */
  const updateXssMarkdownSetting = (xssParams: XssParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<XssParams>(
      { url: `/markdown-setting/xss`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: xssParams },
      options,
    );
  };

  /**
   * get mongodb collections names
   * @summary /mongo/collections
   */
  const getMongoCollections = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetMongoCollections200>({ url: `/mongo/collections`, method: 'GET' }, options);
  };

  /**
   * Get notification paramators
   */
  const getNotificationSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetNotificationSetting200>({ url: `/notification-setting/`, method: 'GET' }, options);
  };

  /**
   * add user notification setting
   */
  const postNotificationSettingUserNotification = (userNotificationParams: UserNotificationParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostNotificationSettingUserNotification200>(
      { url: `/notification-setting/user-notification`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: userNotificationParams },
      options,
    );
  };

  /**
   * delete user trigger notification pattern
   */
  const deleteNotificationSettingUserNotificationId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UserNotification>({ url: `/notification-setting/user-notification/${id}`, method: 'DELETE' }, options);
  };

  /**
   * get global notification setting
   */
  const getNotificationSettingGlobalNotificationId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetNotificationSettingGlobalNotificationId200>({ url: `/notification-setting/global-notification/${id}`, method: 'GET' }, options);
  };

  /**
   * update global notification
   */
  const putNotificationSettingGlobalNotificationId = (
    id: string,
    globalNotificationParams: GlobalNotificationParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutNotificationSettingGlobalNotificationId200>(
      {
        url: `/notification-setting/global-notification/${id}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: globalNotificationParams,
      },
      options,
    );
  };

  /**
   * delete global notification pattern
   */
  const deleteNotificationSettingGlobalNotificationId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GlobalNotification>({ url: `/notification-setting/global-notification/${id}`, method: 'DELETE' }, options);
  };

  /**
   * add global notification
   */
  const postNotificationSettingGlobalNotification = (globalNotificationParams: GlobalNotificationParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostNotificationSettingGlobalNotification200>(
      { url: `/notification-setting/global-notification`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: globalNotificationParams },
      options,
    );
  };

  /**
   * Update settings for notify for page grant
   */
  const putNotificationSettingNotifyForPageGrant = (notifyForPageGrant: NotifyForPageGrant, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<NotifyForPageGrant>(
      { url: `/notification-setting/notify-for-page-grant`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: notifyForPageGrant },
      options,
    );
  };

  /**
   * toggle enabled global notification
   */
  const putNotificationSettingGlobalNotificationIdEnabled = (
    id: string,
    putNotificationSettingGlobalNotificationIdEnabledBody: PutNotificationSettingGlobalNotificationIdEnabledBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutNotificationSettingGlobalNotificationIdEnabled200>(
      {
        url: `/notification-setting/global-notification/${id}/enabled`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putNotificationSettingGlobalNotificationIdEnabledBody,
      },
      options,
    );
  };

  /**
   * Get the root page
   * @summary /page-listing/root
   */
  const getPageListingRoot = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageListingRoot200>({ url: `/page-listing/root`, method: 'GET' }, options);
  };

  /**
   * Get the ancestors and children of a page
   * @summary /page-listing/ancestors-children
   */
  const getPageListingAncestorsChildren = (params: GetPageListingAncestorsChildrenParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageListingAncestorsChildren200>({ url: `/page-listing/ancestors-children`, method: 'GET', params }, options);
  };

  /**
   * Get the children of a page
   * @summary /page-listing/children
   */
  const getPageListingChildren = (params?: GetPageListingChildrenParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageListingChildren200>({ url: `/page-listing/children`, method: 'GET', params }, options);
  };

  /**
   * Get the information of a page
   * @summary /page-listing/info
   */
  const getPageListingInfo = (params?: GetPageListingInfoParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageListingInfo200>({ url: `/page-listing/info`, method: 'GET', params }, options);
  };

  /**
   * get page by pagePath or pageId
   * @summary Get page
   */
  const getPage = (params?: GetPageParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>({ url: `/page`, method: 'GET', params }, options);
  };

  /**
   * Create page
   * @summary Create page
   */
  const createPage = (createPageBody: CreatePageBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CreatePage201>({ url: `/page`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: createPageBody }, options);
  };

  /**
   * Update page
   */
  const updatePage = (updatePageBody: UpdatePageBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdatePage200>({ url: `/page`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: updatePageBody }, options);
  };

  /**
   * Check if a page exists at the specified path
   * @summary Check if page exists
   */
  const getPageExist = (params: GetPageExistParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageExist200>({ url: `/page/exist`, method: 'GET', params }, options);
  };

  /**
   * Update liked status
   * @summary Get page likes
   */
  const updateLikedStatus = (likeParams: LikeParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>({ url: `/page/likes`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: likeParams }, options);
  };

  /**
   * Retrieve current page info
   * @summary Get page info
   */
  const getPageInfo = (pageParams: PageParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PageInfo>({ url: `/page/info`, method: 'GET', headers: { 'Content-Type': 'application/json' } }, options);
  };

  /**
   * Retrieve current page's grant data
   * @summary Get page grant data
   */
  const getPageGrantData = (params?: GetPageGrantDataParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageGrantData200>({ url: `/page/grant-data`, method: 'GET', params }, options);
  };

  /**
   * Check if non-user related groups are granted access to a specific page or its closest ancestor
   * @summary Check if non-user related groups are granted page access
   */
  const getPageNonUserRelatedGroupsGranted = (params: GetPageNonUserRelatedGroupsGrantedParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageNonUserRelatedGroupsGranted200>({ url: `/page/non-user-related-groups-granted`, method: 'GET', params }, options);
  };

  /**
   * Retrieve applicable grant data for a specific page
   * @summary Get applicable grant data
   */
  const getPageApplicableGrant = (params: GetPageApplicableGrantParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageApplicableGrant200>({ url: `/page/applicable-grant`, method: 'GET', params }, options);
  };

  /**
   * Update the grant of a specific page
   * @summary Update page grant
   */
  const putPageIdGrant = (pageId: string, putPageIdGrantBody: PutPageIdGrantBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>({ url: `/${pageId}/grant`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putPageIdGrantBody }, options);
  };

  /**
   * return page's markdown
   */
  const getPageExportPageId = (pageId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/page/export/${pageId}`, method: 'GET' }, options);
  };

  /**
   * Get already exist paths
   * @summary Get already exist paths
   */
  const getAlreadyExistPaths = (params?: GetAlreadyExistPathsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAlreadyExistPaths200>({ url: `/page/exist-paths`, method: 'GET', params }, options);
  };

  /**
   * Update subscription status
   * @summary Update subscription status
   */
  const updateSubscriptionStatus = (updateSubscriptionStatusBody: UpdateSubscriptionStatusBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>(
      { url: `/page/subscribe`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: updateSubscriptionStatusBody },
      options,
    );
  };

  /**
   * Update the content width setting for a specific page
   * @summary Update content width
   */
  const putPageIdContentWidth = (pageId: string, putPageIdContentWidthBody: PutPageIdContentWidthBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutPageIdContentWidth200>(
      { url: `/${pageId}/content-width`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putPageIdContentWidthBody },
      options,
    );
  };

  /**
   * Publish a specific page
   * @summary Publish page
   */
  const putPageIdPublish = (pageId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>({ url: `/${pageId}/publish`, method: 'PUT' }, options);
  };

  /**
   * Unpublish a specific page
   * @summary Unpublish page
   */
  const putPageIdUnpublish = (pageId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Page>({ url: `/${pageId}/unpublish`, method: 'PUT' }, options);
  };

  /**
   * Retrieve Yjs data for a specific page
   * @summary Get Yjs data
   */
  const getPageIdYjsData = (pageId: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPageIdYjsData200>({ url: `/${pageId}/yjs-data`, method: 'GET' }, options);
  };

  /**
   * Sync the latest revision body to the Yjs draft for a specific page
   * @summary Sync latest revision body to Yjs draft
   */
  const putPageIdSyncLatestRevisionBodyToYjsDraft = (
    pageId: string,
    putPageIdSyncLatestRevisionBodyToYjsDraftBody: PutPageIdSyncLatestRevisionBodyToYjsDraftBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutPageIdSyncLatestRevisionBodyToYjsDraft200>(
      {
        url: `/${pageId}/sync-latest-revision-body-to-yjs-draft`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putPageIdSyncLatestRevisionBodyToYjsDraftBody,
      },
      options,
    );
  };

  /**
   * Get recently updated pages
   */
  const getPagesRecent = (params?: GetPagesRecentParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/pages/recent`, method: 'GET', params }, options);
  };

  /**
   * Rename page
   */
  const renamePage = (renamePageBody: RenamePageBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<RenamePage200>(
      { url: `/pages/rename`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: renamePageBody },
      options,
    );
  };

  /**
   * Resume rename page operation
   */
  const resumeRenamePage = (resumeRenamePageBody: ResumeRenamePageBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ResumeRenamePage200>(
      { url: `/pages/resume-rename`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: resumeRenamePageBody },
      options,
    );
  };

  /**
   * empty trash
   */
  const deletePagesEmptyTrash = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeletePagesEmptyTrash200>({ url: `/pages/empty-trash`, method: 'DELETE' }, options);
  };

  /**
   * Get list of pages
   */
  const getList = (params?: GetListParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetList200>({ url: `/pages/list`, method: 'GET', params }, options);
  };

  /**
   * Duplicate page
   */
  const duplicatePage = (duplicatePageBody: DuplicatePageBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DuplicatePage200>(
      { url: `/pages/duplicate`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: duplicatePageBody },
      options,
    );
  };

  /**
   * Get subordinated pages
   */
  const subordinatedList = (params?: SubordinatedListParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<SubordinatedList200>({ url: `/pages/subordinated-list`, method: 'GET', params }, options);
  };

  /**
   * Delete pages
   */
  const deletePages = (deletePagesBody: DeletePagesBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeletePages200>(
      { url: `/pages/delete`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: deletePagesBody },
      options,
    );
  };

  /**
   * Convert pages by path
   */
  const convertPagesByPath = (convertPagesByPathBody: ConvertPagesByPathBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ConvertPagesByPath200>(
      { url: `/pages/convert-pages-by-path`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: convertPagesByPathBody },
      options,
    );
  };

  /**
   * Migrate legacy pages
   */
  const legacyPagesMigration = (legacyPagesMigrationBody: LegacyPagesMigrationBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<LegacyPagesMigration200>(
      { url: `/pages/legacy-pages-migration`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: legacyPagesMigrationBody },
      options,
    );
  };

  /**
   * Get V5 migration status
   */
  const getPagesV5MigrationStatus = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPagesV5MigrationStatus200>({ url: `/pages/v5-migration-status`, method: 'GET' }, options);
  };

  /**
   * Get personal parameters
   * @summary /personal-setting
   */
  const getPersonalSetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPersonalSetting200>({ url: `/personal-setting`, method: 'GET' }, options);
  };

  /**
   * Update personal setting
   * @summary /personal-setting
   */
  const updatePersonalSetting = (personalSettings: PersonalSettings, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdatePersonalSetting200>(
      { url: `/personal-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: personalSettings },
      options,
    );
  };

  /**
   * Get whether a password has been set
   * @summary /personal-setting
   */
  const getIsPasswordSet = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetIsPasswordSet200>({ url: `/personal-setting/is-password-set`, method: 'GET' }, options);
  };

  /**
   * Update user image type
   * @summary /personal-setting/image-type
   */
  const putUserImageType = (putUserImageTypeBody: PutUserImageTypeBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUserImageType200>(
      { url: `/personal-setting/image-type`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putUserImageTypeBody },
      options,
    );
  };

  /**
   * Get external accounts that linked current user
   * @summary /personal-setting/external-accounts
   */
  const getExternalAccounts = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetExternalAccounts200>({ url: `/personal-setting/external-accounts`, method: 'GET' }, options);
  };

  /**
   * Update user password
   * @summary /personal-setting/password
   */
  const putUserPassword = (putUserPasswordBody: PutUserPasswordBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUserPassword200>(
      { url: `/personal-setting/password`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putUserPasswordBody },
      options,
    );
  };

  /**
   * Update user api token
   * @summary /personal-setting/api-token
   */
  const putUserApiToken = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUserApiToken200>({ url: `/personal-setting/api-token`, method: 'PUT' }, options);
  };

  /**
   * associate Ldap account
   * @summary /personal-setting/associate-ldap
   */
  const associateLdapAccount = (associateLdapAccountBody: AssociateLdapAccountBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<AssociateLdapAccount200>(
      { url: `/personal-setting/associate-ldap`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: associateLdapAccountBody },
      options,
    );
  };

  /**
   * disassociate Ldap account
   * @summary /personal-setting/disassociate-ldap
   */
  const disassociateLdapAccount = (disassociateUser: DisassociateUser, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DisassociateLdapAccount200>(
      { url: `/personal-setting/disassociate-ldap`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: disassociateUser },
      options,
    );
  };

  /**
   * Put editor preferences
   * @summary /personal-setting/editor-settings
   */
  const putEditorSettings = (putEditorSettingsBody: PutEditorSettingsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutEditorSettings200>(
      { url: `/personal-setting/editor-settings`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putEditorSettingsBody },
      options,
    );
  };

  /**
   * Get editor preferences
   * @summary /personal-setting/editor-settings
   */
  const getEditorSettings = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetEditorSettings200>({ url: `/personal-setting/editor-settings`, method: 'GET' }, options);
  };

  /**
   * Put InAppNotificationSettings
   * @summary /personal-setting/in-app-notification-settings
   */
  const putInAppNotificationSettings = (
    putInAppNotificationSettingsBody: PutInAppNotificationSettingsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutInAppNotificationSettings200>(
      {
        url: `/personal-setting/in-app-notification-settings`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putInAppNotificationSettingsBody,
      },
      options,
    );
  };

  /**
   * Get InAppNotificationSettings
   * @summary personal-setting/in-app-notification-settings
   */
  const getInAppNotificationSettings = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetInAppNotificationSettings200>({ url: `/personal-setting/in-app-notification-settings`, method: 'GET' }, options);
  };

  /**
   * Update the questionnaire settings for the current user
   * @summary /personal-setting/questionnaire-settings
   */
  const putQuestionnaireSetting = (putQuestionnaireSettingBody: PutQuestionnaireSettingBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutQuestionnaireSetting200>(
      { url: `/personal-setting/questionnaire-settings`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putQuestionnaireSettingBody },
      options,
    );
  };

  /**
   * Get revisions by page id
   */
  const getRevisionsList = (params?: GetRevisionsListParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetRevisionsList200>({ url: `/revisions/list`, method: 'GET', params }, options);
  };

  /**
   * Get one revision by id
   */
  const getRevisionsId = (id: string, params: GetRevisionsIdParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetRevisionsId200>({ url: `/revisions/${id}`, method: 'GET', params }, options);
  };

  /**
   * Get current status of indices
   * @summary /search/indices
   */
  const getSearchIndices = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSearchIndices200>({ url: `/search/indices`, method: 'GET' }, options);
  };

  /**
   * Operate indices
   * @summary /search/indices
   */
  const putSearchIndices = (putSearchIndicesBody: PutSearchIndicesBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSearchIndices200>(
      { url: `/search/indices`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putSearchIndicesBody },
      options,
    );
  };

  /**
   * Reconnect to Elasticsearch
   * @summary /search/connection
   */
  const postSearchConnection = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/search/connection`, method: 'POST' }, options);
  };

  /**
   * Get security paramators
   */
  const getSecuritySetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSecuritySetting200>({ url: `/security-setting/`, method: 'GET' }, options);
  };

  /**
   * Update authentication isEnabled
   */
  const putSecuritySettingAuthenticationEnabled = (
    putSecuritySettingAuthenticationEnabledBody: PutSecuritySettingAuthenticationEnabledBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutSecuritySettingAuthenticationEnabled200>(
      {
        url: `/security-setting/authentication/enabled`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putSecuritySettingAuthenticationEnabledBody,
      },
      options,
    );
  };

  /**
   * Get setup strategies for passport
   * @summary /security-setting/authentication
   */
  const getSecuritySettingAuthentication = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSecuritySettingAuthentication200>({ url: `/security-setting/authentication`, method: 'GET' }, options);
  };

  /**
   * Update GeneralSetting
   * @summary /security-setting/general-setting
   */
  const putSecuritySettingGeneralSetting = (generalSetting: GeneralSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GeneralSetting>(
      { url: `/security-setting/general-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: generalSetting },
      options,
    );
  };

  /**
   * Update ShareLink Setting
   * @summary /security-setting/share-link-setting
   */
  const putSecuritySettingShareLinkSetting = (shareLinkSetting: ShareLinkSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSecuritySettingShareLinkSetting200>(
      { url: `/security-setting/share-link-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: shareLinkSetting },
      options,
    );
  };

  /**
   * Get All ShareLinks at Share Link Setting
   * @summary /security-setting/all-share-links
   */
  const getSecuritySettingAllShareLinks = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSecuritySettingAllShareLinks200>({ url: `/security-setting/all-share-links`, method: 'GET' }, options);
  };

  /**
   * Delete All ShareLinks at Share Link Setting
   * @summary /security-setting/all-share-links
   */
  const deleteSecuritySettingAllShareLinks = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteSecuritySettingAllShareLinks200>({ url: `/security-setting/all-share-links`, method: 'DELETE' }, options);
  };

  /**
   * Update LocalSetting
   * @summary /security-setting/local-setting
   */
  const putSecuritySettingLocalSetting = (localSetting: LocalSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSecuritySettingLocalSetting200>(
      { url: `/security-setting/local-setting`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: localSetting },
      options,
    );
  };

  /**
   * Update LDAP setting
   * @summary /security-setting/ldap
   */
  const putSecuritySettingLdap = (ldapAuthSetting: LdapAuthSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSecuritySettingLdap200>(
      { url: `/security-setting/ldap`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: ldapAuthSetting },
      options,
    );
  };

  /**
   * Update SAML setting
   * @summary /security-setting/saml
   */
  const putSecuritySettingSaml = (samlAuthSetting: SamlAuthSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSecuritySettingSaml200>(
      { url: `/security-setting/saml`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: samlAuthSetting },
      options,
    );
  };

  /**
   * Update OpenID Connect setting
   * @summary /security-setting/oidc
   */
  const putSecuritySettingOidc = (oidcAuthSetting: OidcAuthSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSecuritySettingOidc200>(
      { url: `/security-setting/oidc`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: oidcAuthSetting },
      options,
    );
  };

  /**
   * Update google OAuth
   * @summary /security-setting/google-oauth
   */
  const putSecuritySettingGoogleOauth = (googleOAuthSetting: GoogleOAuthSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSecuritySettingGoogleOauth200>(
      { url: `/security-setting/google-oauth`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: googleOAuthSetting },
      options,
    );
  };

  /**
   * Update github OAuth
   * @summary /security-setting/github-oauth
   */
  const putSecuritySettingGithubOauth = (gitHubOAuthSetting: GitHubOAuthSetting, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSecuritySettingGithubOauth200>(
      { url: `/security-setting/github-oauth`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: gitHubOAuthSetting },
      options,
    );
  };

  /**
   * get share links
   */
  const getShareLinks = (params: GetShareLinksParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetShareLinks200>({ url: `/share-links/`, method: 'GET', params }, options);
  };

  /**
   * Create new share link
   */
  const postShareLinks = (params: PostShareLinksParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ShareLinkSimple>({ url: `/share-links/`, method: 'POST', params }, options);
  };

  /**
   * delete all share links related one page
   * @summary delete all share links related one page
   */
  const deleteShareLinks = (params: DeleteShareLinksParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ShareLinkSimple>({ url: `/share-links/`, method: 'DELETE', params }, options);
  };

  /**
   * delete all share links
   * @summary delete all share links
   */
  const deleteShareLinksAll = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteShareLinksAll200>({ url: `/share-links/all`, method: 'DELETE' }, options);
  };

  /**
   * delete one share link related one page
   */
  const deleteShareLinksId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/share-links/${id}`, method: 'DELETE' }, options);
  };

  /**
   * Get slack configuration setting
   */
  const getSlackIntegrationLegacySetting = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSlackIntegrationLegacySetting200>({ url: `/slack-integration-legacy-setting/`, method: 'GET' }, options);
  };

  /**
   * Update slack configuration setting
   */
  const putSlackIntegrationLegacySetting = (
    putSlackIntegrationLegacySettingBody: PutSlackIntegrationLegacySettingBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PutSlackIntegrationLegacySetting200>(
      { url: `/slack-integration-legacy-setting/`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putSlackIntegrationLegacySettingBody },
      options,
    );
  };

  /**
   * Get current settings and connection statuses.
   * @summary /slack-integration-settings
   */
  const getSlackBotSettingParams = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSlackBotSettingParams200>({ url: `/slack-integration-settings/`, method: 'GET' }, options);
  };

  /**
   * Put botType setting.
   * @summary /slack-integration/bot-type
   */
  const putBotType = (botType: BotType, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>(
      { url: `/slack-integration-settings/bot-type/`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: botType },
      options,
    );
  };

  /**
   * Delete botType setting.
   * @summary /slack-integration/bot-type
   */
  const deleteBotType = (botType: BotType, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>(
      { url: `/slack-integration/bot-type/`, method: 'DELETE', headers: { 'Content-Type': 'application/json' }, data: botType },
      options,
    );
  };

  /**
   * Update customBotWithoutProxy setting.
   * @summary /slack-integration-settings/without-proxy/update-settings
   */
  const putWithoutProxySettings = (putWithoutProxySettingsBody: PutWithoutProxySettingsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>(
      {
        url: `/slack-integration-settings/without-proxy/update-settings/`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putWithoutProxySettingsBody,
      },
      options,
    );
  };

  /**
   * Update customBotWithoutProxy permissions.
   * @summary /slack-integration-settings/without-proxy/update-permissions
   */
  const putWithoutProxyPermissions = (putWithoutProxyPermissionsBody: PutWithoutProxyPermissionsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>(
      {
        url: `/slack-integration-settings/without-proxy/update-permissions/`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putWithoutProxyPermissionsBody,
      },
      options,
    );
  };

  /**
   * Generate SlackAppIntegrations
   * @summary /slack-integration-settings/slack-app-integrations
   */
  const putSlackAppIntegrations = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSlackAppIntegrations200>({ url: `/slack-integration-settings/slack-app-integrations`, method: 'POST' }, options);
  };

  /**
   * Delete accessTokens
   * @summary /slack-integration-settings/slack-app-integrations/:id
   */
  const deleteAccessTokens = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteAccessTokens200>({ url: `/slack-integration-settings/slack-app-integrations/${id}`, method: 'DELETE' }, options);
  };

  /**
   * Update proxy uri
   * @summary /slack-integration-settings/proxy-uri
   */
  const putProxyUri = (putProxyUriBody: PutProxyUriBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutProxyUri200>(
      { url: `/slack-integration-settings/proxy-uri`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putProxyUriBody },
      options,
    );
  };

  /**
   * Make SlackAppTokens primary
   * @summary /slack-integration-settings/slack-app-integrations/:id/makeprimary
   */
  const makePrimary = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/slack-integration-settings/slack-app-integrations/${id}/makeprimary`, method: 'PUT' }, options);
  };

  /**
   * Regenerate SlackAppTokens
   * @summary /slack-integration-settings/slack-app-integrations/:id/regenerate-tokens
   */
  const putRegenerateTokens = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutRegenerateTokens200>(
      { url: `/slack-integration-settings/slack-app-integrations/${id}/regenerate-tokens`, method: 'PUT' },
      options,
    );
  };

  /**
   * update supported commands
   * @summary /slack-integration-settings/slack-app-integrations/:id/permissions
   */
  const putSupportedCommands = (id: string, putSupportedCommandsBody: PutSupportedCommandsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutSupportedCommands200>(
      {
        url: `/slack-integration-settings/slack-app-integrations/${id}/permissions`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: putSupportedCommandsBody,
      },
      options,
    );
  };

  /**
   * Delete botType setting.
   * @summary /slack-integration-settings/slack-app-integrations/:id/relation-test
   */
  const postRelationTest = (id: string, postRelationTestBody: PostRelationTestBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>(
      {
        url: `/slack-integration-settings/slack-app-integrations/${id}/relation-test`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postRelationTestBody,
      },
      options,
    );
  };

  /**
   * Test the connection with slack work space.
   * @summary /slack-integration-settings/without-proxy/test
   */
  const postTest = (postTestBody: PostTestBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>(
      { url: `/slack-integration-settings/without-proxy/test`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postTestBody },
      options,
    );
  };

  /**
   * Handle Slack commands
   * @summary /slack-integration/commands
   */
  const postSlackIntegrationCommands = (
    postSlackIntegrationCommandsBody: PostSlackIntegrationCommandsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<string>(
      { url: `/slack-integration/commands`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postSlackIntegrationCommandsBody },
      options,
    );
  };

  /**
   * Verify the access token
   * @summary /slack-integration/proxied/verify
   */
  const postSlackIntegrationProxiedVerify = (
    postSlackIntegrationProxiedVerifyBody: PostSlackIntegrationProxiedVerifyBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostSlackIntegrationProxiedVerify200>(
      {
        url: `/slack-integration/proxied/verify`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postSlackIntegrationProxiedVerifyBody,
      },
      options,
    );
  };

  /**
   * Handle Slack commands
   * @summary /slack-integration/proxied/commands
   */
  const postSlackIntegrationProxiedCommands = (
    postSlackIntegrationProxiedCommandsBody: PostSlackIntegrationProxiedCommandsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<string>(
      {
        url: `/slack-integration/proxied/commands`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postSlackIntegrationProxiedCommandsBody,
      },
      options,
    );
  };

  /**
   * Handle Slack interactions
   * @summary /slack-integration/interactions
   */
  const postSlackIntegrationInteractions = (
    postSlackIntegrationInteractionsBody: PostSlackIntegrationInteractionsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      { url: `/slack-integration/interactions`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postSlackIntegrationInteractionsBody },
      options,
    );
  };

  /**
   * Handle Slack interactions
   * @summary /slack-integration/proxied/interactions
   */
  const postSlackIntegrationProxiedInteractions = (
    postSlackIntegrationProxiedInteractionsBody: PostSlackIntegrationProxiedInteractionsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/slack-integration/proxied/interactions`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postSlackIntegrationProxiedInteractionsBody,
      },
      options,
    );
  };

  /**
   * Get supported commands
   * @summary /slack-integration/supported-commands
   */
  const getSlackIntegrationSupportedCommands = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSlackIntegrationSupportedCommands200>({ url: `/slack-integration/supported-commands`, method: 'GET' }, options);
  };

  /**
   * Handle Slack events
   * @summary /slack-integration/events
   */
  const postSlackIntegrationEvents = (postSlackIntegrationEventsBody: PostSlackIntegrationEventsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostSlackIntegrationEvents200>(
      { url: `/slack-integration/events`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postSlackIntegrationEventsBody },
      options,
    );
  };

  /**
   * Handle Slack events
   * @summary /slack-integration/proxied/events
   */
  const postSlackIntegrationProxiedEvents = (
    postSlackIntegrationProxiedEventsBody: PostSlackIntegrationProxiedEventsBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<PostSlackIntegrationProxiedEvents200>(
      {
        url: `/slack-integration/proxied/events`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postSlackIntegrationProxiedEventsBody,
      },
      options,
    );
  };

  /**
   * Get statistics for user
   * @summary /statistics/user
   */
  const getStatisticsUser = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<StatisticsUserResponse>({ url: `/statistics/user`, method: 'GET' }, options);
  };

  /**
   * @summary /complete-registration
   */
  const completeRegistration = (completeRegistrationBody: CompleteRegistrationBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CompleteRegistration200>(
      { url: `/complete-registration`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: completeRegistrationBody },
      options,
    );
  };

  /**
   * Gets the user group relations
   * @summary /user-group-relations
   */
  const listUserGroupRelations = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ListUserGroupRelations200>({ url: `/user-group-relations`, method: 'GET' }, options);
  };

  /**
   * Get usergroups
   * @summary /user-groups
   */
  const getUserGroup = (params?: GetUserGroupParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroup200>({ url: `/user-groups`, method: 'GET', params }, options);
  };

  /**
   * Adds userGroup
   * @summary /user-groups
   */
  const createUserGroup = (createUserGroupBody: CreateUserGroupBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CreateUserGroup200>(
      { url: `/user-groups`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: createUserGroupBody },
      options,
    );
  };

  /**
   * Get ancestor user groups.
   * @summary /user-groups/ancestors
   */
  const getAncestorUserGroups = (params: GetAncestorUserGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetAncestorUserGroups200>({ url: `/user-groups/ancestors`, method: 'GET', params }, options);
  };

  /**
   * Get child user groups
   * @summary /user-groups/children
   */
  const getUserGroupChildren = (params?: GetUserGroupChildrenParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroupChildren200>({ url: `/user-groups/children`, method: 'GET', params }, options);
  };

  /**
   * Get selectable parent UserGroups
   * @summary /selectable-parent-groups
   */
  const getSelectableParentGroups = (params: GetSelectableParentGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSelectableParentGroups200>({ url: `/selectable-parent-groups`, method: 'GET', params }, options);
  };

  /**
   * Get selectable child UserGroups
   * @summary /selectable-child-groups
   */
  const getSelectableChildGroups = (params: GetSelectableChildGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetSelectableChildGroups200>({ url: `/selectable-child-groups`, method: 'GET', params }, options);
  };

  /**
   * Get UserGroup from Group ID
   * @summary /user-groups/{id}
   */
  const getUserGroupFromGroupId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroupFromGroupId200>({ url: `/user-groups/${id}`, method: 'GET' }, options);
  };

  /**
   * Deletes userGroup
   * @summary /user-groups/{id}
   */
  const deleteUserGroup = (id: string, params?: DeleteUserGroupParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteUserGroup200>({ url: `/user-groups/${id}`, method: 'DELETE', params }, options);
  };

  /**
   * Update userGroup
   * @summary /user-groups/{id}
   */
  const updateUserGroups = (id: string, updateUserGroupsBody: UpdateUserGroupsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateUserGroups200>(
      { url: `/user-groups/${id}`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: updateUserGroupsBody },
      options,
    );
  };

  /**
   * Get users related to the userGroup
   * @summary /user-groups/{id}/users
   */
  const getUsersUserGroups = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUsersUserGroups200>({ url: `/user-groups/${id}/users`, method: 'GET' }, options);
  };

  /**
   * Get users unrelated to the userGroup
   * @summary /user-groups/{id}/unrelated-users
   */
  const getUnrelatedUsersUserGroups = (id: string, params?: GetUnrelatedUsersUserGroupsParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUnrelatedUsersUserGroups200>({ url: `/user-groups/${id}/unrelated-users`, method: 'GET', params }, options);
  };

  /**
   * Add a user to the userGroup
   * @summary /user-groups/{id}/users/{username}
   */
  const addUserUserGroups = (id: string, username: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<AddUserUserGroups200>({ url: `/user-groups/${id}/users/${username}`, method: 'POST' }, options);
  };

  /**
   * remove a user from the userGroup
   * @summary /user-groups/{id}/users/{username}
   */
  const deleteUsersUserGroups = (id: string, username: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeleteUsersUserGroups200>({ url: `/user-groups/${id}/users/${username}`, method: 'DELETE' }, options);
  };

  /**
   * Get the user group relations for the userGroup
   * @summary /user-groups/{id}/user-group-relations
   */
  const getUserGroupRelationsUserGroups = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUserGroupRelationsUserGroups200>({ url: `/user-groups/${id}/user-group-relations`, method: 'GET' }, options);
  };

  /**
   * Get closed pages for the userGroup
   * @summary /user-groups/{id}/pages
   */
  const getPagesUserGroups = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetPagesUserGroups200>({ url: `/user-groups/${id}/pages`, method: 'GET' }, options);
  };

  /**
   * Update the user's UI settings
   * @summary /user-ui-settings
   */
  const putUserUiSettings = (putUserUiSettingsBody: PutUserUiSettingsBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PutUserUiSettings200>(
      { url: `/user-ui-settings`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: putUserUiSettingsBody },
      options,
    );
  };

  /**
   * Select selected columns from users order by asc or desc
   * @summary /users
   */
  const listUsers = (params?: ListUsersParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ListUsers200>({ url: `/users`, method: 'GET', params }, options);
  };

  /**
   * @summary /usersIdReacent
   */
  const recentCreatedPageOfUserId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<RecentCreatedPageOfUserId200>({ url: `/${id}/recent`, method: 'GET' }, options);
  };

  /**
   * Create new users and send Emails
   * @summary /users/invite
   */
  const inviteUser = (params?: InviteUserParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<InviteUser200>({ url: `/users/invite`, method: 'POST', params }, options);
  };

  /**
   * Grant user admin
   * @summary /users/{id}/grant-admin
   */
  const grantAdminUser = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GrantAdminUser200>({ url: `/users/${id}/grant-admin`, method: 'PUT' }, options);
  };

  /**
   * Revoke user admin
   * @summary /users/{id}/revoke-admin
   */
  const revokeAdminUser = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<RevokeAdminUser200>({ url: `/users/${id}/revoke-admin`, method: 'PUT' }, options);
  };

  /**
   * Grant user read only access
   * @summary /users/{id}/grant-read-only
   */
  const readOnly = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ReadOnly200>({ url: `/users/${id}/grant-read-only`, method: 'PUT' }, options);
  };

  /**
   * Revoke user read only access
   * @summary /users/{id}/revoke-read-only
   */
  const revokeReadOnly = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<RevokeReadOnly200>({ url: `/users/${id}/revoke-read-only`, method: 'PUT' }, options);
  };

  /**
   * Activate user
   * @summary /users/{id}/activate
   */
  const activateUser = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ActivateUser200>({ url: `/users/${id}/activate`, method: 'PUT' }, options);
  };

  /**
   * Deactivate user
   * @summary /users/{id}/deactivate
   */
  const deactivateUser = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<DeactivateUser200>({ url: `/users/${id}/deactivate`, method: 'PUT' }, options);
  };

  /**
   * Delete user
   * @summary /users/{id}/remove
   */
  const removeUser = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<RemoveUser200>({ url: `/users/${id}/remove`, method: 'DELETE' }, options);
  };

  /**
   * Get external-account
   * @summary /users/external-accounts
   */
  const listExternalAccountsUsers = (params?: ListExternalAccountsUsersParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ListExternalAccountsUsers200>({ url: `/users/external-accounts`, method: 'GET', params }, options);
  };

  /**
   * Delete ExternalAccount
   * @summary /users/external-accounts/{id}/remove
   */
  const removeExternalAccountUser = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<RemoveExternalAccountUser200>({ url: `/users/external-accounts/${id}/remove`, method: 'DELETE' }, options);
  };

  /**
   * update imageUrlCache
   * @summary /users/update.imageUrlCache
   */
  const updateImageUrlCache = (updateImageUrlCacheBody: UpdateImageUrlCacheBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UpdateImageUrlCache200>(
      { url: `/users/update.imageUrlCache`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: updateImageUrlCacheBody },
      options,
    );
  };

  /**
   * update imageUrlCache
   * @summary /users/reset-password
   */
  const resetPassword = (resetPasswordBody: ResetPasswordBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<ResetPassword200>(
      { url: `/users/reset-password`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: resetPasswordBody },
      options,
    );
  };

  /**
   * send new password email
   * @summary /users/reset-password-email
   */
  const resetPasswordEmail = (resetPasswordEmailBody: ResetPasswordEmailBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>(
      { url: `/users/reset-password-email`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: resetPasswordEmailBody },
      options,
    );
  };

  /**
   * send invitation email
   * @summary /users/send-invitation-email
   */
  const sendInvitationEmail = (sendInvitationEmailBody: SendInvitationEmailBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<SendInvitationEmail200>(
      { url: `/users/send-invitation-email`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: sendInvitationEmailBody },
      options,
    );
  };

  /**
   * Get list of users
   * @summary /users/list
   */
  const getUsersList = (params?: GetUsersListParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUsersList200>({ url: `/users/list`, method: 'GET', params }, options);
  };

  /**
   * Get list of usernames
   * @summary /users/usernames
   */
  const getUsernames = (params?: GetUsernamesParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetUsernames200>({ url: `/users/usernames`, method: 'GET', params }, options);
  };

  /**
   * @summary /login
   */
  const postLogin = (postLoginBody: PostLoginBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostLogin200>({ url: `/login`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postLoginBody }, options);
  };

  /**
   * @summary /register
   */
  const postRegister = (postRegisterBody: PostRegisterBody, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<PostRegister200>(
      { url: `/register`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postRegisterBody },
      options,
    );
  };

  return {
    getExternalUserGroupRelations,
    listExternalUserGroups,
    getAncestors,
    listChildren,
    getExternalUserGroup,
    deleteExternalUserGroup,
    updateExternalUserGroup,
    getExternalUserGroupRelations,
    getLdapSyncSettings,
    updateLdapSyncSettings,
    getKeycloakSyncSettings,
    updateKeycloakSyncSettings,
    syncExternalUserGroupsLdap,
    syncExternalUserGroupsKeycloak,
    getExternalUserGroupsLdapSyncStatus,
    getQuestionnaireOrders,
    getQuestionnaireIsEnabled,
    postQuestionnaireProactiveAnswer,
    putQuestionnaireAnswer,
    putQuestionnaireSkip,
    putQuestionnaireDeny,
    getTemplates,
    getTemplatesPresetTemplatesTemplateIdLocale,
    getTemplatesPluginTemplatesOrganizationIdReposIdTemplateIdLocale,
    postPlugins,
    putPluginsIdActivate,
    deletePluginsIdRemove,
    getActivity,
    getAdminHome,
    getAppSettings,
    updateAppSettings,
    updateAppSettingSiteUrlSetting,
    updateAppSettingSmtpSetting,
    postSmtpTest,
    updateAppSettingSesSetting,
    updateAppSettingFileUploadSetting,
    updateAppSettingQuestionnaireSettings,
    updateAppSettingV5SchemaMigration,
    updateAppSettingMaintenanceMode,
    getAttachmentList,
    getAttachmentLimit,
    addAttachment,
    getAttachmentId,
    createBookmarkFolder,
    updateBookmarkFolder,
    listBookmarkFolders,
    deleteBookmarkFolder,
    addBookmarkToFolder,
    updateBookmarkInFolder,
    getBookmarkedInfo,
    getMyBookmarkedStatus,
    updateBookmarkedStatus,
    getCustomizeSetting,
    getLayoutCustomizeSetting,
    updateLayoutCustomizeSetting,
    getThemeCustomizeSetting,
    updateThemeCustomizeSetting,
    getCustomeSettingSidebar,
    updateCustomizeSettingSidebar,
    updateFunctionCustomizeSetting,
    updatePresentationCustomizeSetting,
    updateHighlightCustomizeSetting,
    updateCustomizeTitleCustomizeSetting,
    updateCustomizeNoscriptCustomizeSetting,
    updateCustomizeCssCustomizeSetting,
    updateCustomizeScriptCustomizeSetting,
    updateCustomizeLogoCustomizeSetting,
    uploadBrandLogoCustomizeSetting,
    deleteBrandLogoCustomizeSetting,
    getExportStatus,
    createExport,
    deleteExport,
    postForgotPassword,
    putForgotPassword,
    getG2gTransferFiles,
    postG2gTransfer,
    postG2gTransferAttachment,
    getG2gTransferGrowiInfo,
    postG2gTransferGenerateKey,
    postG2gTransferTransfer,
    getHealthcheck,
    getImportSettingsParams,
    executeImport,
    getImportStatus,
    uploadImport,
    deleteImportAll,
    getInAppNotificationList,
    getInAppNotificationStatus,
    openInAppNotification,
    openAllInAppNotification,
    install,
    activateInvitedUser,
    postLogout,
    getMarkdownSetting,
    updateLineBreakMarkdownSetting,
    updateIndentMarkdownSetting,
    updateXssMarkdownSetting,
    getMongoCollections,
    getNotificationSetting,
    postNotificationSettingUserNotification,
    deleteNotificationSettingUserNotificationId,
    getNotificationSettingGlobalNotificationId,
    putNotificationSettingGlobalNotificationId,
    deleteNotificationSettingGlobalNotificationId,
    postNotificationSettingGlobalNotification,
    putNotificationSettingNotifyForPageGrant,
    putNotificationSettingGlobalNotificationIdEnabled,
    getPageListingRoot,
    getPageListingAncestorsChildren,
    getPageListingChildren,
    getPageListingInfo,
    getPage,
    createPage,
    updatePage,
    getPageExist,
    updateLikedStatus,
    getPageInfo,
    getPageGrantData,
    getPageNonUserRelatedGroupsGranted,
    getPageApplicableGrant,
    putPageIdGrant,
    getPageExportPageId,
    getAlreadyExistPaths,
    updateSubscriptionStatus,
    putPageIdContentWidth,
    putPageIdPublish,
    putPageIdUnpublish,
    getPageIdYjsData,
    putPageIdSyncLatestRevisionBodyToYjsDraft,
    getPagesRecent,
    renamePage,
    resumeRenamePage,
    deletePagesEmptyTrash,
    getList,
    duplicatePage,
    subordinatedList,
    deletePages,
    convertPagesByPath,
    legacyPagesMigration,
    getPagesV5MigrationStatus,
    getPersonalSetting,
    updatePersonalSetting,
    getIsPasswordSet,
    putUserImageType,
    getExternalAccounts,
    putUserPassword,
    putUserApiToken,
    associateLdapAccount,
    disassociateLdapAccount,
    putEditorSettings,
    getEditorSettings,
    putInAppNotificationSettings,
    getInAppNotificationSettings,
    putQuestionnaireSetting,
    getRevisionsList,
    getRevisionsId,
    getSearchIndices,
    putSearchIndices,
    postSearchConnection,
    getSecuritySetting,
    putSecuritySettingAuthenticationEnabled,
    getSecuritySettingAuthentication,
    putSecuritySettingGeneralSetting,
    putSecuritySettingShareLinkSetting,
    getSecuritySettingAllShareLinks,
    deleteSecuritySettingAllShareLinks,
    putSecuritySettingLocalSetting,
    putSecuritySettingLdap,
    putSecuritySettingSaml,
    putSecuritySettingOidc,
    putSecuritySettingGoogleOauth,
    putSecuritySettingGithubOauth,
    getShareLinks,
    postShareLinks,
    deleteShareLinks,
    deleteShareLinksAll,
    deleteShareLinksId,
    getSlackIntegrationLegacySetting,
    putSlackIntegrationLegacySetting,
    getSlackBotSettingParams,
    putBotType,
    deleteBotType,
    putWithoutProxySettings,
    putWithoutProxyPermissions,
    putSlackAppIntegrations,
    deleteAccessTokens,
    putProxyUri,
    makePrimary,
    putRegenerateTokens,
    putSupportedCommands,
    postRelationTest,
    postTest,
    postSlackIntegrationCommands,
    postSlackIntegrationProxiedVerify,
    postSlackIntegrationProxiedCommands,
    postSlackIntegrationInteractions,
    postSlackIntegrationProxiedInteractions,
    getSlackIntegrationSupportedCommands,
    postSlackIntegrationEvents,
    postSlackIntegrationProxiedEvents,
    getStatisticsUser,
    completeRegistration,
    listUserGroupRelations,
    getUserGroup,
    createUserGroup,
    getAncestorUserGroups,
    getUserGroupChildren,
    getSelectableParentGroups,
    getSelectableChildGroups,
    getUserGroupFromGroupId,
    deleteUserGroup,
    updateUserGroups,
    getUsersUserGroups,
    getUnrelatedUsersUserGroups,
    addUserUserGroups,
    deleteUsersUserGroups,
    getUserGroupRelationsUserGroups,
    getPagesUserGroups,
    putUserUiSettings,
    listUsers,
    recentCreatedPageOfUserId,
    inviteUser,
    grantAdminUser,
    revokeAdminUser,
    readOnly,
    revokeReadOnly,
    activateUser,
    deactivateUser,
    removeUser,
    listExternalAccountsUsers,
    removeExternalAccountUser,
    updateImageUrlCache,
    resetPassword,
    resetPasswordEmail,
    sendInvitationEmail,
    getUsersList,
    getUsernames,
    postLogin,
    postRegister,
  };
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type GetExternalUserGroupRelationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroupRelations']>>>;
export type ListExternalUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['listExternalUserGroups']>>>;
export type GetAncestorsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAncestors']>>>;
export type ListChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['listChildren']>>>;
export type GetExternalUserGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroup']>>>;
export type DeleteExternalUserGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteExternalUserGroup']>>>;
export type UpdateExternalUserGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateExternalUserGroup']>>>;
export type GetExternalUserGroupRelationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroupRelations']>>>;
export type GetLdapSyncSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getLdapSyncSettings']>>>;
export type UpdateLdapSyncSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateLdapSyncSettings']>>>;
export type GetKeycloakSyncSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getKeycloakSyncSettings']>>>;
export type UpdateKeycloakSyncSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateKeycloakSyncSettings']>>>;
export type SyncExternalUserGroupsLdapResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['syncExternalUserGroupsLdap']>>>;
export type SyncExternalUserGroupsKeycloakResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['syncExternalUserGroupsKeycloak']>>>;
export type GetExternalUserGroupsLdapSyncStatusResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalUserGroupsLdapSyncStatus']>>
>;
export type GetQuestionnaireOrdersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getQuestionnaireOrders']>>>;
export type GetQuestionnaireIsEnabledResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getQuestionnaireIsEnabled']>>>;
export type PostQuestionnaireProactiveAnswerResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postQuestionnaireProactiveAnswer']>>>;
export type PutQuestionnaireAnswerResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putQuestionnaireAnswer']>>>;
export type PutQuestionnaireSkipResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putQuestionnaireSkip']>>>;
export type PutQuestionnaireDenyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putQuestionnaireDeny']>>>;
export type GetTemplatesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getTemplates']>>>;
export type GetTemplatesPresetTemplatesTemplateIdLocaleResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getTemplatesPresetTemplatesTemplateIdLocale']>>
>;
export type GetTemplatesPluginTemplatesOrganizationIdReposIdTemplateIdLocaleResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getTemplatesPluginTemplatesOrganizationIdReposIdTemplateIdLocale']>>
>;
export type PostPluginsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postPlugins']>>>;
export type PutPluginsIdActivateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPluginsIdActivate']>>>;
export type DeletePluginsIdRemoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deletePluginsIdRemove']>>>;
export type GetActivityResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getActivity']>>>;
export type GetAdminHomeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAdminHome']>>>;
export type GetAppSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAppSettings']>>>;
export type UpdateAppSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateAppSettings']>>>;
export type UpdateAppSettingSiteUrlSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateAppSettingSiteUrlSetting']>>>;
export type UpdateAppSettingSmtpSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateAppSettingSmtpSetting']>>>;
export type PostSmtpTestResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSmtpTest']>>>;
export type UpdateAppSettingSesSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateAppSettingSesSetting']>>>;
export type UpdateAppSettingFileUploadSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateAppSettingFileUploadSetting']>>
>;
export type UpdateAppSettingQuestionnaireSettingsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateAppSettingQuestionnaireSettings']>>
>;
export type UpdateAppSettingV5SchemaMigrationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateAppSettingV5SchemaMigration']>>
>;
export type UpdateAppSettingMaintenanceModeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateAppSettingMaintenanceMode']>>>;
export type GetAttachmentListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAttachmentList']>>>;
export type GetAttachmentLimitResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAttachmentLimit']>>>;
export type AddAttachmentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['addAttachment']>>>;
export type GetAttachmentIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAttachmentId']>>>;
export type CreateBookmarkFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['createBookmarkFolder']>>>;
export type UpdateBookmarkFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateBookmarkFolder']>>>;
export type ListBookmarkFoldersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['listBookmarkFolders']>>>;
export type DeleteBookmarkFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteBookmarkFolder']>>>;
export type AddBookmarkToFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['addBookmarkToFolder']>>>;
export type UpdateBookmarkInFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateBookmarkInFolder']>>>;
export type GetBookmarkedInfoResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getBookmarkedInfo']>>>;
export type GetMyBookmarkedStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getMyBookmarkedStatus']>>>;
export type UpdateBookmarkedStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateBookmarkedStatus']>>>;
export type GetCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getCustomizeSetting']>>>;
export type GetLayoutCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getLayoutCustomizeSetting']>>>;
export type UpdateLayoutCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateLayoutCustomizeSetting']>>>;
export type GetThemeCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getThemeCustomizeSetting']>>>;
export type UpdateThemeCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateThemeCustomizeSetting']>>>;
export type GetCustomeSettingSidebarResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getCustomeSettingSidebar']>>>;
export type UpdateCustomizeSettingSidebarResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateCustomizeSettingSidebar']>>>;
export type UpdateFunctionCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateFunctionCustomizeSetting']>>>;
export type UpdatePresentationCustomizeSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updatePresentationCustomizeSetting']>>
>;
export type UpdateHighlightCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateHighlightCustomizeSetting']>>>;
export type UpdateCustomizeTitleCustomizeSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateCustomizeTitleCustomizeSetting']>>
>;
export type UpdateCustomizeNoscriptCustomizeSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateCustomizeNoscriptCustomizeSetting']>>
>;
export type UpdateCustomizeCssCustomizeSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateCustomizeCssCustomizeSetting']>>
>;
export type UpdateCustomizeScriptCustomizeSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateCustomizeScriptCustomizeSetting']>>
>;
export type UpdateCustomizeLogoCustomizeSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateCustomizeLogoCustomizeSetting']>>
>;
export type UploadBrandLogoCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['uploadBrandLogoCustomizeSetting']>>>;
export type DeleteBrandLogoCustomizeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteBrandLogoCustomizeSetting']>>>;
export type GetExportStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExportStatus']>>>;
export type CreateExportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['createExport']>>>;
export type DeleteExportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteExport']>>>;
export type PostForgotPasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postForgotPassword']>>>;
export type PutForgotPasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putForgotPassword']>>>;
export type GetG2gTransferFilesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getG2gTransferFiles']>>>;
export type PostG2gTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postG2gTransfer']>>>;
export type PostG2gTransferAttachmentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postG2gTransferAttachment']>>>;
export type GetG2gTransferGrowiInfoResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getG2gTransferGrowiInfo']>>>;
export type PostG2gTransferGenerateKeyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postG2gTransferGenerateKey']>>>;
export type PostG2gTransferTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postG2gTransferTransfer']>>>;
export type GetHealthcheckResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getHealthcheck']>>>;
export type GetImportSettingsParamsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getImportSettingsParams']>>>;
export type ExecuteImportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['executeImport']>>>;
export type GetImportStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getImportStatus']>>>;
export type UploadImportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['uploadImport']>>>;
export type DeleteImportAllResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteImportAll']>>>;
export type GetInAppNotificationListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getInAppNotificationList']>>>;
export type GetInAppNotificationStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getInAppNotificationStatus']>>>;
export type OpenInAppNotificationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['openInAppNotification']>>>;
export type OpenAllInAppNotificationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['openAllInAppNotification']>>>;
export type InstallResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['install']>>>;
export type ActivateInvitedUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['activateInvitedUser']>>>;
export type PostLogoutResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postLogout']>>>;
export type GetMarkdownSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getMarkdownSetting']>>>;
export type UpdateLineBreakMarkdownSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateLineBreakMarkdownSetting']>>>;
export type UpdateIndentMarkdownSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateIndentMarkdownSetting']>>>;
export type UpdateXssMarkdownSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateXssMarkdownSetting']>>>;
export type GetMongoCollectionsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getMongoCollections']>>>;
export type GetNotificationSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getNotificationSetting']>>>;
export type PostNotificationSettingUserNotificationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postNotificationSettingUserNotification']>>
>;
export type DeleteNotificationSettingUserNotificationIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteNotificationSettingUserNotificationId']>>
>;
export type GetNotificationSettingGlobalNotificationIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getNotificationSettingGlobalNotificationId']>>
>;
export type PutNotificationSettingGlobalNotificationIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putNotificationSettingGlobalNotificationId']>>
>;
export type DeleteNotificationSettingGlobalNotificationIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteNotificationSettingGlobalNotificationId']>>
>;
export type PostNotificationSettingGlobalNotificationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postNotificationSettingGlobalNotification']>>
>;
export type PutNotificationSettingNotifyForPageGrantResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putNotificationSettingNotifyForPageGrant']>>
>;
export type PutNotificationSettingGlobalNotificationIdEnabledResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putNotificationSettingGlobalNotificationIdEnabled']>>
>;
export type GetPageListingRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageListingRoot']>>>;
export type GetPageListingAncestorsChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageListingAncestorsChildren']>>>;
export type GetPageListingChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageListingChildren']>>>;
export type GetPageListingInfoResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageListingInfo']>>>;
export type GetPageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPage']>>>;
export type CreatePageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['createPage']>>>;
export type UpdatePageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updatePage']>>>;
export type GetPageExistResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageExist']>>>;
export type UpdateLikedStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateLikedStatus']>>>;
export type GetPageInfoResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageInfo']>>>;
export type GetPageGrantDataResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageGrantData']>>>;
export type GetPageNonUserRelatedGroupsGrantedResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageNonUserRelatedGroupsGranted']>>
>;
export type GetPageApplicableGrantResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageApplicableGrant']>>>;
export type PutPageIdGrantResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPageIdGrant']>>>;
export type GetPageExportPageIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageExportPageId']>>>;
export type GetAlreadyExistPathsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAlreadyExistPaths']>>>;
export type UpdateSubscriptionStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateSubscriptionStatus']>>>;
export type PutPageIdContentWidthResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPageIdContentWidth']>>>;
export type PutPageIdPublishResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPageIdPublish']>>>;
export type PutPageIdUnpublishResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPageIdUnpublish']>>>;
export type GetPageIdYjsDataResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPageIdYjsData']>>>;
export type PutPageIdSyncLatestRevisionBodyToYjsDraftResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putPageIdSyncLatestRevisionBodyToYjsDraft']>>
>;
export type GetPagesRecentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPagesRecent']>>>;
export type RenamePageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['renamePage']>>>;
export type ResumeRenamePageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['resumeRenamePage']>>>;
export type DeletePagesEmptyTrashResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deletePagesEmptyTrash']>>>;
export type GetListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getList']>>>;
export type DuplicatePageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['duplicatePage']>>>;
export type SubordinatedListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['subordinatedList']>>>;
export type DeletePagesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deletePages']>>>;
export type ConvertPagesByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['convertPagesByPath']>>>;
export type LegacyPagesMigrationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['legacyPagesMigration']>>>;
export type GetPagesV5MigrationStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPagesV5MigrationStatus']>>>;
export type GetPersonalSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPersonalSetting']>>>;
export type UpdatePersonalSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updatePersonalSetting']>>>;
export type GetIsPasswordSetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getIsPasswordSet']>>>;
export type PutUserImageTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUserImageType']>>>;
export type GetExternalAccountsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getExternalAccounts']>>>;
export type PutUserPasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUserPassword']>>>;
export type PutUserApiTokenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUserApiToken']>>>;
export type AssociateLdapAccountResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['associateLdapAccount']>>>;
export type DisassociateLdapAccountResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['disassociateLdapAccount']>>>;
export type PutEditorSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putEditorSettings']>>>;
export type GetEditorSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getEditorSettings']>>>;
export type PutInAppNotificationSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putInAppNotificationSettings']>>>;
export type GetInAppNotificationSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getInAppNotificationSettings']>>>;
export type PutQuestionnaireSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putQuestionnaireSetting']>>>;
export type GetRevisionsListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getRevisionsList']>>>;
export type GetRevisionsIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getRevisionsId']>>>;
export type GetSearchIndicesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSearchIndices']>>>;
export type PutSearchIndicesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSearchIndices']>>>;
export type PostSearchConnectionResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSearchConnection']>>>;
export type GetSecuritySettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSecuritySetting']>>>;
export type PutSecuritySettingAuthenticationEnabledResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingAuthenticationEnabled']>>
>;
export type GetSecuritySettingAuthenticationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSecuritySettingAuthentication']>>>;
export type PutSecuritySettingGeneralSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingGeneralSetting']>>>;
export type PutSecuritySettingShareLinkSettingResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingShareLinkSetting']>>
>;
export type GetSecuritySettingAllShareLinksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSecuritySettingAllShareLinks']>>>;
export type DeleteSecuritySettingAllShareLinksResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteSecuritySettingAllShareLinks']>>
>;
export type PutSecuritySettingLocalSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingLocalSetting']>>>;
export type PutSecuritySettingLdapResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingLdap']>>>;
export type PutSecuritySettingSamlResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingSaml']>>>;
export type PutSecuritySettingOidcResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingOidc']>>>;
export type PutSecuritySettingGoogleOauthResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingGoogleOauth']>>>;
export type PutSecuritySettingGithubOauthResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSecuritySettingGithubOauth']>>>;
export type GetShareLinksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getShareLinks']>>>;
export type PostShareLinksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postShareLinks']>>>;
export type DeleteShareLinksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteShareLinks']>>>;
export type DeleteShareLinksAllResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteShareLinksAll']>>>;
export type DeleteShareLinksIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteShareLinksId']>>>;
export type GetSlackIntegrationLegacySettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSlackIntegrationLegacySetting']>>>;
export type PutSlackIntegrationLegacySettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSlackIntegrationLegacySetting']>>>;
export type GetSlackBotSettingParamsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSlackBotSettingParams']>>>;
export type PutBotTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putBotType']>>>;
export type DeleteBotTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteBotType']>>>;
export type PutWithoutProxySettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putWithoutProxySettings']>>>;
export type PutWithoutProxyPermissionsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putWithoutProxyPermissions']>>>;
export type PutSlackAppIntegrationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSlackAppIntegrations']>>>;
export type DeleteAccessTokensResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteAccessTokens']>>>;
export type PutProxyUriResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putProxyUri']>>>;
export type MakePrimaryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['makePrimary']>>>;
export type PutRegenerateTokensResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putRegenerateTokens']>>>;
export type PutSupportedCommandsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putSupportedCommands']>>>;
export type PostRelationTestResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postRelationTest']>>>;
export type PostTestResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postTest']>>>;
export type PostSlackIntegrationCommandsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationCommands']>>>;
export type PostSlackIntegrationProxiedVerifyResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationProxiedVerify']>>
>;
export type PostSlackIntegrationProxiedCommandsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationProxiedCommands']>>
>;
export type PostSlackIntegrationInteractionsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationInteractions']>>>;
export type PostSlackIntegrationProxiedInteractionsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationProxiedInteractions']>>
>;
export type GetSlackIntegrationSupportedCommandsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSlackIntegrationSupportedCommands']>>
>;
export type PostSlackIntegrationEventsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationEvents']>>>;
export type PostSlackIntegrationProxiedEventsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postSlackIntegrationProxiedEvents']>>
>;
export type GetStatisticsUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getStatisticsUser']>>>;
export type CompleteRegistrationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['completeRegistration']>>>;
export type ListUserGroupRelationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['listUserGroupRelations']>>>;
export type GetUserGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroup']>>>;
export type CreateUserGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['createUserGroup']>>>;
export type GetAncestorUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getAncestorUserGroups']>>>;
export type GetUserGroupChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroupChildren']>>>;
export type GetSelectableParentGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSelectableParentGroups']>>>;
export type GetSelectableChildGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getSelectableChildGroups']>>>;
export type GetUserGroupFromGroupIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroupFromGroupId']>>>;
export type DeleteUserGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteUserGroup']>>>;
export type UpdateUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateUserGroups']>>>;
export type GetUsersUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUsersUserGroups']>>>;
export type GetUnrelatedUsersUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUnrelatedUsersUserGroups']>>>;
export type AddUserUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['addUserUserGroups']>>>;
export type DeleteUsersUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deleteUsersUserGroups']>>>;
export type GetUserGroupRelationsUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUserGroupRelationsUserGroups']>>>;
export type GetPagesUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getPagesUserGroups']>>>;
export type PutUserUiSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['putUserUiSettings']>>>;
export type ListUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['listUsers']>>>;
export type RecentCreatedPageOfUserIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['recentCreatedPageOfUserId']>>>;
export type InviteUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['inviteUser']>>>;
export type GrantAdminUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['grantAdminUser']>>>;
export type RevokeAdminUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['revokeAdminUser']>>>;
export type ReadOnlyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['readOnly']>>>;
export type RevokeReadOnlyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['revokeReadOnly']>>>;
export type ActivateUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['activateUser']>>>;
export type DeactivateUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['deactivateUser']>>>;
export type RemoveUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['removeUser']>>>;
export type ListExternalAccountsUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['listExternalAccountsUsers']>>>;
export type RemoveExternalAccountUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['removeExternalAccountUser']>>>;
export type UpdateImageUrlCacheResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['updateImageUrlCache']>>>;
export type ResetPasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['resetPassword']>>>;
export type ResetPasswordEmailResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['resetPasswordEmail']>>>;
export type SendInvitationEmailResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['sendInvitationEmail']>>>;
export type GetUsersListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUsersList']>>>;
export type GetUsernamesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['getUsernames']>>>;
export type PostLoginResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postLogin']>>>;
export type PostRegisterResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getGrowirestapiv3>['postRegister']>>>;
