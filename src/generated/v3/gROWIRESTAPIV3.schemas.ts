/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * GROWI REST API v3
 * OpenAPI spec version: 7.2.6-RC.0
 */
export interface SyncStatus {
  isExecutingSync?: boolean;
  totalCount?: number;
  count?: number;
}

export type ActivityResponseSerializedPaginationResultDocsItemSnapshot = {
  username?: string;
  _id?: string;
};

export type ActivityResponseSerializedPaginationResultDocsItemUser = {
  _id?: string;
  isGravatarEnabled?: boolean;
  isEmailPublished?: boolean;
  lang?: string;
  status?: number;
  admin?: boolean;
  readOnly?: boolean;
  isInvitationEmailSended?: boolean;
  isQuestionnaireEnabled?: boolean;
  name?: string;
  username?: string;
  createdAt?: string;
  updatedAt?: string;
  __v?: number;
  imageUrlCached?: string;
  lastLoginAt?: string;
  email?: string;
};

export type ActivityResponseSerializedPaginationResultDocsItem = {
  _id?: string;
  id?: string;
  ip?: string;
  endpoint?: string;
  targetModel?: string;
  target?: string;
  action?: string;
  snapshot?: ActivityResponseSerializedPaginationResultDocsItemSnapshot;
  createdAt?: string;
  __v?: number;
  user?: ActivityResponseSerializedPaginationResultDocsItemUser;
};

export type ActivityResponseSerializedPaginationResult = {
  docs?: ActivityResponseSerializedPaginationResultDocsItem[];
  totalDocs?: number;
  offset?: number;
  limit?: number;
  totalPages?: number;
  page?: number;
  pagingCounter?: number;
  hasPrevPage?: boolean;
  hasNextPage?: boolean;
  /** @nullable */
  prevPage?: number | null;
  /** @nullable */
  nextPage?: number | null;
};

export interface ActivityResponse {
  serializedPaginationResult?: ActivityResponseSerializedPaginationResult;
}

/**
 * environment variables
 */
export type SystemInformationParamsEnvVars = { [key: string]: string };

export interface SystemInformationParams {
  /** GROWI version or '-' */
  growiVersion?: string;
  /** node version or '-' */
  nodeVersion?: string;
  /** npm version or '-' */
  npmVersion?: string;
  /** pnpm version or '-' */
  pnpmVersion?: string;
  /** environment variables */
  envVars?: SystemInformationParamsEnvVars;
  /** This value is true if this GROWI is compatible v5. */
  isV5Compatible?: boolean;
  /** This value is true if this site is maintenance mode. */
  isMaintenanceMode?: boolean;
}

/**
 * installed plugins
 */
export type InstalledPluginsParamsInstalledPlugins = { [key: string]: unknown };

export interface InstalledPluginsParams {
  /** installed plugins */
  installedPlugins?: InstalledPluginsParamsInstalledPlugins;
}

/**
 * AppSettingParams
 */
export interface AppSettingParams {
  azureReferenceFileWithRelayMode?: boolean;
  azureUseOnlyEnvVars?: boolean;
  /** confidential show on page header */
  confidential?: string;
  envAzureClientId?: string;
  envAzureClientSecret?: string;
  envAzureStorageAccountName?: string;
  envAzureStorageContainerName?: string;
  envFileUploadType?: string;
  envGcsApiKeyJsonPath?: string;
  envGcsBucket?: string;
  envGcsUploadNamespace?: string;
  envSiteUrl?: string;
  fileUpload?: boolean;
  fileUploadType?: string;
  fromAddress?: string;
  gcsApiKeyJsonPath?: string;
  gcsBucket?: string;
  gcsReferenceFileWithRelayMode?: boolean;
  gcsUploadNamespace?: string;
  gcsUseOnlyEnvVars?: boolean;
  globalLang?: string;
  isAppSiteUrlHashed?: boolean;
  isEmailPublishedForNewUser?: boolean;
  isMaintenanceMode?: boolean;
  isQuestionnaireEnabled?: boolean;
  isV5Compatible?: boolean;
  s3AccessKeyId?: string;
  s3Bucket?: string;
  s3CustomEndpoint?: string;
  s3ReferenceFileWithRelayMode?: boolean;
  s3Region?: string;
  siteUrl?: string;
  siteUrlUseOnlyEnvVars?: boolean;
  smtpHost?: string;
  smtpPassword?: string;
  smtpPort?: string;
  smtpUser?: string;
  useOnlyEnvVarForFileUploadType?: boolean;
}

/**
 * AppSettingPutParams
 */
export interface AppSettingPutParams {
  /** title of the site */
  title?: string;
  /** confidential show on page header */
  confidential?: string;
  /** global language */
  globalLang?: string;
  /** is email published for new user, or not */
  isEmailPublishedForNewUser?: boolean;
  /** is file upload enabled, or not */
  fileUpload?: boolean;
}

/**
 * SiteUrlSettingParams
 */
export interface SiteUrlSettingParams {
  /** Site URL. e.g. https://example.com, https://example.com:8080 */
  siteUrl?: string;
  /** environment variable 'APP_SITE_URL' */
  envSiteUrl?: string;
}

/**
 * SmtpSettingParams
 */
export interface SmtpSettingParams {
  /** host name of client's smtp server */
  smtpHost?: string;
  /** port of client's smtp server */
  smtpPort?: string;
  /** user name of client's smtp server */
  smtpUser?: string;
  /** password of client's smtp server */
  smtpPassword?: string;
  /** e-mail address */
  fromAddress?: string;
}

/**
 * SmtpSettingResponseParams
 */
export interface SmtpSettingResponseParams {
  /** is mailer setup, or not */
  isMailerSetup?: boolean;
  /** host name of client's smtp server */
  smtpHost?: string;
  /** port of client's smtp server */
  smtpPort?: string;
  /** user name of client's smtp server */
  smtpUser?: string;
  /** password of client's smtp server */
  smtpPassword?: string;
  /** e-mail address */
  fromAddress?: string;
}

/**
 * SesSettingParams
 */
export interface SesSettingParams {
  /** e-mail address used as from address of mail which sent from GROWI app */
  from?: string;
  /** transmission method */
  transmissionMethod?: string;
  /** accesskey id for authentification of AWS */
  sesAccessKeyId?: string;
  /** secret key for authentification of AWS */
  sesSecretAccessKey?: string;
}

/**
 * SesSettingParams
 */
export interface SesSettingResponseParams {
  /** is mailer setup, or not */
  isMailerSetup?: boolean;
  /** e-mail address used as from address of mail which sent from GROWI app */
  from?: string;
  /** transmission method */
  transmissionMethod?: string;
  /** accesskey id for authentification of AWS */
  sesAccessKeyId?: string;
  /** secret key for authentification of AWS */
  sesSecretAccessKey?: string;
}

/**
 * FileUploadTypeParams
 */
export interface FileUploadSettingParams {
  /** fileUploadType */
  fileUploadType?: string;
  /** region of AWS S3 */
  s3Region?: string;
  /** custom endpoint of AWS S3 */
  s3CustomEndpoint?: string;
  /** AWS S3 bucket name */
  s3Bucket?: string;
  /** accesskey id for authentification of AWS */
  s3AccessKeyId?: string;
  /** secret key for authentification of AWS */
  s3SecretAccessKey?: string;
  /** is enable internal stream system for s3 file request */
  s3ReferenceFileWithRelayMode?: boolean;
  /** apiKeyJsonPath of gcp */
  gcsApiKeyJsonPath?: string;
  /** bucket name of gcs */
  gcsBucket?: string;
  /** name space of gcs */
  gcsUploadNamespace?: string;
  /** is enable internal stream system for gcs file request */
  gcsReferenceFileWithRelayMode?: boolean;
  /** tenant id of azure */
  azureTenantId?: string;
  /** client id of azure */
  azureClientId?: string;
  /** client secret of azure */
  azureClientSecret?: string;
  /** storage account name of azure */
  azureStorageAccountName?: string;
  /** storage container name of azure */
  azureStorageContainerName?: string;
  /** is enable internal stream system for azure file request */
  azureReferenceFileWithRelayMode?: boolean;
}

/**
 * QuestionnaireSettingParams
 */
export interface QuestionnaireSettingParams {
  /** is questionnaire enabled, or not */
  isQuestionnaireEnabled?: boolean;
  /** is app site url hashed, or not */
  isAppSiteUrlHashed?: boolean;
}

/**
 * AttachmentPaginateResult
 */
export interface AttachmentPaginateResult {
  docs?: Attachment[];
  totalDocs?: number;
  limit?: number;
  totalPages?: number;
  page?: number;
  offset?: number;
  prevPage?: number;
  nextPage?: number;
  hasNextPage?: boolean;
  hasPrevPage?: boolean;
  pagingCounter?: number;
}

/**
 * Attachment
 */
export interface Attachment {
  /** attachment ID */
  id?: string;
  /** attachment ID */
  _id?: string;
  /** attachment version */
  __v?: number;
  /** attachment type */
  attachmentType?: string;
  /** file format in MIME */
  fileFormat?: string;
  /** file name */
  fileName?: string;
  /** original file name */
  originalName?: string;
  creator?: User;
  /** page ID attached at */
  page?: string;
  /** date created at */
  createdAt?: string;
  /** temporary URL expired at */
  temporaryUrlExpiredAt?: string;
  /** file size */
  fileSize?: number;
  /** file path proxied */
  filePathProxied?: string;
  /** download path proxied */
  downloadPathProxied?: string;
  /** temporary URL cached */
  temporaryUrlCached?: string;
}

export type BookmarkFolderBookmarksItemPageAllOf = {
  /** Page ID */
  id?: string;
  /** Parent page ID */
  parent?: string;
  /** Number of descendants */
  descendantCount?: number;
  /** Whether the page is empty */
  isEmpty?: boolean;
  /** List of granted groups */
  grantedGroups?: string[];
  /** Creator user ID */
  creator?: string;
  /** Length of the latest revision body */
  latestRevisionBodyLength?: number;
};

/**
 * Pages that are bookmarked in the folder
 */
export type BookmarkFolderBookmarksItemPage = Page & BookmarkFolderBookmarksItemPageAllOf;

export type BookmarkFolderBookmarksItem = {
  /** Bookmark ID */
  _id?: string;
  /** User ID of the bookmarker */
  user?: string;
  /** Date and time when the bookmark was created */
  createdAt?: string;
  /** Version of the bookmark */
  __v?: number;
  /** Pages that are bookmarked in the folder */
  page?: BookmarkFolderBookmarksItemPage;
};

/**
 * Bookmark Folder
 */
export interface BookmarkFolder {
  /** Bookmark Folder ID */
  _id?: string;
  /** Version of the bookmark folder */
  __v?: number;
  /** Name of the bookmark folder */
  name?: string;
  /** Owner user ID of the bookmark folder */
  owner?: string;
  bookmarks?: BookmarkFolderBookmarksItem[];
  childFolder?: BookmarkFolder[];
}

/**
 * Bookmark
 */
export interface Bookmark {
  /** page ID */
  _id?: string;
  /** DB record version */
  __v?: number;
  /** date created at */
  createdAt?: string;
  page?: Page;
  user?: ObjectId;
}

/**
 * User Root Bookmarks
 */
export interface Bookmarks {
  userRootBookmarks?: Bookmark[];
}

/**
 * BookmarkParams
 */
export interface BookmarkParams {
  /** page ID */
  pageId?: string;
  /** boolean for bookmark status */
  bool?: boolean;
}

/**
 * BookmarkInfo
 */
export interface BookmarkInfo {
  /** how many people bookmarked the page */
  sumOfBookmarks?: number;
  /** Whether the request user bookmarked (will be returned if the user is included in the request) */
  isBookmarked?: boolean;
  /** page ID */
  pageId?: string;
  bookmarkedUsers?: User[];
}

/**
 * CustomizeLayout
 */
export interface CustomizeLayout {
  isContainerFluid?: boolean;
}

/**
 * CustomizeTheme
 */
export interface CustomizeTheme {
  theme?: string;
}

/**
 * CustomizeFunction
 */
export interface CustomizeFunction {
  isEnabledTimeline?: boolean;
  isEnabledAttachTitleHeader?: boolean;
  pageLimitationS?: number;
  pageLimitationM?: number;
  isEnabledStaleNotification?: boolean;
  isAllReplyShown?: boolean;
  isSearchScopeChildrenAsDefault?: boolean;
}

/**
 * CustomizeHighlight
 */
export interface CustomizeHighlight {
  highlightJsStyle?: string;
  highlightJsStyleBorder?: boolean;
}

/**
 * CustomizeHighlight Response
 */
export interface CustomizeHighlightResponse {
  styleName?: string;
  styleBorder?: boolean;
}

/**
 * CustomizeTitle
 */
export interface CustomizeTitle {
  customizeTitle?: string;
}

/**
 * CustomizeNoscript
 */
export interface CustomizeNoscript {
  customizeNoscript?: string;
}

/**
 * CustomizeCss
 */
export interface CustomizeCss {
  customizeCss?: string;
}

/**
 * CustomizeScript
 */
export interface CustomizeScript {
  customizeScript?: string;
}

/**
 * Customize Setting
 */
export interface CustomizeSetting {
  isEnabledTimeline?: boolean;
  isEnabledAttachTitleHeader?: boolean;
  pageLimitationS?: number;
  pageLimitationM?: number;
  pageLimitationL?: number;
  pageLimitationXL?: number;
  isEnabledStaleNotification?: boolean;
  isAllReplyShown?: boolean;
  isSearchScopeChildrenAsDefault?: boolean;
  isEnabledMarp?: boolean;
  styleName?: string;
  styleBorder?: string;
  customizeTitle?: string;
  customizeScript?: string;
  customizeCss?: string;
  customizeNoscript?: string;
}

export interface ThemesMetadata {
  /** The name of the plugin theme. */
  name?: string;
  /** Path to the theme manifest file. */
  manifestKey?: string;
  /** The color scheme type (e.g., light or dark). */
  schemeType?: string;
  /** Light mode background color (hex). */
  lightBg?: string;
  /** Dark mode background color (hex). */
  darkBg?: string;
  /** Light mode sidebar color (hex). */
  lightSidebar?: string;
  /** Dark mode sidebar color (hex). */
  darkSidebar?: string;
  /** Light mode icon color (hex). */
  lightIcon?: string;
  /** Dark mode icon color (hex). */
  darkIcon?: string;
  /** Color of the create button (hex). */
  createBtn?: string;
}

/**
 * Customize Sidebar
 */
export interface CustomizeSidebar {
  /** The flag whether sidebar is collapsed mode or not. */
  isSidebarCollapsedMode?: boolean;
  /** The flag whether sidebar is closed at dock mode or not. */
  isSidebarClosedAtDockMode?: boolean;
}

/**
 * Customize Presentation
 */
export interface CustomizePresentation {
  /** The flag whether Marp is enabled or not. */
  isEnabledMarp?: boolean;
}

/**
 * Customize Logo
 */
export interface CustomizeLogo {
  /** The flag whether the logo is default or not. */
  isDefaultLogo?: boolean;
}

export interface ExportStatus {
  zipFileStats?: ExportZipFileStat[];
  isExporting?: boolean;
  /** @nullable */
  progressList?: string[] | null;
}

export interface ExportZipFileStat {
  meta?: ExportMeta;
  fileName?: string;
  zipFilePath?: string;
  fileStat?: ExportFileStat;
  innerFileStats?: ExportInnerFileStat[];
}

export type ExportMetaEnvVars = { [key: string]: string };

export interface ExportMeta {
  version?: string;
  url?: string;
  passwordSeed?: string;
  exportedAt?: string;
  envVars?: ExportMetaEnvVars;
}

export interface ExportFileStat {
  dev?: number;
  mode?: number;
  nlink?: number;
  uid?: number;
  gid?: number;
  rdev?: number;
  blksize?: number;
  ino?: number;
  size?: number;
  blocks?: number;
  atime?: string;
  mtime?: string;
  ctime?: string;
  birthtime?: string;
}

/**
 * progress data for each exporting collections
 */
export type ExportInnerFileStatMetaProgressListItem = { [key: string]: unknown };

export type ExportInnerFileStatMeta = {
  progressList?: ExportInnerFileStatMetaProgressListItem[];
  /** whether the current exporting job exists or not */
  isExporting?: boolean;
};

export interface ExportInnerFileStat {
  fileName?: string;
  collectionName?: string;
  meta?: ExportInnerFileStatMeta;
}

export interface PasswordResetRequest {
  email?: string;
}

export interface PasswordResetResponse {
  message?: string;
  error?: string;
}

export type GrowiInfoAttachmentInfo = {
  type?: string;
  writable?: boolean;
  bucket?: string;
  customEndpoint?: string;
  uploadNamespace?: string;
  accountName?: string;
  containerName?: string;
};

export interface GrowiInfo {
  /** The version of the GROWI */
  version?: string;
  /** The upper limit of the number of users */
  userUpperLimit?: number;
  fileUploadDisabled?: boolean;
  /** The total limit of the file upload size */
  fileUploadTotalLimit?: number;
  attachmentInfo?: GrowiInfoAttachmentInfo;
}

export type HealthcheckInfoSearchInfoStatus = (typeof HealthcheckInfoSearchInfoStatus)[keyof typeof HealthcheckInfoSearchInfoStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HealthcheckInfoSearchInfoStatus = {
  green: 'green',
  yellow: 'yellow',
  red: 'red',
} as const;

export type HealthcheckInfoSearchInfo = {
  cluster_name?: string;
  status?: HealthcheckInfoSearchInfoStatus;
  timed_out?: boolean;
  number_of_nodes?: number;
  number_of_data_nodes?: number;
  active_primary_shards?: number;
  active_shards?: number;
  relocating_shards?: number;
  initializing_shards?: number;
  unassigned_shards?: number;
  delayed_unassigned_shards?: number;
  number_of_pending_tasks?: number;
  number_of_in_flight_fetch?: number;
  task_max_waiting_in_queue_millis?: number;
  active_shards_percent_as_number?: number;
};

/**
 * Information of middlewares
 */
export interface HealthcheckInfo {
  /** OK */
  mongo?: string;
  searchInfo?: HealthcheckInfoSearchInfo;
}

/**
 * Import mode
 */
export type GrowiArchiveImportOptionMode = (typeof GrowiArchiveImportOptionMode)[keyof typeof GrowiArchiveImportOptionMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrowiArchiveImportOptionMode = {
  insert: 'insert',
  upsert: 'upsert',
  flushAndInsert: 'flushAndInsert',
} as const;

/**
 * GrowiArchiveImportOption
 */
export interface GrowiArchiveImportOption {
  /** Import mode */
  mode?: GrowiArchiveImportOptionMode;
}

/**
 * the property object
 */
export type ImportStatusZipFileStat = { [key: string]: unknown };

/**
 * progress data for each exporting collections
 */
export type ImportStatusProgressListItem = { [key: string]: unknown };

/**
 * ImportStatus
 */
export interface ImportStatus {
  /** whether the version of the uploaded data is the same as the current GROWI version */
  isTheSameVersion?: boolean;
  /** the property object */
  zipFileStat?: ImportStatusZipFileStat;
  progressList?: ImportStatusProgressListItem[];
  /** whether the current importing job exists or not */
  isImporting?: boolean;
}

export type FileImportResponseMetaEnvVars = {
  ELASTICSEARCH_URI?: string;
};

export type FileImportResponseMeta = {
  version?: string;
  url?: string;
  passwordSeed?: string;
  exportedAt?: string;
  envVars?: FileImportResponseMetaEnvVars;
};

export type FileImportResponseFileStat = {
  dev?: number;
  mode?: number;
  nlink?: number;
  uid?: number;
  gid?: number;
  rdev?: number;
  blksize?: number;
  ino?: number;
  size?: number;
  blocks?: number;
  atime?: string;
  mtime?: string;
  ctime?: string;
  birthtime?: string;
};

export type FileImportResponseInnerFileStatsItem = {
  fileName?: string;
  collectionName?: string;
  /** @nullable */
  size?: number | null;
};

export interface FileImportResponse {
  meta?: FileImportResponseMeta;
  fileName?: string;
  zipFilePath?: string;
  fileStat?: FileImportResponseFileStat;
  innerFileStats?: FileImportResponseInnerFileStatsItem[];
}

export interface InAppNotificationListResponse {
  docs?: InAppNotificationDocument[];
  /** Total number of in app notification documents */
  totalDocs?: number;
  /** Offset value */
  offset?: number;
  /** Limit per page */
  limit?: number;
  /** Total pages available */
  totalPages?: number;
  /** Current page number */
  page?: number;
  /** Indicator for previous page */
  hasPrevPage?: boolean;
  /** Indicator for next page */
  hasNextPage?: boolean;
  /** Previous page number or null */
  prevPage?: string;
  /** Next page number or null */
  nextPage?: string;
}

export interface InAppNotificationDocument {
  /** In app notification document ID */
  _id?: string;
  /** Action performed on the in app notification document */
  action?: string;
  /** Snapshot details in JSON format */
  snapshot?: string;
  target?: Page;
  user?: User;
  /** Creation timestamp */
  createdAt?: string;
  /** Status of the in app notification document */
  status?: string;
  /** Model of the target */
  targetModel?: string;
  /** In app notification document ID */
  id?: string;
  actionUsers?: User[];
}

/**
 * MarkdownParams
 */
export interface MarkdownParams {
  /** enable lineBreak */
  isEnabledLinebreaks?: boolean;
  /** enable lineBreak in comment */
  isEnabledLinebreaksInComments?: boolean;
  /** preferred indent size */
  adminPreferredIndentSize?: number;
  /** force indent size */
  isIndentSizeForced?: boolean;
  /** enable xss */
  isEnabledXss?: boolean;
  /** number of xss option */
  xssOption?: number;
  /** array of tag whitelist */
  tagWhitelist?: string[];
  /** attr whitelist */
  attrWhitelist?: string;
}

/**
 * LineBreakParams
 */
export interface LineBreakParams {
  /** enable lineBreak */
  isEnabledLinebreaks?: boolean;
  /** enable lineBreak in comment */
  isEnabledLinebreaksInComments?: boolean;
}

/**
 * PresentationParams
 */
export interface PresentationParams {
  /** number of pageBreakSeparator */
  pageBreakSeparator?: number;
  /** string of pageBreakCustomSeparator */
  pageBreakCustomSeparator?: string;
}

/**
 * XssParams
 */
export interface XssParams {
  /** enable xss */
  isEnabledXss?: boolean;
  /** number of xss option */
  xssOption?: number;
  /** array of tag whitelist */
  tagWhitelist?: string[];
  /** attr whitelist */
  attrWhitelist?: string;
}

/**
 * IndentParams
 */
export interface IndentParams {
  /** preferred indent size */
  adminPreferredIndentSize?: number;
  /** force indent size */
  isIndentSizeForced?: boolean;
}

export interface NotificationParams {
  /** status of slack integration */
  isSlackbotConfigured?: boolean;
  /** status of slack legacy integration */
  isSlackLegacyConfigured?: boolean;
  /** current bot type */
  currentBotType?: string;
  userNotifications?: UserNotification[];
  /** Whether to notify on owner page */
  isNotificationForOwnerPageEnabled?: boolean;
  /** Whether to notify on group page */
  isNotificationForGroupPageEnabled?: boolean;
  /** global notifications */
  globalNotifications?: GlobalNotificationParams[];
}

export interface UserNotification {
  /** slack channel name without '#' */
  channel?: string;
  /** path name of wiki */
  pathPattern?: string;
  /** created date */
  createdAt?: string;
  /** user who set notification */
  creator?: User;
  /** path pattern prefix */
  patternPrefix?: string;
  /** path pattern prefix2 */
  patternPrefix2?: string;
  /** provider */
  provider?: string;
  /** updated date */
  updatedAt?: string;
  /** version */
  __v?: number;
  /** id */
  _id?: string;
}

export interface UserNotificationParams {
  /** path name of wiki */
  pathPattern?: string;
  /** slack channel name without '#' */
  channel?: string;
}

export interface NotifyForPageGrant {
  /** Whether to notify on owner page */
  isNotificationForOwnerPageEnabled?: boolean;
  /** Whether to notify on group page */
  isNotificationForGroupPageEnabled?: boolean;
}

export interface GlobalNotification {
  /** id */
  _id?: string;
  /** is notification enabled */
  isEnabled?: boolean;
  /** trigger events for notify */
  triggerEvents?: string[];
  /** type of notification */
  __t?: string;
  /** channels for notify */
  slackChannels?: string;
  /** trigger path for notify */
  triggerPath?: string;
  /** version */
  __v?: number;
}

export interface GlobalNotificationParams {
  /** What is type for notify */
  notifyType?: string;
  /** email for notify */
  toEmail?: string;
  /** channels for notify */
  slackChannels?: string;
  /** trigger path for notify */
  triggerPath?: string;
  /** trigger events for notify */
  triggerEvents?: string[];
}

/**
 * LikeParams
 */
export interface LikeParams {
  /** page ID */
  pageId?: string;
  /** boolean for like status */
  bool?: boolean;
}

/**
 * PageInfo
 */
export interface PageInfo {
  /** Whether the page is liked by the logged in user */
  isLiked?: boolean;
  /** Number of users who have liked the page */
  sumOfLikers: number;
  /** Ids of users who have liked the page */
  likerIds: string[];
  /** Number of users who have seen the page */
  sumOfSeenUsers: number;
  /** Ids of users who have seen the page */
  seenUserIds: string[];
}

/**
 * PageParams
 */
export interface PageParams {
  /** page ID */
  pageId: string;
}

/**
 * personal settings
 */
export interface PersonalSettings {
  name?: string;
  email?: string;
  lang?: string;
  isEmailPublished?: boolean;
  slackMemberId?: string;
}

/**
 * passwords for update
 */
export interface Passwords {
  oldPassword?: string;
  newPassword?: string;
  newPasswordConfirm?: string;
}

/**
 * Ldap account for associate
 */
export interface AssociateUser {
  username?: string;
  password?: string;
}

/**
 * Ldap account for disassociate
 */
export interface DisassociateUser {
  providerType?: string;
  accountId?: string;
}

/**
 * Revision
 */
export interface Revision {
  /** The revision ID */
  _id?: ObjectId;
  /** format */
  format?: string;
  /** The ID of the page the revision belongs to */
  pageId?: string;
  /** The content of the revision */
  body?: RevisionBody;
  author?: ObjectId;
  /** The origin of the revision */
  origin?: string;
  /** Whether the revision has differences to the previous one */
  hasDiffToPrev?: boolean;
  /** date created at */
  createdAt?: string;
  /** DB record version */
  __v?: number;
  /** path */
  path?: string;
}

export type IndicesGrowi = {
  uuid?: string;
  health?: string;
  status?: string;
  primaries?: SearchIndex;
  total?: SearchIndex;
};

export type IndicesAliasesGrowiAliasesGrowiAlias = { [key: string]: unknown };

export type IndicesAliasesGrowiAliases = {
  'growi-alias'?: IndicesAliasesGrowiAliasesGrowiAlias;
};

export type IndicesAliasesGrowi = {
  aliases?: IndicesAliasesGrowiAliases;
};

export type IndicesAliases = {
  growi?: IndicesAliasesGrowi;
};

export interface Indices {
  growi?: IndicesGrowi;
  aliases?: IndicesAliases;
  isNormalized?: boolean;
}

export type SearchIndexDocs = {
  count?: number;
  deleted?: number;
};

export type SearchIndexStore = {
  size_in_bytes?: number;
  total_data_set_size_in_bytes?: number;
  reserved_in_bytes?: number;
};

export type SearchIndexIndexing = {
  index_total?: number;
  index_time_in_millis?: number;
  index_current?: number;
  index_failed?: number;
  delete_total?: number;
  delete_time_in_millis?: number;
  delete_current?: number;
  noop_update_total?: number;
  is_throttled?: boolean;
  throttle_time_in_millis?: number;
  write_load?: number;
};

export interface SearchIndex {
  docs?: SearchIndexDocs;
  store?: SearchIndexStore;
  indexing?: SearchIndexIndexing;
}

export interface GeneralSetting {
  /** type of restrictGuestMode */
  restrictGuestMode?: string;
  /** type of pageDeletionAuthority */
  pageDeletionAuthority?: string;
  /** type of pageRecursiveDeletionAuthority */
  pageRecursiveDeletionAuthority?: string;
  /** type of pageRecursiveCompleteDeletionAuthority */
  pageRecursiveCompleteDeletionAuthority?: string;
  /** enable all group membership required for page complete deletion */
  isAllGroupMembershipRequiredForPageCompleteDeletion?: boolean;
  /** type of pageDeletionAuthority */
  pageCompleteDeletionAuthority?: string;
  /** enable hide by owner */
  hideRestrictedByOwner?: boolean;
  /** enable hide by group */
  hideRestrictedByGroup?: boolean;
  /** enable user homepage deletion */
  isUsersHomepageDeletionEnabled?: boolean;
  /** enable force delete user homepage on user deletion */
  isForceDeleteUserHomepageOnUserDeletion?: boolean;
  /** enable rom user allowed to comment */
  isRomUserAllowedToComment?: boolean;
  /** type of wikiMode */
  wikiMode?: string;
  /** max age of session */
  sessionMaxAge?: number;
}

export interface ShareLinkSetting {
  /** disable link sharing */
  disableLinkSharing?: boolean;
}

export interface LocalSetting {
  /** use only env vars for some options */
  useOnlyEnvVarsForSomeOptions?: boolean;
  /** enable password reset */
  isPasswordResetEnabled?: boolean;
  /** enable email authentication */
  isEmailAuthenticationEnabled?: boolean;
  /** local setting mode */
  isLocalEnabled?: boolean;
  /** type of registrationMode */
  registrationMode?: string;
  /** array of regsitrationList */
  registrationWhitelist?: string[];
}

export interface GeneralAuthSetting {
  /** local setting mode */
  isLocalEnabled?: boolean;
  /** ldap setting mode */
  isLdapEnabled?: boolean;
  /** saml setting mode */
  isSamlEnabled?: boolean;
  /** oidc setting mode */
  isOidcEnabled?: boolean;
  /** google setting mode */
  isGoogleEnabled?: boolean;
  /** github setting mode */
  isGitHubEnabled?: boolean;
}

export interface LdapAuthSetting {
  /** server url for ldap */
  serverUrl?: string;
  /** enable user bind */
  isUserBind?: boolean;
  /** the query used to bind with the directory service */
  ldapBindDN?: string;
  /** the password that is entered in the login page will be used to bind */
  ldapBindDNPassword?: string;
  /** the query used to locate the authenticated user */
  ldapSearchFilter?: string;
  /** specification of mappings for username when creating new users */
  ldapAttrMapUsername?: string;
  /** local account automatically linked the user name matched */
  isSameUsernameTreatedAsIdenticalUser?: boolean;
  /** specification of mappings for mail address when creating new users */
  ldapAttrMapMail?: string;
  /** Specification of mappings for full name address when creating new users */
  ldapAttrMapName?: string;
  /** the base DN from which to search for groups. */
  ldapGroupSearchBase?: string;
  /** the query used to filter for groups */
  ldapGroupSearchFilter?: string;
  /** The property of user object to use in dn interpolation of Group Search Filter */
  ldapGroupDnProperty?: string;
}

export interface SamlAuthSetting {
  /** array of missing mandatory config keys */
  missingMandatoryConfigKeys?: string[];
  /** use only env vars for some options */
  useOnlyEnvVarsForSomeOptions?: boolean;
  /** entry point for saml */
  samlEntryPoint?: string;
  /** issuer for saml */
  samlIssuer?: string;
  /** issuer for saml */
  samlEnvVarIssuer?: string;
  /** certificate for saml */
  samlCert?: string;
  /** certificate for saml */
  samlEnvVarCert?: string;
  /** attribute mapping id for saml */
  samlAttrMapId?: string;
  /** attribute mapping user name for saml */
  samlAttrMapUserName?: string;
  /** attribute mapping mail for saml */
  samlAttrMapMail?: string;
  /** attribute mapping id for saml */
  samlEnvVarAttrMapId?: string;
  /** attribute mapping user name for saml */
  samlEnvVarAttrMapUserName?: string;
  /** attribute mapping mail for saml */
  samlEnvVarAttrMapMail?: string;
  /** attribute mapping first name for saml */
  samlAttrMapFirstName?: string;
  /** attribute mapping last name for saml */
  samlAttrMapLastName?: string;
  /** attribute mapping first name for saml */
  samlEnvVarAttrMapFirstName?: string;
  /** attribute mapping last name for saml */
  samlEnvVarAttrMapLastName?: string;
  /** local account automatically linked the user name matched */
  isSameUsernameTreatedAsIdenticalUser?: boolean;
  /** local account automatically linked the email matched */
  isSameEmailTreatedAsIdenticalUser?: boolean;
  /** ABLCRule for saml */
  samlABLCRule?: string;
  /** ABLCRule for saml */
  samlEnvVarABLCRule?: string;
}

export interface OidcAuthSetting {
  /** provider name for oidc */
  oidcProviderName?: string;
  /** issuer host for oidc */
  oidcIssuerHost?: string;
  /** authorization endpoint for oidc */
  oidcAuthorizationEndpoint?: string;
  /** token endpoint for oidc */
  oidcTokenEndpoint?: string;
  /** revocation endpoint for oidc */
  oidcRevocationEndpoint?: string;
  /** introspection endpoint for oidc */
  oidcIntrospectionEndpoint?: string;
  /** userinfo endpoint for oidc */
  oidcUserInfoEndpoint?: string;
  /** end session endpoint for oidc */
  oidcEndSessionEndpoint?: string;
  /** registration endpoint for oidc */
  oidcRegistrationEndpoint?: string;
  /** JSON Web Key Set URI for oidc */
  oidcJWKSUri?: string;
  /** client id for oidc */
  oidcClientId?: string;
  /** client secret for oidc */
  oidcClientSecret?: string;
  /** attr map id for oidc */
  oidcAttrMapId?: string;
  /** attr map username for oidc */
  oidcAttrMapUserName?: string;
  /** attr map name for oidc */
  oidcAttrMapName?: string;
  /** attr map mail for oidc */
  oidcAttrMapMail?: string;
  /** local account automatically linked the user name matched */
  isSameUsernameTreatedAsIdenticalUser?: boolean;
  /** local account automatically linked the email matched */
  isSameEmailTreatedAsIdenticalUser?: boolean;
}

export interface GitHubOAuthSetting {
  /** key of comsumer */
  githubClientId?: string;
  /** password of comsumer */
  githubClientSecret?: string;
  /** local account automatically linked the email matched */
  isSameUsernameTreatedAsIdenticalUser?: boolean;
}

export interface GoogleOAuthSetting {
  /** key of comsumer */
  googleClientId?: string;
  /** password of comsumer */
  googleClientSecret?: string;
  /** local account automatically linked the email matched */
  isSameUsernameTreatedAsIdenticalUser?: boolean;
}

export type ShareLinkRelatedPage = {
  /** The unique identifier of the related page */
  _id?: string;
  /** The path of the related page */
  path?: string;
};

export interface ShareLink {
  /** The unique identifier of the share link */
  _id?: string;
  relatedPage?: ShareLinkRelatedPage;
  /** The expiration date of the share link */
  expiredAt?: string;
  /** The description of the share link */
  description?: string;
  /** The creation date of the share link */
  createdAt?: string;
  /** The version key */
  __v?: number;
}

export interface ShareLinkSimple {
  /** The unique identifier of the related page */
  relatedPage?: string;
  /** The expiration date of the share link */
  expiredAt?: string;
  /** The description of the share link */
  description?: string;
  /** The creation date of the share link */
  createdAt?: string;
  /** The version key */
  __v?: number;
  /** The unique identifier of the share link */
  _id?: string;
}

export interface SlackConfigurationParams {
  /** incoming webhooks url */
  webhookUrl?: string;
  /** use incoming webhooks even if Slack App settings are enabled */
  isIncomingWebhookPrioritized?: boolean;
  /** OAuth access token */
  slackToken?: string;
}

/**
 * BotType
 */
export interface BotType {
  currentBotType?: string;
}

/**
 * SlackIntegration
 */
export interface SlackIntegration {
  currentBotType?: string;
}

export type StatisticsUserResponseDataActive = {
  total?: number;
  admin?: number;
};

export type StatisticsUserResponseDataInactive = {
  total?: number;
  registered?: number;
  suspended?: number;
  deleted?: number;
  invited?: number;
};

export type StatisticsUserResponseData = {
  total?: number;
  active?: StatisticsUserResponseDataActive;
  inactive?: StatisticsUserResponseDataInactive;
};

export interface StatisticsUserResponse {
  data?: StatisticsUserResponseData;
}

/**
 * User
 */
export interface User {
  /** user ID */
  _id?: string;
  /** language */
  lang?: string;
  /** status */
  status?: number;
  /** whether the admin */
  admin?: boolean;
  /** E-Mail address */
  email?: string;
  /** username */
  username?: string;
  /** full name */
  name?: string;
  /** date created at */
  createdAt?: string;
  /** cached image URL */
  imageUrlCached?: string;
  /** whether the email is published */
  isEmailPublished?: boolean;
  /** whether the gravatar is enabled */
  isGravatarEnabled?: boolean;
  /** whether the invitation email is sent */
  isInvitationEmailSended?: boolean;
  /** whether the questionnaire is enabled */
  isQuestionnaireEnabled?: boolean;
  /** datetime last login at */
  lastLoginAt?: string;
  /** whether the user is read only */
  readOnly?: boolean;
  /** datetime updated at */
  updatedAt?: string;
  /** DB record version */
  __v?: number;
}

export type ErrorV3Stack = { [key: string]: unknown };

export type ErrorV3Args = { [key: string]: unknown };

/**
 * Error for APIv3
 */
export interface ErrorV3 {
  message?: string;
  code?: string;
  stack?: ErrorV3Stack;
  args?: ErrorV3Args;
}

/**
 * Object ID
 */
export type ObjectId = string;

/**
 * Page path
 */
export type PagePath = string;

/**
 * Grant for page
 */
export type PageGrant = number;

/**
 * extend data
 */
export type PageExtended = { [key: string]: unknown };

/**
 * status
 */
export type PageStatus = (typeof PageStatus)[keyof typeof PageStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PageStatus = {
  wip: 'wip',
  published: 'published',
  deleted: 'deleted',
  deprecated: 'deprecated',
} as const;

/**
 * Page
 */
export interface Page {
  _id?: ObjectId;
  /** DB record version */
  __v?: number;
  /** count of comments */
  commentCount?: number;
  /** date created at */
  createdAt?: string;
  creator?: User;
  /** extend data */
  extended?: PageExtended;
  grant?: PageGrant;
  /** granted users */
  grantedUsers?: string[];
  lastUpdateUser?: User;
  /** granted users */
  liker?: string[];
  path?: PagePath;
  /** page revision */
  revision?: string;
  /** granted users */
  seenUsers?: string[];
  /** status */
  status?: PageStatus;
  /** date updated at */
  updatedAt?: string;
}

/**
 * Offset for pagination
 */
export type Offset = number;

/**
 * Limit for pagination
 */
export type Limit = number;

export type PaginateResultDocsItem = { [key: string]: unknown };

/**
 * PaginateResult
 */
export interface PaginateResult {
  /** Array of documents */
  docs?: PaginateResultDocsItem[];
  /** Total number of documents in collection that match a query */
  totalDocs?: number;
  limit?: Limit;
  /** Availability of prev page. */
  hasPrevPage?: number;
  /** Availability of next page. */
  hasNextPage?: number;
  /** Current page number */
  page?: number;
  /** Total number of pages. */
  totalPages?: number;
  /** Only if specified or default page/offset values were used */
  offset?: Offset;
  /** Previous page number if available or NULL */
  prefPage?: number;
  /** Next page number if available or NULL */
  nextPage?: number;
  /** The starting sl. number of first document. */
  pagingCounter?: number;
  /** Object of pagination meta data (Default false). */
  meta?: number;
}

export type V1PaginateResultMeta = {
  /** Total number of documents in collection that match a query */
  total?: number;
  limit?: Limit;
  /** Only if specified or default page/offset values were used */
  offset?: Offset;
};

/**
 * Object of pagination meta data.
 */
export type V1PaginateResultData = { [key: string]: unknown };

/**
 * Paginate result v1
 */
export interface V1PaginateResult {
  meta?: V1PaginateResultMeta;
  /** Object of pagination meta data. */
  data?: V1PaginateResultData;
}

/**
 * Revision content body
 */
export type RevisionBody = string;

/**
 * Tags
 */
export type Tags = TagName[];

/**
 * Tag name
 */
export type TagName = string;

/**
 * Tag
 */
export interface Tag {
  /** tag ID */
  _id?: string;
  name?: TagName;
  /** Count of tagged pages */
  count?: number;
}

/**
 * API is succeeded
 */
export type V1ResponseOK = boolean;

/**
 * Response v1
 */
export interface V1Response {
  ok?: V1ResponseOK;
}

/**
 * Forbidden
 */
export type N403Response = void;

/**
 * Internal Server Error
 */
export type N500Response = void;

export type GetExternalUserGroupRelationsParams = {
  /**
   * The group IDs to get relations for
   */
  groupIds?: string[];
  /**
   * The child group IDs to get relations for
   */
  childGroupIds?: string[];
};

export type GetExternalUserGroupRelations200UserGroupRelationsItem = { [key: string]: unknown };

export type GetExternalUserGroupRelations200RelationsOfChildGroupsItem = { [key: string]: unknown };

export type GetExternalUserGroupRelations200 = {
  userGroupRelations?: GetExternalUserGroupRelations200UserGroupRelationsItem[];
  relationsOfChildGroups?: GetExternalUserGroupRelations200RelationsOfChildGroupsItem[];
};

export type GetExternalUserGroupsParams = {
  /**
   * Page number for pagination
   */
  page?: number;
  /**
   * Number of items per page
   */
  limit?: number;
  /**
   * Offset for pagination
   */
  offset?: number;
  /**
   * Whether to enable pagination
   */
  pagination?: boolean;
};

export type GetExternalUserGroups200UserGroupsItem = { [key: string]: unknown };

export type GetExternalUserGroups200 = {
  userGroups?: GetExternalUserGroups200UserGroupsItem[];
  totalUserGroups?: number;
  pagingLimit?: number;
};

export type GetExternalUserGroupsAncestorsParams = {
  /**
   * The ID of the user group to get ancestors for
   */
  groupId: string;
};

export type GetExternalUserGroupsAncestors200AncestorUserGroupsItem = { [key: string]: unknown };

export type GetExternalUserGroupsAncestors200 = {
  ancestorUserGroups?: GetExternalUserGroupsAncestors200AncestorUserGroupsItem[];
};

export type GetExternalUserGroupsChildrenParams = {
  /**
   * The IDs of the parent user groups
   */
  parentIds?: string[];
  /**
   * Whether to include grandchild user groups
   */
  includeGrandChildren?: boolean;
};

export type GetExternalUserGroupsChildren200ChildUserGroupsItem = { [key: string]: unknown };

export type GetExternalUserGroupsChildren200GrandChildUserGroupsItem = { [key: string]: unknown };

export type GetExternalUserGroupsChildren200 = {
  childUserGroups?: GetExternalUserGroupsChildren200ChildUserGroupsItem[];
  grandChildUserGroups?: GetExternalUserGroupsChildren200GrandChildUserGroupsItem[];
};

export type GetExternalUserGroupsId200UserGroup = { [key: string]: unknown };

export type GetExternalUserGroupsId200 = {
  userGroup?: GetExternalUserGroupsId200UserGroup;
};

export type DeleteExternalUserGroupsIdParams = {
  /**
   * The action to perform on group delete
   */
  actionName: string;
  /**
   * The ID of the user group to transfer to
   */
  transferToUserGroupId?: string;
  /**
   * The type of the user group to transfer to
   */
  transferToUserGroupType?: string;
};

export type DeleteExternalUserGroupsId200UserGroupsItem = { [key: string]: unknown };

export type DeleteExternalUserGroupsId200 = {
  userGroups?: DeleteExternalUserGroupsId200UserGroupsItem[];
};

export type PutExternalUserGroupsIdBody = {
  description?: string;
};

export type PutExternalUserGroupsId200UserGroup = { [key: string]: unknown };

export type PutExternalUserGroupsId200 = {
  userGroup?: PutExternalUserGroupsId200UserGroup;
};

export type GetExternalUserGroupsIdExternalUserGroupRelations200UserGroupRelationsItem = { [key: string]: unknown };

export type GetExternalUserGroupsIdExternalUserGroupRelations200 = {
  userGroupRelations?: GetExternalUserGroupsIdExternalUserGroupRelations200UserGroupRelationsItem[];
};

export type GetExternalUserGroupsLdapSyncSettings200 = {
  ldapGroupSearchBase?: string;
  ldapGroupMembershipAttribute?: string;
  ldapGroupMembershipAttributeType?: string;
  ldapGroupChildGroupAttribute?: string;
  autoGenerateUserOnLdapGroupSync?: boolean;
  preserveDeletedLdapGroups?: boolean;
  ldapGroupNameAttribute?: string;
  ldapGroupDescriptionAttribute?: string;
};

export type PutExternalUserGroupsLdapSyncSettingsBody = {
  ldapGroupSearchBase?: string;
  ldapGroupMembershipAttribute?: string;
  ldapGroupMembershipAttributeType?: string;
  ldapGroupChildGroupAttribute?: string;
  autoGenerateUserOnLdapGroupSync?: boolean;
  preserveDeletedLdapGroups?: boolean;
  ldapGroupNameAttribute?: string;
  ldapGroupDescriptionAttribute?: string;
};

export type PutExternalUserGroupsLdapSyncSettings204 = { [key: string]: unknown };

export type GetExternalUserGroupsKeycloakSyncSettings200 = {
  keycloakHost?: string;
  keycloakGroupRealm?: string;
  keycloakGroupSyncClientRealm?: string;
  keycloakGroupSyncClientID?: string;
  keycloakGroupSyncClientSecret?: string;
  autoGenerateUserOnKeycloakGroupSync?: boolean;
  preserveDeletedKeycloakGroups?: boolean;
  keycloakGroupDescriptionAttribute?: string;
};

export type PutExternalUserGroupsKeycloakSyncSettingsBody = {
  keycloakHost?: string;
  keycloakGroupRealm?: string;
  keycloakGroupSyncClientRealm?: string;
  keycloakGroupSyncClientID?: string;
  keycloakGroupSyncClientSecret?: string;
  autoGenerateUserOnKeycloakGroupSync?: boolean;
  preserveDeletedKeycloakGroups?: boolean;
  keycloakGroupDescriptionAttribute?: string;
};

export type PutExternalUserGroupsKeycloakSyncSettings204 = { [key: string]: unknown };

export type PutExternalUserGroupsLdapSync202 = { [key: string]: unknown };

export type PutExternalUserGroupsKeycloakSync202 = { [key: string]: unknown };

export type GetQuestionnaireOrders200QuestionnaireOrdersItem = { [key: string]: unknown };

export type GetQuestionnaireOrders200 = {
  questionnaireOrders?: GetQuestionnaireOrders200QuestionnaireOrdersItem[];
};

export type GetQuestionnaireIsEnabled200 = {
  isEnabled?: boolean;
};

export type PostQuestionnaireProactiveAnswerBody = { [key: string]: unknown };

export type PostQuestionnaireProactiveAnswer200 = { [key: string]: unknown };

export type PutQuestionnaireAnswerBody = { [key: string]: unknown };

export type PutQuestionnaireAnswer201 = { [key: string]: unknown };

export type PutQuestionnaireAnswer204 = { [key: string]: unknown };

export type PutQuestionnaireSkipBody = { [key: string]: unknown };

export type PutQuestionnaireSkip201 = { [key: string]: unknown };

export type PutQuestionnaireSkip204 = { [key: string]: unknown };

export type PutQuestionnaireDenyBody = { [key: string]: unknown };

export type PutQuestionnaireDeny201 = { [key: string]: unknown };

export type PutQuestionnaireDeny204 = { [key: string]: unknown };

export type GetTemplatesParams = {
  /**
   * Whether to include invalid templates
   */
  includeInvalidTemplates?: boolean;
};

export type GetTemplates200Summaries = {
  [key: string]: {
    id?: string;
    isDefault?: boolean;
    isValid?: boolean;
    locale?: string;
    title?: string;
  };
};

export type GetTemplates200 = {
  summaries?: GetTemplates200Summaries;
};

export type GetTemplatesPresetTemplatesTemplateIdLocale200 = {
  markdown?: string;
};

export type GetTemplatesPluginTemplatesOrganizationIdReposIdTemplateIdLocale200 = {
  markdown?: string;
};

export type PostPluginsBodyPluginInstallerForm = {
  url?: string;
  ghBranch?: string;
  ghTag?: string;
};

export type PostPluginsBody = {
  pluginInstallerForm?: PostPluginsBodyPluginInstallerForm;
};

export type PostPlugins200 = {
  /** The name of the installed plugin */
  pluginName?: string;
};

export type PutPluginsIdActivate200 = {
  /** The name of the activated plugin */
  pluginName?: string;
};

export type DeletePluginsIdRemove200 = {
  /** The name of the removed plugin */
  pluginName?: string;
};

export type GetActivityParams = {
  limit?: number;
  offset?: number;
  searchFilter?: string;
};

export type GetAdminHome200 = {
  adminHomeParams?: SystemInformationParams;
};

export type GetAppSettings200 = {
  appSettingsParams?: AppSettingParams;
};

export type PutAppSettingsAppSetting200 = {
  appSettingParams?: AppSettingPutParams;
};

export type PutAppSettingsSiteUrlSetting200SiteUrlSettingParams = {
  /** Site URL. e.g. https://example.com, https://example.com:3000 */
  siteUrl?: string;
};

export type PutAppSettingsSiteUrlSetting200 = {
  siteUrlSettingParams?: PutAppSettingsSiteUrlSetting200SiteUrlSettingParams;
};

export type PutAppSettingsSmtpSetting200 = {
  mailSettingParams?: SmtpSettingResponseParams;
};

/**
 * Empty object
 */
export type PostAppSettingsSmtpTest200 = { [key: string]: unknown };

export type PutAppSettingsFileUploadSettings200 = {
  responseParams?: FileUploadSettingParams;
};

export type PutAppSettingsQuestionnaireSettings200 = {
  responseParams?: QuestionnaireSettingParams;
};

export type PostAppSettingsV5SchemaMigration200 = {
  /** is V5 compatible, or not */
  isV5Compatible?: boolean;
};

export type PostAppSettingsMaintenanceModeBody = {
  /** flag for maintenance mode */
  flag?: boolean;
};

export type PostAppSettingsMaintenanceMode200 = {
  /** true if maintenance mode is enabled */
  flag?: boolean;
};

export type GetAttachmentListParams = {
  /**
   * page id
   */
  pageId: string;
  /**
   * page number
   */
  pageNumber?: number;
  /**
   * limit
   */
  limit?: number;
};

export type GetAttachmentLimitParams = {
  fileSize: number;
};

export type GetAttachmentLimit200 = {
  /** uploadable */
  isUploadable?: boolean;
};

export type PostAttachmentBodyOne = {
  /** */
  page_id?: string;
  /** attachment data */
  file?: Blob;
};

export type PostAttachmentBodyTwo = {
  /** */
  page_id?: string;
  /** attachment data */
  file?: Blob;
};

export type PostAttachment200 = {
  page?: Page;
  attachment?: Attachment;
  revision?: string;
};

export type GetAttachmentId200 = {
  attachment?: Attachment;
};

export type PostBookmarkFolderBody = {
  /**
   * Name of the bookmark folder
   */
  name?: string;
  /** Parent folder ID */
  parent?: string;
};

export type PostBookmarkFolder200 = {
  bookmarkFolder?: BookmarkFolder;
};

export type PutBookmarkFolderBody = {
  /** Bookmark Folder ID */
  bookmarkFolderId?: string;
  /**
   * Name of the bookmark folder
   */
  name?: string;
  /** Parent folder ID */
  parent?: string;
  /** Child folders */
  childFolder?: BookmarkFolder[];
};

export type PutBookmarkFolder200 = {
  bookmarkFolder?: BookmarkFolder;
};

export type GetBookmarkFolderListUserId200 = {
  bookmarkFolderItems?: BookmarkFolder[];
};

export type DeleteBookmarkFolderId200 = {
  /** Number of deleted folders */
  deletedCount?: number;
};

export type PostBookmarkFolderAddBookmarkToFolderBody = {
  /**
   * Page ID
   */
  pageId?: string;
  /**
   * Folder ID
   * @nullable
   */
  folderId?: string | null;
};

export type PostBookmarkFolderAddBookmarkToFolder200 = {
  bookmarkFolder?: BookmarkFolder;
};

export type PutBookmarkFolderUpdateBookmarkBody = {
  /**
   * Page ID
   */
  pageId?: string;
  /** Bookmark status */
  status?: string;
};

export type PutBookmarkFolderUpdateBookmark200 = {
  bookmarkFolder?: BookmarkFolder;
};

export type GetBookmarksInfoParams = {
  /**
   * page id
   */
  pageId?: string;
};

export type PutBookmarks200 = {
  bookmark?: Bookmark;
};

export type GetCustomizeSetting200 = {
  /** customize params */
  customizeParams?: CustomizeSetting;
};

export type PutCustomizeSettingLayout200 = {
  /** customized params */
  customizedParams?: CustomizeLayout;
};

export type GetCustomizeSettingTheme200 = {
  /** The current theme name. */
  currentTheme?: string;
  /** Metadata for available plugin themes. */
  pluginThemesMetadatas?: ThemesMetadata[];
};

export type PutCustomizeSettingTheme200 = {
  customizedParams?: CustomizeTheme;
};

export type PutCustomizeSettingSidebar200 = {
  customizedParams?: CustomizeSidebar;
};

export type PutCustomizeSettingFunction200 = {
  customizedParams?: CustomizeFunction;
};

export type PutCustomizeSettingPresentation200 = {
  customizedParams?: CustomizePresentation;
};

export type PutCustomizeSettingHighlight200 = {
  customizedParams?: CustomizeHighlightResponse;
};

export type PutCustomizeSettingCustomizeTitle200 = {
  customizedParams?: CustomizeTitle;
};

export type PutCustomizeSettingCustomizeNoscript200 = {
  customizedParams?: CustomizeNoscript;
};

export type PutCustomizeSettingCustomizeCss200 = {
  customizedParams?: CustomizeCss;
};

export type PutCustomizeSettingCustomizeScript200 = {
  customizedParams?: CustomizeScript;
};

export type PutCustomizeSettingCustomizeLogo200 = {
  customizedParams?: CustomizeLogo;
};

export type PutCustomizeSettingUploadBrandLogoBody = {
  file?: Blob;
};

export type PutCustomizeSettingUploadBrandLogo200AttachmentAllOf = {
  creator?: string;
  page?: unknown;
  temporaryUrlExpiredAt?: unknown;
  temporaryUrlCached?: unknown;
};

export type PutCustomizeSettingUploadBrandLogo200Attachment = Attachment & PutCustomizeSettingUploadBrandLogo200AttachmentAllOf;

export type PutCustomizeSettingUploadBrandLogo200 = {
  attachment?: PutCustomizeSettingUploadBrandLogo200Attachment;
};

export type GetExportStatus200 = {
  /** whether the request is succeeded or not */
  ok?: boolean;
  status?: ExportStatus;
};

export type PostExportBody = {
  collections?: string[];
};

export type PostExport200 = {
  /** whether the request is succeeded */
  ok?: boolean;
};

export type DeleteExportFileName200 = {
  /** whether the request is succeeded */
  ok?: boolean;
};

export type PostForgotPasswordBody = {
  /** Email address of the user requesting password reset */
  email?: string;
};

export type PostForgotPassword200 = { [key: string]: unknown };

export type PutForgotPasswordBody = {
  /** New password */
  newPassword?: string;
};

export type PutForgotPassword200 = {
  userData?: User;
};

export type GetG2gTransferFiles200FilesItem = {
  /** The name of the file */
  name?: string;
  /** The size of the file */
  size?: number;
};

export type GetG2gTransferFiles200 = {
  files?: GetG2gTransferFiles200FilesItem[];
};

/**
 * The map of options for each collection
 */
export type PostG2gTransferBodyOptionsMap = { [key: string]: unknown };

/**
 * The map of upload configurations
 */
export type PostG2gTransferBodyUploadConfigs = { [key: string]: unknown };

export type PostG2gTransferBody = {
  /** The zip file of the data to be transferred */
  file?: Blob;
  /** The list of MongoDB collections to be transferred */
  collections?: string[];
  /** The map of options for each collection */
  optionsMap?: PostG2gTransferBodyOptionsMap;
  /** The ID of the operator user */
  operatorUserId?: string;
  /** The map of upload configurations */
  uploadConfigs?: PostG2gTransferBodyUploadConfigs;
};

export type PostG2gTransfer200 = {
  /** The message of the result */
  message?: string;
};

/**
 * Metadata of the attachment
 */
export type PostG2gTransferAttachmentBodyAttachmentMetadata = { [key: string]: unknown };

export type PostG2gTransferAttachmentBody = {
  /** The zip file of the data to be transferred */
  file?: Blob;
  /** Metadata of the attachment */
  attachmentMetadata?: PostG2gTransferAttachmentBodyAttachmentMetadata;
};

export type PostG2gTransferAttachment200 = {
  /** The message of the result */
  message?: string;
};

export type GetG2gTransferGrowiInfo200 = {
  growiInfo?: GrowiInfo;
};

export type PostG2gTransferGenerateKeyBody = {
  /** The URL of the GROWI */
  appSiteUrl?: string;
};

export type PostG2gTransferGenerateKey200 = {
  /** The transfer key */
  transferKey?: string;
};

/**
 * The map of options for each collection
 */
export type PostG2gTransferTransferBodyOptionsMap = { [key: string]: unknown };

export type PostG2gTransferTransferBody = {
  /** The transfer key */
  transferKey?: string;
  /** The list of MongoDB collections to be transferred */
  collections?: string[];
  /** The map of options for each collection */
  optionsMap?: PostG2gTransferTransferBodyOptionsMap;
};

export type PostG2gTransferTransfer200 = {
  /** The message of the result */
  message?: string;
};

export type GetHealthcheckParams = {
  /**
   * The list of services to check health
   */
  checkServices?: GetHealthcheckCheckServicesItem[];
  /**
   * Check services and responds 503 if either of these is unhealthy
   */
  strictly?: boolean;
};

export type GetHealthcheckCheckServicesItem = (typeof GetHealthcheckCheckServicesItem)[keyof typeof GetHealthcheckCheckServicesItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetHealthcheckCheckServicesItem = {
  mongo: 'mongo',
  search: 'search',
} as const;

/**
 * Don't select checkServices
 */
export type GetHealthcheck200OneOf = {
  status?: string;
};

/**
 * Select checkServices
 */
export type GetHealthcheck200OneOfTwo = {
  info?: HealthcheckInfo;
};

export type GetHealthcheck200 = GetHealthcheck200OneOf | GetHealthcheck200OneOfTwo;

export type GetHealthcheck503ErrorsItem = {
  message?: string;
  code?: string;
};

export type GetHealthcheck503 = {
  /** Errors */
  errors?: GetHealthcheck503ErrorsItem[];
  info?: HealthcheckInfo;
};

/**
 * import settings params
 */
export type GetImport200ImportSettingsParams = {
  /** the team name of esa.io */
  esaTeamName?: string;
  /** the access token of esa.io */
  esaAccessToken?: string;
  /** the team name of qiita.com */
  qiitaTeamName?: string;
  /** the access token of qiita.com */
  qiitaAccessToken?: string;
};

export type GetImport200 = {
  /** import settings params */
  importSettingsParams?: GetImport200ImportSettingsParams;
};

/**
 * the array of importing option that have collection name as the key

 */
export type PostImportBodyOptions = { [key: string]: GrowiArchiveImportOption[] };

export type PostImportBody = {
  /** the file name of zip file */
  fileName?: string;
  /** collection names to import */
  collections?: string[];
  /** the array of importing option that have collection name as the key
   */
  options?: PostImportBodyOptions;
};

export type GetImportStatus200 = {
  status?: ImportStatus;
};

export type PostImportUploadBody = {
  file?: Blob;
};

export type GetInAppNotificationListParams = {
  /**
   * The number of notifications to get
   */
  limit?: number;
  /**
   * The number of notifications to skip
   */
  offset?: number;
  /**
   * The status to categorize. 'UNOPENED' or 'OPENED'.
   */
  status?: string;
};

export type GetInAppNotificationStatus200 = {
  /** Count of unread notifications */
  count?: number;
};

export type PostInAppNotificationOpenBody = {
  /** Notification ID */
  id: string;
};

export type PostInAppNotificationOpen200 = { [key: string]: unknown };

export type PostInstallerBodyRegisterForm = {
  name?: string;
  username?: string;
  email?: string;
  password?: string;
  'app:globalLang'?: string;
};

export type PostInstallerBody = {
  registerForm?: PostInstallerBodyRegisterForm;
};

export type PostInstaller200 = {
  message?: string;
};

export type PostInvitedBodyInvitedForm = {
  /** The username of the invited user. */
  username?: string;
  /** The name of the invited user. */
  name?: string;
  /** The password for the invited user. */
  password?: string;
};

export type PostInvitedBody = {
  invitedForm?: PostInvitedBodyInvitedForm;
};

export type PostInvited200 = {
  /** URL to redirect after successful activation. */
  redirectTo?: string;
};

export type GetMarkdownSetting200 = {
  /** markdown params */
  markdownParams?: MarkdownParams;
};

export type PutMarkdownSettingLineBreak200 = {
  lineBreaksParams?: LineBreakParams;
};

export type PutMarkdownSettingIndent200 = {
  /** indent params */
  indentParams?: IndentParams;
};

export type GetMongoCollections200 = {
  /** whether the request is succeeded */
  ok?: boolean;
  collections?: string[];
};

export type GetNotificationSetting200 = {
  /** notification params */
  notificationParams?: NotificationParams;
};

/**
 * response params
 */
export type PostNotificationSettingUserNotification200ResponseParams = {
  /** user who set notification */
  createdUser?: User;
  userNotifications?: UserNotification[];
};

export type PostNotificationSettingUserNotification200 = {
  /** response params */
  responseParams?: PostNotificationSettingUserNotification200ResponseParams;
};

export type GetNotificationSettingGlobalNotificationId200 = {
  globalNotification?: GlobalNotification;
};

export type PutNotificationSettingGlobalNotificationId200 = {
  /** notification param updated */
  createdNotification?: GlobalNotification;
};

export type PostNotificationSettingGlobalNotification200 = {
  /** notification param created */
  createdNotification?: GlobalNotification;
};

export type PutNotificationSettingGlobalNotificationIdEnabledBody = {
  /** is notification enabled */
  isEnabled?: boolean;
};

export type PutNotificationSettingGlobalNotificationIdEnabled200 = {
  /** notification id */
  id?: string;
};

export type GetPageListingRoot200 = {
  rootPage?: Page;
};

export type GetPageListingAncestorsChildrenParams = {
  path: string;
};

export type GetPageListingAncestorsChildren200AncestorsChildren = {
  [key: string]: {
    /** Document ID */
    _id?: string;
    /** Number of descendants */
    descendantCount?: number;
    /** Indicates if the node is empty */
    isEmpty?: boolean;
    /** Access level */
    grant?: number;
    /** Path string */
    path?: string;
    /**
     * Revision ID (nullable)
     * @nullable
     */
    revision?: string | null;
  };
};

export type GetPageListingAncestorsChildren200 = {
  ancestorsChildren?: GetPageListingAncestorsChildren200AncestorsChildren;
};

export type GetPageListingChildrenParams = {
  id?: string;
  path?: string;
};

export type GetPageListingChildren200 = {
  children?: Page[];
};

export type GetPageListingInfoParams = {
  pageIds?: string[];
  path?: string;
  attachBookmarkCount?: boolean;
  attachShortBody?: boolean;
};

export type GetPageListingInfo200IdToPageInfoMap = {
  [key: string]: {
    commentCount?: number;
    contentAge?: number;
    descendantCount?: number;
    isAbleToDeleteCompletely?: boolean;
    isDeletable?: boolean;
    isEmpty?: boolean;
    isMovable?: boolean;
    isRevertible?: boolean;
    isV5Compatible?: boolean;
    likerIds?: string[];
    seenUserIds?: string[];
    sumOfLikers?: number;
    sumOfSeenUsers?: number;
  };
};

export type GetPageListingInfo200 = {
  idToPageInfoMap?: GetPageListingInfo200IdToPageInfoMap;
};

export type GetPageParams = {
  /**
   * page id
   */
  pageId?: ObjectId;
  /**
   * page path
   */
  path?: PagePath;
};

export type PostPageBody = {
  /** Text of page */
  body: string;
  path: PagePath;
  grant?: PageGrant;
  /** UserGroup ID */
  grantUserGroupIds?: string;
  pageTags?: string[];
};

export type PostPage201Data = {
  page?: Page;
  tags?: Tags[];
  revision?: Revision;
};

export type PostPage201 = {
  data?: PostPage201Data;
};

export type PutPageBody = {
  body: RevisionBody;
  pageId: ObjectId;
  revisionId: ObjectId;
  grant?: PageGrant;
  userRelatedGrantUserGroupIds?: string[];
  /** Determine whether the scopes of descendants should be overwritten */
  overwriteScopesOfDescendants?: boolean;
  /** Determine whether the page is enabled to be posted to Slack */
  isSlackEnabled?: boolean;
  /** Slack channel IDs */
  slackChannels?: string;
  /** Origin is "view" or "editor" */
  origin?: string;
  /** Determine whether the page is WIP */
  wip?: boolean;
};

export type PutPage200Data = {
  page?: Page;
  revision?: Revision;
};

export type PutPage200 = {
  data?: PutPage200Data;
};

export type GetPageExistParams = {
  /**
   * The path to check for existence
   */
  path: string;
};

export type GetPageExist200 = {
  isExist?: boolean;
};

export type GetPageGrantDataParams = {
  /**
   * page id
   */
  pageId?: ObjectId;
};

export type GetPageGrantData200 = {
  isGrantNormalized?: boolean;
};

export type GetPageNonUserRelatedGroupsGrantedParams = {
  /**
   * Path of the page
   */
  path: string;
};

export type GetPageNonUserRelatedGroupsGranted200 = {
  isNonUserRelatedGroupsGranted?: boolean;
};

export type GetPageApplicableGrantParams = {
  /**
   * ID of the page
   */
  pageId: string;
};

export type GetPageApplicableGrant200 = {
  grant?: number;
  grantedUsers?: string[];
  grantedGroups?: string[];
};

export type PutPageIdGrantBody = {
  /** Grant level */
  grant?: number;
  /** Array of user-related granted group IDs */
  userRelatedGrantedGroups?: string[];
};

export type GetPageExistPathsParams = {
  /**
   * old parent path
   */
  fromPath?: string;
  /**
   * new parent path
   */
  toPath?: string;
};

/**
 * Paths are already exist in DB
 */
export type GetPageExistPaths200ExistPaths = { [key: string]: unknown };

export type GetPageExistPaths200 = {
  /** Paths are already exist in DB */
  existPaths?: GetPageExistPaths200ExistPaths;
};

export type PutPageSubscribeBody = {
  pageId?: ObjectId;
};

export type PutPageIdContentWidthBody = {
  /** Whether to expand the content width */
  expandContentWidth?: boolean;
};

export type PutPageIdContentWidth200 = {
  page?: Page;
};

/**
 * Yjs data
 */
export type GetPageIdYjsData200YjsData = {
  /** Whether Yjs documents are newer than the latest revision */
  hasYdocsNewerThanLatestRevision?: boolean;
  /** Size of the awareness state */
  awarenessStateSize?: number;
};

export type GetPageIdYjsData200 = {
  /** Yjs data */
  yjsData?: GetPageIdYjsData200YjsData;
};

export type PutPageIdSyncLatestRevisionBodyToYjsDraftBody = {
  /** Length of the editing markdown */
  editingMarkdownLength?: number;
};

export type PutPageIdSyncLatestRevisionBodyToYjsDraft200 = {
  /** Whether the latest revision body is synced to the Yjs draft */
  synced?: boolean;
  /** Whether Yjs data is broken */
  isYjsDataBroken?: boolean;
};

export type GetPagesRecentParams = {
  /**
   * Limit of acquisitions
   */
  limit?: number;
  /**
   * Offset of acquisitions
   */
  offset?: number;
  /**
   * Whether to include WIP pages
   */
  includeWipPage?: string;
};

export type PostPagesRenameBody = {
  pageId: ObjectId;
  path?: PagePath;
  /** revision ID */
  revisionId: string;
  /** new path */
  newPagePath?: string;
  /** whether redirect page */
  isRenameRedirect?: boolean;
  /** whether update meta data */
  updateMetadata?: boolean;
  /** whether rename page with descendants */
  isRecursively?: boolean;
};

export type PostPagesRename200 = {
  page?: Page;
};

export type PostPagesResumeRenameBody = {
  pageId: ObjectId;
};

export type PostPagesResumeRename200 = { [key: string]: unknown };

export type DeletePagesEmptyTrash200 = {
  deletablePages?: Page[];
};

export type GetPagesListParams = {
  /**
   * Path to search
   */
  path?: string;
  /**
   * Limit of acquisitions
   */
  limit?: number;
  /**
   * Page number
   */
  page?: number;
};

export type GetPagesList200PagesItemAllOf = {
  lastUpdateUser?: User;
};

export type GetPagesList200PagesItem = Page & GetPagesList200PagesItemAllOf;

export type GetPagesList200 = {
  /** Total count of pages */
  totalCount?: number;
  /** Offset of pages */
  offset?: number;
  /** Limit of pages */
  limit?: number;
  pages?: GetPagesList200PagesItem[];
};

export type PostPagesDuplicateBody = {
  pageId: ObjectId;
  pageNameInput?: PagePath;
  /** whether duplicate page with descendants */
  isRecursively?: boolean;
  /** whether duplicate only user related resources */
  onlyDuplicateUserRelatedResources?: boolean;
};

export type PostPagesDuplicate200 = {
  page?: Page;
};

export type GetPagesSubordinatedListParams = {
  /**
   * Parent path of search
   */
  path?: string;
  /**
   * Limit of acquisitions
   */
  limit?: number;
};

export type GetPagesSubordinatedList200 = {
  subordinatedPages?: Page[];
};

/**
 * Map of page IDs to revision IDs
 */
export type PostPagesDeleteBodyPageIdToRevisionIdMap = { [key: string]: unknown };

export type PostPagesDeleteBody = {
  /** Map of page IDs to revision IDs */
  pageIdToRevisionIdMap?: PostPagesDeleteBodyPageIdToRevisionIdMap;
  /** Whether to delete pages completely */
  isCompletely?: boolean;
  /** Whether to delete pages recursively */
  isRecursively?: boolean;
  /** Whether the page is restricted to anyone with the link */
  isAnyoneWithTheLink?: boolean;
};

export type PostPagesDelete200 = {
  /** List of deleted page paths */
  paths?: string[];
  /** Whether pages were deleted recursively */
  isRecursively?: boolean;
  /** Whether pages were deleted completely */
  isCompletely?: boolean;
};

export type PostPagesConvertPagesByPathBody = {
  /** Path to convert */
  convertPath?: string;
};

/**
 * Empty object
 */
export type PostPagesConvertPagesByPath200 = { [key: string]: unknown };

export type PostPagesLegacyPagesMigrationBody = {
  /** List of page IDs to migrate */
  pageIds?: string[];
  /** Whether to migrate pages recursively */
  isRecursively?: boolean;
};

/**
 * Empty object
 */
export type PostPagesLegacyPagesMigration200 = { [key: string]: unknown };

export type GetPagesV5MigrationStatus200 = {
  /** Whether the app is V5 compatible */
  isV5Compatible?: boolean;
  /** Number of pages that can be migrated */
  migratablePagesCount?: number;
};

/**
 * personal params
 */
export type GetPersonalSetting200CurrentUser = { [key: string]: unknown };

export type GetPersonalSetting200 = {
  /** personal params */
  currentUser?: GetPersonalSetting200CurrentUser;
};

/**
 * personal params
 */
export type PutPersonalSetting200UpdatedUser = { [key: string]: unknown };

export type PutPersonalSetting200 = {
  /** personal params */
  updatedUser?: PutPersonalSetting200UpdatedUser;
};

export type GetPersonalSettingIsPasswordSet200 = {
  /** Whether a password has been set */
  isPasswordSet?: boolean;
  /** Minimum password length */
  minPasswordLength?: number;
};

export type PutPersonalSettingImageTypeBody = {
  isGravatarEnabled?: boolean;
};

/**
 * user data
 */
export type PutPersonalSettingImageType200UserData = { [key: string]: unknown };

export type PutPersonalSettingImageType200 = {
  /** user data */
  userData?: PutPersonalSettingImageType200UserData;
};

/**
 * array of external accounts
 */
export type GetPersonalSettingExternalAccounts200ExternalAccounts = { [key: string]: unknown };

export type GetPersonalSettingExternalAccounts200 = {
  /** array of external accounts */
  externalAccounts?: GetPersonalSettingExternalAccounts200ExternalAccounts;
};

export type PutPersonalSettingPasswordBody = {
  oldPassword?: string;
  newPassword?: string;
};

/**
 * user data updated
 */
export type PutPersonalSettingPassword200UserData = { [key: string]: unknown };

export type PutPersonalSettingPassword200 = {
  /** user data updated */
  userData?: PutPersonalSettingPassword200UserData;
};

/**
 * user data
 */
export type PutPersonalSettingApiToken200UserData = { [key: string]: unknown };

export type PutPersonalSettingApiToken200 = {
  /** user data */
  userData?: PutPersonalSettingApiToken200UserData;
};

export type PutPersonalSettingAssociateLdapBody = {
  username?: string;
};

/**
 * Ldap account associate to me
 */
export type PutPersonalSettingAssociateLdap200AssociateUser = { [key: string]: unknown };

export type PutPersonalSettingAssociateLdap200 = {
  /** Ldap account associate to me */
  associateUser?: PutPersonalSettingAssociateLdap200AssociateUser;
};

/**
 * Ldap account disassociate to me
 */
export type PutPersonalSettingDisassociateLdap200DisassociateUser = { [key: string]: unknown };

export type PutPersonalSettingDisassociateLdap200 = {
  /** Ldap account disassociate to me */
  disassociateUser?: PutPersonalSettingDisassociateLdap200DisassociateUser;
};

export type PutPersonalSettingEditorSettingsBody = {
  theme?: string;
  keymapMode?: string;
  styleActiveLine?: boolean;
  autoFormatMarkdownTable?: boolean;
};

/**
 * editor settings
 */
export type PutPersonalSettingEditorSettings200 = { [key: string]: unknown };

/**
 * editor settings
 */
export type GetPersonalSettingEditorSettings200 = { [key: string]: unknown };

export type PutPersonalSettingInAppNotificationSettingsBodySubscribeRulesItem = {
  name?: string;
  isEnabled?: boolean;
};

export type PutPersonalSettingInAppNotificationSettingsBody = {
  subscribeRules?: PutPersonalSettingInAppNotificationSettingsBodySubscribeRulesItem[];
};

export type PutPersonalSettingInAppNotificationSettings200 = { [key: string]: unknown };

/**
 * InAppNotificationSettings
 */
export type GetPersonalSettingInAppNotificationSettings200CurrentUser = { [key: string]: unknown };

export type GetPersonalSettingInAppNotificationSettings200 = {
  /** InAppNotificationSettings */
  currentUser?: GetPersonalSettingInAppNotificationSettings200CurrentUser;
};

export type PutPersonalSettingQuestionnaireSettingsBody = {
  isQuestionnaireEnabled?: boolean;
};

export type PutPersonalSettingQuestionnaireSettings200 = {
  message?: string;
  isQuestionnaireEnabled?: boolean;
};

export type GetRevisionsListParams = {
  pageId?: string;
  /**
   * selected page number
   */
  page?: number;
  /**
   * page item limit
   */
  limit?: number;
};

export type GetRevisionsList200 = {
  revisions?: Revision[];
  /** total count of revisions */
  totalCount?: number;
  /** offset of the revisions */
  offset?: number;
};

export type GetRevisionsIdParams = {
  /**
   * page id
   */
  pageId: string;
};

export type GetRevisionsId200 = {
  revision?: Revision;
};

export type GetSearchIndices200 = {
  /** Status of indices */
  info?: Indices;
};

/**
 * Operation type against to indices > * `normalize` - Normalize indices * `rebuild` - Rebuild indices
 */
export type PutSearchIndicesBodyOperation = (typeof PutSearchIndicesBodyOperation)[keyof typeof PutSearchIndicesBodyOperation];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutSearchIndicesBodyOperation = {
  normalize: 'normalize',
  rebuild: 'rebuild',
} as const;

export type PutSearchIndicesBody = {
  /** Operation type against to indices > * `normalize` - Normalize indices * `rebuild` - Rebuild indices */
  operation?: PutSearchIndicesBodyOperation;
};

export type PutSearchIndices200 = {
  /** Operation is successfully processed, or requested */
  message?: string;
};

/**
 * security params
 */
export type GetSecuritySetting200SecurityParams = {
  generalSetting?: GeneralSetting;
  shareLinkSetting?: ShareLinkSetting;
  localSetting?: LocalSetting;
  generalAuth?: GeneralAuthSetting;
  ldapAuth?: LdapAuthSetting;
  samlAuth?: SamlAuthSetting;
  oidcAuth?: OidcAuthSetting;
  googleOAuth?: GoogleOAuthSetting;
  githubOAuth?: GitHubOAuthSetting;
};

export type GetSecuritySetting200 = {
  /** security params */
  securityParams?: GetSecuritySetting200SecurityParams;
};

export type PutSecuritySettingAuthenticationEnabledBody = {
  isEnabled?: boolean;
  authId?: string;
};

/**
 * updated param
 */
export type PutSecuritySettingAuthenticationEnabled200 = { [key: string]: unknown };

export type GetSecuritySettingAuthentication200 = {
  /** setup strategies list */
  setupStrategies?: string[];
};

export type PutSecuritySettingShareLinkSetting200 = {
  securitySettingParams?: ShareLinkSetting;
};

/**
 * suceed to get all share links
 */
export type GetSecuritySettingAllShareLinks200SecurityParams = { [key: string]: unknown };

export type GetSecuritySettingAllShareLinks200 = {
  /** suceed to get all share links */
  securityParams?: GetSecuritySettingAllShareLinks200SecurityParams;
};

export type DeleteSecuritySettingAllShareLinks200 = {
  /** total number of removed share links */
  removeTotal?: number;
};

export type PutSecuritySettingLocalSetting200 = {
  localSettingParams?: LocalSetting;
};

export type PutSecuritySettingLdap200 = {
  securitySettingParams?: LdapAuthSetting;
};

export type PutSecuritySettingSaml200 = {
  securitySettingParams?: SamlAuthSetting;
};

export type PutSecuritySettingOidc200 = {
  securitySettingParams?: OidcAuthSetting;
};

export type PutSecuritySettingGoogleOauth200 = {
  securitySettingParams?: GoogleOAuthSetting;
};

export type PutSecuritySettingGithubOauth200 = {
  securitySettingParams?: GitHubOAuthSetting;
};

export type GetShareLinksParams = {
  /**
   * page id of share link
   */
  relatedPage: string;
};

export type GetShareLinks200 = {
  shareLinksResult?: ShareLink[];
};

export type PostShareLinksParams = {
  /**
   * page id of share link
   */
  relatedPage: string;
  /**
   * expiration date of share link
   */
  expiredAt?: string;
  /**
   * description of share link
   */
  description?: string;
};

export type DeleteShareLinksParams = {
  /**
   * page id of share link
   */
  relatedPage: string;
};

export type DeleteShareLinksAll200 = {
  /** The number of share links deleted */
  deletedCount?: number;
};

export type GetSlackIntegrationLegacySetting200SlackIntegrationParamsAllOf = {
  /** whether slackbot is configured */
  isSlackbotConfigured?: boolean;
};

export type GetSlackIntegrationLegacySetting200SlackIntegrationParams = SlackConfigurationParams &
  GetSlackIntegrationLegacySetting200SlackIntegrationParamsAllOf;

export type GetSlackIntegrationLegacySetting200 = {
  slackIntegrationParams?: GetSlackIntegrationLegacySetting200SlackIntegrationParams;
};

export type PutSlackIntegrationLegacySettingBody = {
  /** incoming webhooks url */
  webhookUrl?: string;
  /** use incoming webhooks even if Slack App settings are enabled */
  isIncomingWebhookPrioritized?: boolean;
  /** OAuth access token */
  slackToken?: string;
};

export type PutSlackIntegrationLegacySetting200 = {
  responseParams?: SlackConfigurationParams;
};

export type GetSlackIntegrationSettings200SettingsCommandPermission = { [key: string]: unknown };

export type GetSlackIntegrationSettings200SettingsEventActionsPermission = { [key: string]: unknown };

export type GetSlackIntegrationSettings200Settings = {
  slackSigningSecretEnvVars?: string;
  slackBotTokenEnvVars?: string;
  slackSigningSecret?: string;
  slackBotToken?: string;
  commandPermission?: GetSlackIntegrationSettings200SettingsCommandPermission;
  eventActionsPermission?: GetSlackIntegrationSettings200SettingsEventActionsPermission;
  proxyServerUri?: string;
};

export type GetSlackIntegrationSettings200ConnectionStatuses = { [key: string]: unknown };

export type GetSlackIntegrationSettings200 = {
  currentBotType?: string;
  settings?: GetSlackIntegrationSettings200Settings;
  connectionStatuses?: GetSlackIntegrationSettings200ConnectionStatuses;
  errorMsg?: string;
  errorCode?: string;
};

export type PutSlackIntegrationSettingsWithoutProxyUpdateSettingsBody = {
  slackSigningSecret?: string;
  slackBotToken?: string;
};

export type PutSlackIntegrationSettingsWithoutProxyUpdatePermissionsBodyCommandPermission = { [key: string]: unknown };

export type PutSlackIntegrationSettingsWithoutProxyUpdatePermissionsBodyEventActionsPermission = { [key: string]: unknown };

export type PutSlackIntegrationSettingsWithoutProxyUpdatePermissionsBody = {
  commandPermission?: PutSlackIntegrationSettingsWithoutProxyUpdatePermissionsBodyCommandPermission;
  eventActionsPermission?: PutSlackIntegrationSettingsWithoutProxyUpdatePermissionsBodyEventActionsPermission;
};

export type PostSlackIntegrationSettingsSlackAppIntegrations200PermissionsForBroadcastUseCommands = { [key: string]: unknown };

export type PostSlackIntegrationSettingsSlackAppIntegrations200PermissionsForSingleUseCommands = { [key: string]: unknown };

export type PostSlackIntegrationSettingsSlackAppIntegrations200PermissionsForSlackEvents = { [key: string]: unknown };

export type PostSlackIntegrationSettingsSlackAppIntegrations200 = {
  tokenGtoP?: string;
  tokenPtoG?: string;
  permissionsForBroadcastUseCommands?: PostSlackIntegrationSettingsSlackAppIntegrations200PermissionsForBroadcastUseCommands;
  permissionsForSingleUseCommands?: PostSlackIntegrationSettingsSlackAppIntegrations200PermissionsForSingleUseCommands;
  permissionsForSlackEvents?: PostSlackIntegrationSettingsSlackAppIntegrations200PermissionsForSlackEvents;
  isPrimary?: boolean;
};

export type DeleteSlackIntegrationSettingsSlackAppIntegrationsId200Response = { [key: string]: unknown };

export type DeleteSlackIntegrationSettingsSlackAppIntegrationsId200 = {
  response?: DeleteSlackIntegrationSettingsSlackAppIntegrationsId200Response;
};

export type PutSlackIntegrationSettingsProxyUriBody = {
  proxyUri?: string;
};

export type PutSlackIntegrationSettingsProxyUri200 = { [key: string]: unknown };

export type PutSlackIntegrationSettingsSlackAppIntegrationsIdRegenerateTokens200 = { [key: string]: unknown };

export type PutSlackIntegrationSettingsSlackAppIntegrationsIdPermissionsBodyPermissionsForBroadcastUseCommands = { [key: string]: unknown };

export type PutSlackIntegrationSettingsSlackAppIntegrationsIdPermissionsBodyPermissionsForSingleUseCommands = { [key: string]: unknown };

export type PutSlackIntegrationSettingsSlackAppIntegrationsIdPermissionsBodyPermissionsForSlackEventActions = { [key: string]: unknown };

export type PutSlackIntegrationSettingsSlackAppIntegrationsIdPermissionsBody = {
  permissionsForBroadcastUseCommands?: PutSlackIntegrationSettingsSlackAppIntegrationsIdPermissionsBodyPermissionsForBroadcastUseCommands;
  permissionsForSingleUseCommands?: PutSlackIntegrationSettingsSlackAppIntegrationsIdPermissionsBodyPermissionsForSingleUseCommands;
  permissionsForSlackEventActions?: PutSlackIntegrationSettingsSlackAppIntegrationsIdPermissionsBodyPermissionsForSlackEventActions;
};

export type PutSlackIntegrationSettingsSlackAppIntegrationsIdPermissions200 = { [key: string]: unknown };

export type PostSlackIntegrationSettingsSlackAppIntegrationsIdRelationTestBody = {
  channel?: string;
};

export type PostSlackIntegrationSettingsWithoutProxyTestBody = {
  channel?: string;
};

export type PostSlackIntegrationCommandsBody = { [key: string]: unknown };

export type PostSlackIntegrationProxiedVerifyBody = {
  type?: string;
  challenge?: string;
};

export type PostSlackIntegrationProxiedVerify200 = {
  challenge?: string;
};

export type PostSlackIntegrationProxiedCommandsBody = { [key: string]: unknown };

export type PostSlackIntegrationInteractionsBody = { [key: string]: unknown };

export type PostSlackIntegrationProxiedInteractionsBody = { [key: string]: unknown };

export type GetSlackIntegrationSupportedCommands200PermissionsForBroadcastUseCommandsItem = { [key: string]: unknown };

export type GetSlackIntegrationSupportedCommands200PermissionsForSingleUseCommandsItem = { [key: string]: unknown };

export type GetSlackIntegrationSupportedCommands200 = {
  permissionsForBroadcastUseCommands?: GetSlackIntegrationSupportedCommands200PermissionsForBroadcastUseCommandsItem[];
  permissionsForSingleUseCommands?: GetSlackIntegrationSupportedCommands200PermissionsForSingleUseCommandsItem[];
};

export type PostSlackIntegrationEventsBodyEvent = { [key: string]: unknown };

export type PostSlackIntegrationEventsBody = {
  event?: PostSlackIntegrationEventsBodyEvent;
};

export type PostSlackIntegrationEvents200 = { [key: string]: unknown };

export type PostSlackIntegrationProxiedEventsBodyGrowiBotEvent = { [key: string]: unknown };

export type PostSlackIntegrationProxiedEventsBodyData = { [key: string]: unknown };

export type PostSlackIntegrationProxiedEventsBody = {
  growiBotEvent?: PostSlackIntegrationProxiedEventsBodyGrowiBotEvent;
  data?: PostSlackIntegrationProxiedEventsBodyData;
};

export type PostSlackIntegrationProxiedEvents200 = { [key: string]: unknown };

export type PostCompleteRegistrationBodyRegisterForm = {
  username?: string;
  name?: string;
  password?: string;
  token?: string;
  email?: string;
};

export type PostCompleteRegistrationBody = {
  registerForm?: PostCompleteRegistrationBodyRegisterForm;
};

export type PostCompleteRegistration200 = {
  redirectTo?: string;
};

export type GetUserGroupRelations200UserGroupRelationsUserGroupRelationsItem = { [key: string]: unknown };

export type GetUserGroupRelations200UserGroupRelationsRelationsOfChildGroupsItem = { [key: string]: unknown };

/**
 * contains arrays user objects related
 */
export type GetUserGroupRelations200UserGroupRelations = {
  userGroupRelations?: GetUserGroupRelations200UserGroupRelationsUserGroupRelationsItem[];
  relationsOfChildGroups?: GetUserGroupRelations200UserGroupRelationsRelationsOfChildGroupsItem[];
};

export type GetUserGroupRelations200 = {
  /** contains arrays user objects related */
  userGroupRelations?: GetUserGroupRelations200UserGroupRelations;
};

export type GetUserGroupsParams = {
  /**
   * page number
   */
  page?: number;
  /**
   * number of items per page
   */
  limit?: number;
  /**
   * offset
   */
  offset?: number;
  /**
   * whether to paginate
   */
  pagination?: boolean;
};

/**
 * a result of `UserGroup.find`
 */
export type GetUserGroups200UserGroups = { [key: string]: unknown };

export type GetUserGroups200 = {
  /** a result of `UserGroup.find` */
  userGroups?: GetUserGroups200UserGroups;
  /** the number of userGroups */
  totalUserGroups?: number;
  /** the number of items per page */
  pagingLimit?: number;
};

export type PostUserGroupsBody = {
  /** name of the userGroup trying to be added */
  name?: string;
  /** description of the userGroup trying to be added */
  description?: string;
  /** parentId of the userGroup trying to be added */
  parentId?: string;
};

/**
 * A result of `UserGroup.createGroupByName`
 */
export type PostUserGroups200UserGroup = { [key: string]: unknown };

export type PostUserGroups200 = {
  /** A result of `UserGroup.createGroupByName` */
  userGroup?: PostUserGroups200UserGroup;
};

export type GetUserGroupsAncestorsParams = {
  /**
   * id of userGroup
   */
  groupId: string;
};

export type GetUserGroupsAncestors200AncestorUserGroupsItem = { [key: string]: unknown };

export type GetUserGroupsAncestors200 = {
  /** userGroup objects */
  ancestorUserGroups?: GetUserGroupsAncestors200AncestorUserGroupsItem[];
};

export type GetUserGroupsChildrenParams = {
  /**
   * IDs of parent user groups
   */
  parentIds?: string[];
  /**
   * Whether to include grandchild user groups
   */
  includeGrandChildren?: boolean;
};

export type GetUserGroupsChildren200ChildUserGroupsItem = { [key: string]: unknown };

export type GetUserGroupsChildren200GrandChildUserGroupsItem = { [key: string]: unknown };

export type GetUserGroupsChildren200 = {
  /** Child user group objects */
  childUserGroups?: GetUserGroupsChildren200ChildUserGroupsItem[];
  /** Grandchild user group objects */
  grandChildUserGroups?: GetUserGroupsChildren200GrandChildUserGroupsItem[];
};

export type GetSelectableParentGroupsParams = {
  /**
   * id of userGroup
   */
  groupId: string;
};

export type GetSelectableParentGroups200SelectableParentGroupsItem = { [key: string]: unknown };

export type GetSelectableParentGroups200 = {
  /** userGroup objects */
  selectableParentGroups?: GetSelectableParentGroups200SelectableParentGroupsItem[];
};

export type GetSelectableChildGroupsParams = {
  /**
   * id of userGroup
   */
  groupId: string;
};

export type GetSelectableChildGroups200SelectableChildGroupsItem = { [key: string]: unknown };

export type GetSelectableChildGroups200 = {
  /** userGroup objects */
  selectableChildGroups?: GetSelectableChildGroups200SelectableChildGroupsItem[];
};

/**
 * userGroup object
 */
export type GetUserGroupsId200UserGroup = { [key: string]: unknown };

export type GetUserGroupsId200 = {
  /** userGroup object */
  userGroup?: GetUserGroupsId200UserGroup;
};

export type DeleteUserGroupsIdParams = {
  /**
   * name of action
   */
  actionName?: string;
  /**
   * userGroup id that will be transferred to
   */
  transferToUserGroupId?: string;
  /**
   * userGroup type that will be transferred to
   */
  transferToUserGroupType?: string;
};

/**
 * A result of `UserGroup.removeCompletelyById`
 */
export type DeleteUserGroupsId200UserGroups = { [key: string]: unknown };

export type DeleteUserGroupsId200 = {
  /** A result of `UserGroup.removeCompletelyById` */
  userGroups?: DeleteUserGroupsId200UserGroups;
};

export type PutUserGroupsIdBody = {
  /** name of the userGroup trying to be updated */
  name?: string;
  /** description of the userGroup trying to be updated */
  description?: string;
  /** parentId of the userGroup trying to be updated */
  parentId?: string;
  /** whether to update parent groups */
  forceUpdateParents?: boolean;
};

/**
 * A result of `UserGroup.updateName`
 */
export type PutUserGroupsId200UserGroup = { [key: string]: unknown };

export type PutUserGroupsId200 = {
  /** A result of `UserGroup.updateName` */
  userGroup?: PutUserGroupsId200UserGroup;
};

export type GetUserGroupsIdUsers200 = {
  /** user objects */
  users?: User[];
};

export type GetUserGroupsIdUnrelatedUsersParams = {
  /**
   * search word
   */
  searchWord?: string;
  /**
   * search type
   */
  searchType?: string;
  /**
   * whether name is also searched
   */
  isAlsoNameSearched?: boolean;
  /**
   * whether mail is also searched
   */
  isAlsoMailSearched?: boolean;
};

export type GetUserGroupsIdUnrelatedUsers200 = {
  /** user objects */
  users?: User[];
};

export type PostUserGroupsIdUsersUsername200 = {
  /** the user added to the group */
  user?: User;
  /** the number of relations created */
  createdRelationCount?: number;
};

export type DeleteUserGroupsIdUsersUsername200 = {
  /** the user removed from the group */
  user?: User;
  /** the number of groups from which the user was removed */
  deletedGroupsCount?: number;
};

export type GetUserGroupsIdUserGroupRelations200UserGroupRelationsItem = { [key: string]: unknown };

export type GetUserGroupsIdUserGroupRelations200 = {
  /** userGroupRelation objects */
  userGroupRelations?: GetUserGroupsIdUserGroupRelations200UserGroupRelationsItem[];
};

export type GetUserGroupsIdPages200PagesItem = { [key: string]: unknown };

export type GetUserGroupsIdPages200 = {
  /** page objects */
  pages?: GetUserGroupsIdPages200PagesItem[];
};

export type PutUserUiSettingsBodySettings = {
  currentSidebarContents?: string;
  currentProductNavWidth?: number;
  preferCollapsedModeByUser?: boolean;
};

export type PutUserUiSettingsBody = {
  settings?: PutUserUiSettingsBodySettings;
};

export type PutUserUiSettings200 = {
  _id?: string;
  user?: string;
  __v?: number;
  currentSidebarContents?: string;
  preferCollapsedModeByUser?: boolean;
};

export type GetUsersParams = {
  /**
   * page number
   */
  page?: number;
  /**
   * status list
   */
  selectedStatusList?: string;
  /**
   * For incremental search value from input box
   */
  searchText?: string;
  /**
   * asc or desc
   */
  sortOrder?: string;
  /**
   * sorting column
   */
  sort?: string;
  /**
   * force include attributes
   */
  forceIncludeAttributes?: string;
};

export type GetUsers200 = {
  paginateResult?: PaginateResult;
};

export type GetIdRecent200 = {
  paginateResult?: PaginateResult;
};

export type PostUsersInviteParams = {
  /**
   * Invitation emailList
   */
  shapedEmailList?: { [key: string]: unknown };
  /**
   * Whether to send mail
   */
  sendEmail?: boolean;
};

/**
 * Users email that failed to create or send email
 */
export type PostUsersInvite200FailedEmailList = {
  /** email address */
  email?: string;
  /** reason for failure */
  reason?: string;
};

export type PostUsersInvite200 = {
  /** Users successfully created */
  createdUserList?: User;
  /** Users email that already exists */
  existingEmailList?: string[];
  /** Users email that failed to create or send email */
  failedEmailList?: PostUsersInvite200FailedEmailList;
};

export type PutUsersIdGrantAdmin200 = {
  /** data of admin user */
  userData?: User;
};

/**
 * data of revoked admin user
 */
export type PutUsersIdRevokeAdmin200UserData = { [key: string]: unknown };

export type PutUsersIdRevokeAdmin200 = {
  /** data of revoked admin user */
  userData?: PutUsersIdRevokeAdmin200UserData;
};

export type PutUsersIdGrantReadOnly200 = {
  /** data of grant read only */
  userData?: User;
};

export type PutUsersIdRevokeReadOnly200 = {
  /** data of revoke read only */
  userData?: User;
};

export type PutUsersIdActivate200 = {
  /** data of activate user */
  userData?: User;
};

export type PutUsersIdDeactivate200 = {
  /** data of deactivate user */
  userData?: User;
};

export type DeleteUsersIdRemove200 = {
  /** data of deleted user */
  user?: User;
};

export type GetUsersExternalAccountsParams = {
  /**
   * page number
   */
  page?: number;
};

export type GetUsersExternalAccounts200 = {
  paginateResult?: PaginateResult;
};

/**
 * A result of `ExtenralAccount.findByIdAndRemove`
 */
export type DeleteUsersExternalAccountsIdRemove200ExternalAccount = { [key: string]: unknown };

export type DeleteUsersExternalAccountsIdRemove200 = {
  /** A result of `ExtenralAccount.findByIdAndRemove` */
  externalAccount?: DeleteUsersExternalAccountsIdRemove200ExternalAccount;
};

export type PutUsersUpdateImageUrlCacheBody = {
  /** user id list */
  userIds?: string[];
};

/**
 * success creating imageUrlCached
 */
export type PutUsersUpdateImageUrlCache200 = { [key: string]: unknown };

export type PutUsersResetPasswordBody = {
  /** user id for reset password */
  id?: string;
};

export type PutUsersResetPassword200 = {
  /** new password */
  newPassword?: string;
  user?: User;
};

export type PutUsersResetPasswordEmailBody = {
  /** user id for send new password email */
  id?: string;
  newPassword?: string;
};

export type PutUsersSendInvitationEmailBody = {
  /** user id for send invitation email */
  id?: string;
};

/**
 * email and reasons for email sending failure
 */
export type PutUsersSendInvitationEmail200FailedToSendEmail = {
  email?: string;
  reason?: string;
};

export type PutUsersSendInvitationEmail200 = {
  /** email and reasons for email sending failure */
  failedToSendEmail?: PutUsersSendInvitationEmail200FailedToSendEmail;
};

export type GetUsersListParams = {
  userIds?: string;
};

export type GetUsersList200 = {
  /** user list */
  users?: User[];
};

export type GetUsersUsernamesParams = {
  q?: string;
  offset?: number;
  limit?: number;
  options?: string;
};

export type GetUsersUsernames200ActiveUser = {
  usernames?: string[];
  totalCount?: number;
};

export type GetUsersUsernames200InactiveUser = {
  usernames?: string[];
  totalCount?: number;
};

export type GetUsersUsernames200ActivitySnapshotUser = {
  usernames?: string[];
  totalCount?: number;
};

export type GetUsersUsernames200 = {
  activeUser?: GetUsersUsernames200ActiveUser;
  inactiveUser?: GetUsersUsernames200InactiveUser;
  activitySnapshotUser?: GetUsersUsernames200ActivitySnapshotUser;
  mixedUsernames?: string[];
};

export type PostLoginBodyLoginForm = {
  username?: string;
  password?: string;
};

export type PostLoginBody = {
  loginForm?: PostLoginBodyLoginForm;
};

export type PostLogin200 = {
  redirectTo?: string;
};

export type PostRegisterBodyRegisterForm = {
  name?: string;
  username?: string;
  email?: string;
  password?: string;
};

export type PostRegisterBody = {
  registerForm?: PostRegisterBodyRegisterForm;
};

export type PostRegister200 = {
  redirectTo?: string;
};
